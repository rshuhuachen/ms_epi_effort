---
title: "Physio-associated CpG sites"
format: 
  html:
    link-external-newwindow: true
    fig-cap-location: top
---

**Which changes in CpG site methylation are associated with changes in physiology?**{#sec-physio}

Similar to the previous section, we next test which CpG site changes are significantly associated with changes in physiology. Physiological measures that we focus on include parasites (*Microfilaria spp.* and *Trypanosoma spp.*), body mass, IgG and HCT.

Again, we build a GLMM per CpG site to identify CpG sites whose DNA methylation change is associated with changes in physiology. For each CpG site for each trait, we build a model that predicts the changes DNA methylation, while fitting the change in physiology as a fixed effect as well as age and pre-lekking methylation level.

## Prepare the data

```{r delta_meth, echo=T, eval=F}

### load packages
pacman::p_load(tidyverse, data.table, tibble, performance, matrixStats, 
               parallel, performance, lmerTest, tidystats, insight)

### load data

load(file = "results/modeloutput/subset_sites_sig_deltameth.RData")

### load phenotypic data

load("data/phenotypes/fulldata_complete_epi_withdates.RData")
load("data/phenotypes/pheno_dif_prepost.RData")

#combine with site info

delta_meth <- left_join(delta_meth, unique(all_pheno_epi[,c("id", "year", "site", "Core")], by = c("id", "year")))

#combine with delta physiology
prepost_dif$mass_dif_scl <- scale(prepost_dif$mass_dif)
prepost_dif$microf_dif_scl <- scale(prepost_dif$microf_dif)
prepost_dif$trypa_dif_scl <- scale(prepost_dif$trypa_dif)
prepost_dif$ig_dif_scl <- scale(prepost_dif$ig_dif)
prepost_dif$hct_dif_scl <- scale(prepost_dif$hct_dif)

delta_meth <- left_join(delta_meth, unique(prepost_dif[,c("id", "year", "mass_dif_scl", "microf_dif_scl", "trypa_dif_scl", "ig_dif_scl", "hct_dif_scl")], by = c("id", "year")))

delta_meth_ls <- delta_meth %>% group_split(chr_pos)

```

## Functon to run the model

Below you'll find the full function ran per trait per CpG site, where the LMM ran follows this structure:

`lmerTest::lmer(scale(delta_meth) ~ scale(delta_trait) + age + scale(methperc_pre) + (1|site/id))`

```{r function, eval=F}
#| code-fold: true
# function to run the model
function_model_delta <- function(df, parameter){tryCatch({
  chr_pos <- as.character(df[1,1])
  df <- as.data.frame(df)
  df$methperc_pre_scl <- scale(df$methperc_pre)

  formula <- formula(paste0("scale(delta_meth) ~ ", parameter, "_dif_scl + age + scale(methperc_pre) + (1|site/id) "))
  
  model <- lmerTest::lmer(formula, data=df)
  summary <- summary(model)
  
  overdisp.lmer_fun <- function(model) {
    vpars <- function(m) {
      nrow(m)*(nrow(m)+1)/2
    }
    model.df <- sum(sapply(VarCorr(model),vpars))+length(fixef(model))
    rdf <- nrow(model.frame(model))-model.df
    rp <- residuals(model,type="pearson")
    Pearson.chisq <- sum(rp^2)
    prat <- Pearson.chisq/rdf
    pval <- pchisq(Pearson.chisq, df=rdf, lower.tail=FALSE)
    data.frame(chisq=Pearson.chisq,ratio=prat,rdf=rdf,p=pval)
  }
  
  #fixed effect
  parameter_estimate <- summary$coefficients[2,1]
  parameter_se <- summary$coefficients[2,2]
  parameter_df <- summary$coefficients[2,3]
  parameter_tval <- summary$coefficients[2,4]
  parameter_pval <- summary$coefficients[2,5]
  
  #age effect
  age_estimate <- summary$coefficients["age", "Estimate"]
  age_se <- summary$coefficients["age", "Std. Error"]
  age_df <- summary$coefficients["age", "df"]
  age_tval <- summary$coefficients["age", "t value"]
  age_pval <- summary$coefficients["age", "Pr(>|t|)"]
  
  #premeth effect
  pre_estimate <- summary$coefficients["scale(methperc_pre)", "Estimate"]
  pre_se <- summary$coefficients["scale(methperc_pre)", "Std. Error"]
  pre_df <- summary$coefficients["scale(methperc_pre)", "df"]
  pre_tval <- summary$coefficients["scale(methperc_pre)", "t value"]
  pre_pval <- summary$coefficients["scale(methperc_pre)", "Pr(>|t|)"]
  
  rsqc <- performance::r2(model)$R2_conditional #fixed plus random parameterects relative to overall variance
  rsqm <- performance::r2(model)$R2_marginal #fixed parameterects relative to overall variance
  
  dispersion.chisq <- overdisp.lmer_fun(model)[1,1]
  dispersion.ratio <- overdisp.lmer_fun(model)[1,2]
  dispersion.rdf <- overdisp.lmer_fun(model)[1,3]
  dispersion.pval <- overdisp.lmer_fun(model)[1,4]
  
  isSingular <- isSingular(model)
  
  icc_id_site <-icc(model, by_group = TRUE, tolerance = 0)[1,2]
  icc_site <-icc(model, by_group = TRUE, tolerance = 0)[2,2]
  
  return(data.frame(chr_pos=as.factor(chr_pos),
                    parameter = as.factor(parameter),
                    icc_id_site = as.numeric(icc_id_site),
                    icc_site = as.numeric(icc_site),
                    parameter_estimate = as.numeric(parameter_estimate),
                    parameter_se = as.numeric(parameter_se),
                    parameter_df = as.numeric(parameter_df),
                    parameter_tval = as.numeric(parameter_tval),
                    parameter_pval = as.numeric(parameter_pval),
                    age_estimate = as.numeric(age_estimate),
                    age_se = as.numeric(age_se),
                    age_df = as.numeric(age_df),
                    age_tval = as.numeric(age_tval),
                    age_pval = as.numeric(age_pval),
                    pre_estimate = as.numeric(pre_estimate),
                    pre_se = as.numeric(pre_se),
                    pre_df = as.numeric(pre_df),
                    pre_tval = as.numeric(pre_tval),
                    pre_pval = as.numeric(pre_pval),
                    rsqc = as.numeric(rsqc),
                    rsqm = as.numeric(rsqm),
                    dispersion.chisq = as.numeric(dispersion.chisq),
                    dispersion.ratio = as.numeric(dispersion.ratio),
                    dispersion.rdf = as.numeric(dispersion.rdf),
                    dispersion.pval = as.numeric(dispersion.pval),
                    isSingular = as.logical(isSingular)
                    
  ))
}, error = function(e){cat("ERROR :", conditionMessage(e), "\n");print(chr_pos)})
}

```

## Run the model per trait

```{r run_model_example, echo=T, eval=F}
### run the model per trait

### mass
# run model
delta_out_mass <- parallel::mclapply(delta_meth_ls, function_model_delta, parameter="mass",mc.cores=12)
delta_out_mass <- do.call(rbind.data.frame, delta_out_mass)

# convert to numeric
delta_out_mass$parameter_pval <- as.numeric(delta_out_mass$parameter_pval)
delta_out_mass$age_pval <- as.numeric(delta_out_mass$age_pval)

# exclude those with overdispersion
delta_out_mass <- subset(delta_out_mass, dispersion.ratio < 1.1 & dispersion.pval > 0.05)

# FDR correction
delta_out_mass$parameter_qval <- p.adjust(delta_out_mass$parameter_pval, method = "fdr", n = nrow(delta_out_mass))

delta_out_mass$age_qval <- p.adjust(delta_out_mass$age_pval, method = "fdr", n = nrow(delta_out_mass))

```

Repeat this for all traits:

```{r run_model, echo=T, eval=F}
#| code-fold: true
### microf
# run model
delta_out_microf <- parallel::mclapply(delta_meth_ls, function_model_delta, parameter="microf",mc.cores=12)
delta_out_microf <- do.call(rbind.data.frame, delta_out_microf)

# to numeric
delta_out_microf$parameter_pval <- as.numeric(delta_out_microf$parameter_pval)
delta_out_microf$age_pval <- as.numeric(delta_out_microf$age_pval)

# exclude overdispersion
delta_out_microf <- subset(delta_out_microf, isSingular == FALSE & dispersion.ratio < 1.1 & dispersion.pval > 0.05)

# FDR correction
delta_out_microf$parameter_qval <- p.adjust(delta_out_microf$parameter_pval, method = "fdr", n = nrow(delta_out_microf))
delta_out_microf$age_qval <- p.adjust(delta_out_microf$age_pval, method = "fdr", n = nrow(delta_out_microf))

### trypa
# run model
delta_out_trypa <- parallel::mclapply(delta_meth_ls, function_model_delta, parameter="trypa",mc.cores=12)
delta_out_trypa <- do.call(rbind.data.frame, delta_out_trypa)

# as numeric
delta_out_trypa$parameter_pval <- as.numeric(delta_out_trypa$parameter_pval)
delta_out_trypa$age_pval <- as.numeric(delta_out_trypa$age_pval)

# exclude overdispersion
delta_out_trypa <- subset(delta_out_trypa, dispersion.ratio < 1.1 & dispersion.pval > 0.05)

# FDR correction
delta_out_trypa$parameter_qval <- p.adjust(delta_out_trypa$parameter_pval, method = "fdr", n = nrow(delta_out_trypa))
delta_out_trypa$age_qval <- p.adjust(delta_out_trypa$age_pval, method = "fdr", n = nrow(delta_out_trypa))

### ig
# run model
delta_out_ig <- parallel::mclapply(delta_meth_ls, function_model_delta, parameter="ig",mc.cores=12)
delta_out_ig <- do.call(rbind.data.frame, delta_out_ig)

# as numeric
delta_out_ig$parameter_pval <- as.numeric(delta_out_ig$parameter_pval)
delta_out_ig$age_pval <- as.numeric(delta_out_ig$age_pval)

# exclude overdispersion
delta_out_ig <- subset(delta_out_ig, dispersion.ratio < 1.1 & dispersion.pval > 0.05)

# FDR correction
delta_out_ig$parameter_qval <- p.adjust(delta_out_ig$parameter_pval, method = "fdr", n = nrow(delta_out_ig))
delta_out_ig$age_qval <- p.adjust(delta_out_ig$age_pval, method = "fdr", n = nrow(delta_out_ig))

### hct
# run model
delta_out_hct <- parallel::mclapply(delta_meth_ls, function_model_delta, parameter="hct",mc.cores=12)
delta_out_hct <- do.call(rbind.data.frame, delta_out_hct)

# as numeric
delta_out_hct$parameter_pval <- as.numeric(delta_out_hct$parameter_pval)
delta_out_hct$age_pval <- as.numeric(delta_out_hct$age_pval)

# exclude overdispersion
delta_out_hct <- subset(delta_out_hct, dispersion.ratio < 1.1 & dispersion.pval > 0.05)

# FDR correction
delta_out_hct$parameter_qval <- p.adjust(delta_out_hct$parameter_pval, method = "fdr", n = nrow(delta_out_hct))
delta_out_hct$age_qval <- p.adjust(delta_out_hct$age_pval, method = "fdr", n = nrow(delta_out_hct))

### combine
delta_out_all <- rbind(delta_out_mass, delta_out_microf, delta_out_trypa, delta_out_ig, delta_out_hct)
delta_out_all$chr_pos <- as.factor(delta_out_all$chr_pos)
delta_out_all$parameter <- as.factor(delta_out_all$parameter)
delta_out_all$isSingular <- as.logical(delta_out_all$isSingular)
delta_out_all[c(3:25, 27,28)] <- lapply(delta_out_all[c(3:25, 27:28)], as.numeric)


```

## Results

Below we can see the volcano plots of all five physiological traits.

![Volcano plot physiological change](../plots/model_out/volcano_physio.png){width="350" fig-align="left"}

After also subsetting for at least an (absolute) estimate of 0.1, there are 12 significant CpGs for delta *Microfilaria spp*, 21 for delta *Trypanosoma spp.*, 23 for delta HCT and 5 for delta IgG, but 8 significant ones for delta body mass. Below you'll find the raw data plots for each trait and CpG site.

### Microfilaria spp.

![Raw data delta Microfilaria a](../plots/model_out/rawdata_plot_microf_a.png)

![Raw data delta Microfilaria b](../plots/model_out/rawdata_plot_microf_b.png)

### Trypanosoma spp.

![Raw data delta Trypanosoma a](../plots/model_out/rawdata_plot_trypa_a.png)

![Raw data delta Trypanosoma b](../plots/model_out/rawdata_plot_trypa_b.png)

### IgG

![Raw data delta IgG](../plots/model_out/rawdata_plot_igg.png)

### HCT

![Raw data delta HCT a](../plots/model_out/rawdata_plot_hct_a.png)

![Raw data delta HCT b](../plots/model_out/rawdata_plot_hct_b.png)


