---
title: "Effort-associated CpG sites"
format: 
  html:
    link-external-newwindow: true
    fig-cap-location: top
---

**Which changes in CpG site methylation are associated with reproductive effort?**

We have now identified a subset of CpG sites that significantly change over the lekking season, either by increasing or decreasing in methylation level. We next test which CpG site changes are significantly associated with different measures of reproductive effort. Lekking is an energy-intensive, costly activity, as reflected by the losses in body mass in males that invest in reproduction (Lebigre et al., 2007). Therefore, we expect that the cost associated with high reproductive investment goes at the expense of other costly processess, which can be observed by the up- or downregulation of associated genes.

Similar to before, we build a GLMM per CpG site to identify CpG sites whose DNA methylation change is associated with reproductive effort. We quantify reproductive effort using three behavioural traits: lek attendance, fighting rate and lek centrality. For each CpG site for each trait, we build a model that predicts delta methylation, while fitting the behaviour as a fixed effect.

## Pre-methylation vs delta methylation

We expect that pre-lekking methylation levels affect delta methylation %. If pre-lekking methylation is 0%, there is potential for +100% change, but if pre-lekking methylation is 100%, there is potential for -100% change. On the other hand, if pre-lekking methylation is 50%, there is only potential for -50% and +50% change. Thus, we expect a U-shaped relationship between pre-lekking and absolute delta methylation. I plot the empirical data for this, based on only the CpG sites that significantly change across the lekking period. The red line in the left plot is the (linear) regression while correcting for id as a random effect (so a lmer output).

![Pre-lekking vs delta lekking methylation %](../plots/explore/pre_vs_delta.png)

There does seem to be some association between the two, yet we might mask the effect of delta methylation on the phenotype if we include pre-lekking methylation in the model too. Therefore, we run two models in parallel: one that does include pre-lekking methylation % and one that does not, and then compare the model output / inference based on these two models.

## Prepare the data {#sec-effort}

```{r model, echo=T, eval=F}
#| code-fold: true
### load packages
pacman::p_load(tidyverse, data.table, tibble, performance, gaston,
               parallel, performance, lmerTest, tidystats, ggpointdensity)
               
#insight, effects, matrixStats
source("scripts/plotting_theme.R")

### load data

save(changing_cpg, file="results/modeloutput/changing/changing_sites_glmer.RData")

### load phenotypic data

load(file = "data/phenotypes/fulldata_complete_epi_withdates.RData")

### methylation difference

load(file = "results/modeloutput/all_sites_deltameth.RData")

delta_meth <- subset(delta_meth, chr_pos %in% changing_cpg$chr_pos)

### combine delta methylation data with site and behaviour info

delta_meth <- left_join(delta_meth, unique(all_pheno_epi[,c("id", "year", "site", "Core")], by = c("id", "year")))

### z-transform the traits before the model that subsets IDs and years where there is
### data for that CpG site

effort <- all_pheno_epi %>% dplyr::select(c("id", "year", "attend", "fight", "dist", "MS")) %>% filter(!is.na(attend)) %>% unique()

effort <- subset(effort, id %in% delta_meth$id)

effort$attend_scl <- scale(effort$attend)
effort$fight_scl <- scale(effort$fight)
effort$dist_scl <- scale(effort$dist)

### combine reproductive effort data with methylation data

delta_meth <- left_join(delta_meth, effort[,c("id", "year", "attend", "fight", "dist", "attend_scl", "fight_scl", "dist_scl")], by = c("id", "year"))

```

## Filter for *n* > 20

Although we have filtered for CpG sites that have enough samples in both the pre- and post-lekking time periods, this does not mean that it was the same pair of samples that have data in both time periods. This means that we cannot outrule that we have a low sample size for delta methylation differences that can be associated with phenotypic traits. Therefore, before we run the models, we filter for CpG sites that have at least 20 measures of delta methylation (and the phenotype).

```{r filter_n, echo = T, eval=F}

### only select cpg sites with enough data
delta_meth_n <- delta_meth %>% group_by(chr_pos) %>% filter(!is.na(delta_meth) & !is.na(attend)) %>% tally()
delta_meth_n_min20 <- subset(delta_meth_n, n > 20)
 
delta_meth_sub <- subset(delta_meth, chr_pos %in% delta_meth_n_min20$chr_pos)

delta_meth_ls <- delta_meth %>% group_split(chr_pos)

```

Out of the 1,023 CpG sites, X had enough data and are included in these models.

## Function to run the model

You can find the full function below, but importantly this is the LMM formula I run for each CpG site for each trait:

`lmgerTest::lmer(scale(delta_meth) ~ scale(trait) + age + scale(methperc_pre) + (1|site/id))`

Within the function, we can define if we want to include pre-lekking methylation % or not by setting the 'pre' arument to "control" or "no_control" respectively.

```{r function, eval=F}
#| code-fold: true
# function to run the model
function_model_delta <- function(df, parameter, pre){tryCatch({
  chr_pos <- as.character(df[1,1])
  df <- as.data.frame(df)
  df$methperc_pre_scl <- scale(df$methperc_pre)

  if (pre == "control"){
  formula <- formula(paste0("delta_meth ~ ", parameter, "_scl + methperc_pre + (1|site/id) "))}

  if (pre == "no_control"){
  formula <- formula(paste0("delta_meth ~ ", parameter, "_scl + (1|site/id) "))}
  
  model <- lmerTest::lmer(formula, data=df)
  summary <- summary(model)
  
  overdisp.lmer_fun <- function(model) {
    vpars <- function(m) {
      nrow(m)*(nrow(m)+1)/2
    }
    model.df <- sum(sapply(VarCorr(model),vpars))+length(fixef(model))
    rdf <- nrow(model.frame(model))-model.df
    rp <- residuals(model,type="pearson")
    Pearson.chisq <- sum(rp^2)
    prat <- Pearson.chisq/rdf
    pval <- pchisq(Pearson.chisq, df=rdf, lower.tail=FALSE)
    data.frame(chisq=Pearson.chisq,ratio=prat,rdf=rdf,p=pval)
  }
  
  intercept = summary$coefficients["(Intercept)", "Estimate"]

  #fixed effect
  parameter_estimate <- summary$coefficients[2,1]
  parameter_se <- summary$coefficients[2,2]
  parameter_df <- summary$coefficients[2,3]
  parameter_tval <- summary$coefficients[2,4]
  parameter_pval <- summary$coefficients[2,5]

  if (pre == "control"){
  #premeth effect
    pre_estimate <- summary$coefficients["methperc_pre", "Estimate"]
    pre_se <- summary$coefficients["methperc_pre", "Std. Error"]
    pre_df <- summary$coefficients["methperc_pre", "df"]
    pre_tval <- summary$coefficients["methperc_pre", "t value"]
    pre_pval <- summary$coefficients["methperc_pre", "Pr(>|t|)"]
    }

  if (pre == "no_control"){
    pre_estimate <- NA
    pre_se <- NA
    pre_df <- NA
    pre_tval <- NA
    pre_pval <- NA
    }
  
  rsqc <- performance::r2(model)$R2_conditional #fixed plus random parameterects relative to overall variance
  rsqm <- performance::r2(model)$R2_marginal #fixed parameterects relative to overall variance
  
  dispersion.chisq <- overdisp.lmer_fun(model)[1,1]
  dispersion.ratio <- overdisp.lmer_fun(model)[1,2]
  dispersion.rdf <- overdisp.lmer_fun(model)[1,3]
  dispersion.pval <- overdisp.lmer_fun(model)[1,4]
  
  isSingular <- isSingular(model)

  if(is.null(summary(model)$optinfo$conv$lme4$messages )){
    convergence <- NA
  }

  if(!is.null(summary(model)$optinfo$conv$lme4$messages )){
    convergence <- summary(model)$optinfo$conv$lme4$messages
  }

  icc_id_site <-icc(model, by_group = TRUE, tolerance = 0)[1,2]
  icc_site <-icc(model, by_group = TRUE, tolerance = 0)[2,2]
  
  return(data.frame(chr_pos=as.factor(chr_pos),
                    parameter = as.factor(parameter),
                    intercept = as.numeric(intercept),
                    icc_id_site = as.numeric(icc_id_site),
                    icc_site = as.numeric(icc_site),
                    parameter_estimate = as.numeric(parameter_estimate),
                    parameter_se = as.numeric(parameter_se),
                    parameter_df = as.numeric(parameter_df),
                    parameter_tval = as.numeric(parameter_tval),
                    parameter_pval = as.numeric(parameter_pval),
                    pre_estimate = as.numeric(pre_estimate),
                    pre_se = as.numeric(pre_se),
                    pre_df = as.numeric(pre_df),
                    pre_tval = as.numeric(pre_tval),
                    pre_pval = as.numeric(pre_pval),
                    rsqc = as.numeric(rsqc),
                    rsqm = as.numeric(rsqm),
                    dispersion.chisq = as.numeric(dispersion.chisq),
                    dispersion.ratio = as.numeric(dispersion.ratio),
                    dispersion.rdf = as.numeric(dispersion.rdf),
                    dispersion.pval = as.numeric(dispersion.pval),
                    isSingular = as.logical(isSingular),
                    convergence = convergence
                    
  ))
}, error = function(e){cat("ERROR :", conditionMessage(e), "\n");print(paste0(chr_pos, " ", conditionMessage(e)))})
}

```

## Run the model per trait: without pre-lekking

```{r run_model_example, echo=T, eval=F}
### run the model per trait

### centrality
# run model
delta_out_dist <- parallel::mclapply(delta_meth_ls, function_model_delta, parameter="dist",mc.cores=12)
delta_out_dist <- do.call(rbind.data.frame, delta_out_dist)

# convert to numeric
delta_out_dist$parameter_pval <- as.numeric(delta_out_dist$parameter_pval)
delta_out_dist$age_pval <- as.numeric(delta_out_dist$age_pval)

# exclude those with overdispersion
delta_out_dist <- subset(delta_out_dist, dispersion.ratio < 1.1 & dispersion.pval > 0.05)

# FDR correction
delta_out_dist$parameter_qval <- p.adjust(delta_out_dist$parameter_pval, method = "fdr", n = nrow(delta_out_dist))

delta_out_dist$age_qval <- p.adjust(delta_out_dist$age_pval, method = "fdr", n = nrow(delta_out_dist))

```

Repeat this for all traits:

```{r run_model, echo=T, eval=F}
#| code-fold: true
### attendance
# run model
delta_out_attend <- parallel::mclapply(delta_meth_ls, function_model_delta, parameter="attend",mc.cores=12)
delta_out_attend <- do.call(rbind.data.frame, delta_out_attend)

# to numeric
delta_out_attend$parameter_pval <- as.numeric(delta_out_attend$parameter_pval)
delta_out_attend$age_pval <- as.numeric(delta_out_attend$age_pval)

# exclude overdispersion
delta_out_attend <- subset(delta_out_attend, isSingular == FALSE & dispersion.ratio < 1.1 & dispersion.pval > 0.05)

# FDR correction
delta_out_attend$parameter_qval <- p.adjust(delta_out_attend$parameter_pval, method = "fdr", n = nrow(delta_out_attend))
delta_out_attend$age_qval <- p.adjust(delta_out_attend$age_pval, method = "fdr", n = nrow(delta_out_attend))

### fighting
# run model
delta_out_fight <- parallel::mclapply(delta_meth_ls, function_model_delta, parameter="fight",mc.cores=12)
delta_out_fight <- do.call(rbind.data.frame, delta_out_fight)

# as numeric
delta_out_fight$parameter_pval <- as.numeric(delta_out_fight$parameter_pval)
delta_out_fight$age_pval <- as.numeric(delta_out_fight$age_pval)

# exclude overdispersion
delta_out_fight <- subset(delta_out_fight, dispersion.ratio < 1.1 & dispersion.pval > 0.05)

# FDR correction
delta_out_fight$parameter_qval <- p.adjust(delta_out_fight$parameter_pval, method = "fdr", n = nrow(delta_out_fight))
delta_out_fight$age_qval <- p.adjust(delta_out_fight$age_pval, method = "fdr", n = nrow(delta_out_fight))

delta_out_all <- rbind(delta_out_dist, delta_out_attend, delta_out_fight)
delta_out_all$chr_pos <- as.factor(delta_out_all$chr_pos)
delta_out_all$parameter <- as.factor(delta_out_all$parameter)
delta_out_all$isSingular <- as.logical(delta_out_all$isSingular)
delta_out_all[c(3:25, 27,28)] <- lapply(delta_out_all[c(3:25, 27:28)], as.numeric)

```

Again, we have excluded CpG sites with convergence errors or significant overdispersion issues.

## Results

There are 7 significant CpG sites for centrality, 3 for attendance, but and 35 for fighting rate.

Below you can find the volcano plots.

![Volcano plot reproductive effort](../plots/model_out/volcano_effort.png){width="350" fig-align="left"}

We can plot the raw data here per trait:

### Attendance

![Raw data attendance](../plots/model_out/rawdata_plot_attend.png)

### Centrality

![Raw data centrality](../plots/model_out/rawdata_plot_dist.png)

### Fight

![Raw data fighting rate a](../plots/model_out/rawdata_plot_fight_a.png) ![Raw data fighting rate b](../plots/model_out/rawdata_plot_fight_b.png) ![Raw data fighting rate c](../plots/model_out/rawdata_plot_fight_c.png) ![Raw data fighting rate d](../plots/model_out/rawdata_plot_fight_d.png)
