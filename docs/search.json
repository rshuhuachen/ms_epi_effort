[
  {
    "objectID": "qmd/1_filter.html",
    "href": "qmd/1_filter.html",
    "title": "2  Preparing and filtering the data",
    "section": "",
    "text": "Our dataset consists of 116 samples that have been epi-genotyped using epiGBS2. The samples are part of a bigger dataset consisting of 450 epiGBS samples, and therefore have been sequenced across 10 libraries of 22 samples each.\nFirst, we use a custom bash script to merge the two strands of each sample together, and subsequently filter for 10X over those merged strands. This contrasts methylKit, where we would first filter for 10X for each two strands before merging them together. Next, we load these merged strands into R using methlKit.\n\n\nCode\nltet_meth &lt;- methRead(files, pipeline = \"bismarkCytosineReport\",\n                      sample.id = ids, assembly = \"ltet\", \n                      treatment = c(rep(1, each =length(ids))), context = \"CpG\",\n                      sep = \" \")\n\n\nWhere files = the list of 116 file locations and ids = the list of the 116 ID’s of those files.\nNext, we perform a set of filtering steps. First, we filter by coverage, setting the minimum to 10X and a maximum of the 99.9 percentile\n\n\nCode\nltet_meth &lt;- filterByCoverage(ltet_meth,lo.count=10,lo.perc=NULL,\n                                    hi.count=NULL,hi.perc=99.9)   \n\n\nNext, we unite the strands while only keeping CpG sites that are covered in at least 75% of all individuals.\n\n\nCode\nltet_meth_unite_0.75 &lt;- methylKit::unite(ltet_meth, destrand = TRUE, \n                                    min.per.group = as.integer(0.75*length(ids)), mc.cores = 8)\n\n\nThe next step is a custom R script that converts the output of the “unite” call to a long dataframe, where each line is a CpG site per individual and in the columns we have CpG site, nC, nT, cov, %meth. Moreover, in this script we remove CpG sites that are nonvariant, meaning that they are either 100% methylated in all samples or 0% methylated. This dataframe can be used for fitting models.\n\n\nCode\nsource(\"scripts/function_convert_methfile.R\")\n\nprepost_long &lt;- convert_meth(methfile = ltet_meth_unite_0.75, novar = \"remove\") \n\n#Out of 274,197 CpG sites, kept 274,188 which is 1% removed due to invariance"
  },
  {
    "objectID": "qmd/5_physio_meth.html",
    "href": "qmd/5_physio_meth.html",
    "title": "6  Which changes in CpG site methylation are associated with changes in physiology?",
    "section": "",
    "text": "Similar to the previous section, we next test which CpG site changes are significantly associated with changes in physiology. Physiological measures that we focus on include parasites (Microfilaria spp. and Trypanosoma spp.), body mass, IgG and HCT.\nAgain, we build a GLMM per CpG site to identify CpG sites whose DNA methylation change is associated with changes in physiology. For each CpG site for each trait, we build a model that predicts the changes DNA methylation, while fitting the change in physiology as a fixed effect as well as age and pre-lekking methylation level.\n\n\nCode\n### load packages\npacman::p_load(tidyverse, data.table, tibble, performance, matrixStats, \n               parallel, performance, lmerTest, tidystats, insight)\n\n### load data\n\nload(file = \"results/modeloutput/subset_sites_sig_deltameth.RData\")\n\n### load phenotypic data\n\nload(\"data/phenotypes/fulldata_complete_epi_withdates.RData\")\nload(\"data/phenotypes/pheno_dif_prepost.RData\")\n\n#combine with site info\n\ndelta_meth &lt;- left_join(delta_meth, unique(all_pheno_epi[,c(\"id\", \"year\", \"site\", \"Core\")], by = c(\"id\", \"year\")))\n\n#combine with delta physiology\nprepost_dif$mass_dif_scl &lt;- scale(prepost_dif$mass_dif)\nprepost_dif$microf_dif_scl &lt;- scale(prepost_dif$microf_dif)\nprepost_dif$trypa_dif_scl &lt;- scale(prepost_dif$trypa_dif)\nprepost_dif$ig_dif_scl &lt;- scale(prepost_dif$ig_dif)\nprepost_dif$hct_dif_scl &lt;- scale(prepost_dif$hct_dif)\n\ndelta_meth &lt;- left_join(delta_meth, unique(prepost_dif[,c(\"id\", \"year\", \"mass_dif_scl\", \"microf_dif_scl\", \"trypa_dif_scl\", \"ig_dif_scl\", \"hct_dif_scl\")], by = c(\"id\", \"year\")))\n\ndelta_meth_ls &lt;- delta_meth %&gt;% group_split(chr_pos)\n\n# function to run the model\nfunction_model_delta &lt;- function(df, parameter){tryCatch({\n  chr_pos &lt;- as.character(df[1,1])\n  df &lt;- as.data.frame(df)\n  df$methperc_pre_scl &lt;- scale(df$methperc_pre)\n\n  formula &lt;- formula(paste0(\"scale(delta_meth) ~ \", parameter, \"_dif_scl + age + scale(methperc_pre) + (1|site/id) \"))\n  \n  model &lt;- lmerTest::lmer(formula, data=df)\n  summary &lt;- summary(model)\n  \n  overdisp.lmer_fun &lt;- function(model) {\n    vpars &lt;- function(m) {\n      nrow(m)*(nrow(m)+1)/2\n    }\n    model.df &lt;- sum(sapply(VarCorr(model),vpars))+length(fixef(model))\n    rdf &lt;- nrow(model.frame(model))-model.df\n    rp &lt;- residuals(model,type=\"pearson\")\n    Pearson.chisq &lt;- sum(rp^2)\n    prat &lt;- Pearson.chisq/rdf\n    pval &lt;- pchisq(Pearson.chisq, df=rdf, lower.tail=FALSE)\n    data.frame(chisq=Pearson.chisq,ratio=prat,rdf=rdf,p=pval)\n  }\n  \n  #fixed effect\n  parameter_estimate &lt;- summary$coefficients[2,1]\n  parameter_se &lt;- summary$coefficients[2,2]\n  parameter_df &lt;- summary$coefficients[2,3]\n  parameter_tval &lt;- summary$coefficients[2,4]\n  parameter_pval &lt;- summary$coefficients[2,5]\n  \n  #age effect\n  age_estimate &lt;- summary$coefficients[\"age\", \"Estimate\"]\n  age_se &lt;- summary$coefficients[\"age\", \"Std. Error\"]\n  age_df &lt;- summary$coefficients[\"age\", \"df\"]\n  age_tval &lt;- summary$coefficients[\"age\", \"t value\"]\n  age_pval &lt;- summary$coefficients[\"age\", \"Pr(&gt;|t|)\"]\n  \n  #premeth effect\n  pre_estimate &lt;- summary$coefficients[\"scale(methperc_pre)\", \"Estimate\"]\n  pre_se &lt;- summary$coefficients[\"scale(methperc_pre)\", \"Std. Error\"]\n  pre_df &lt;- summary$coefficients[\"scale(methperc_pre)\", \"df\"]\n  pre_tval &lt;- summary$coefficients[\"scale(methperc_pre)\", \"t value\"]\n  pre_pval &lt;- summary$coefficients[\"scale(methperc_pre)\", \"Pr(&gt;|t|)\"]\n  \n  rsqc &lt;- performance::r2(model)$R2_conditional #fixed plus random parameterects relative to overall variance\n  rsqm &lt;- performance::r2(model)$R2_marginal #fixed parameterects relative to overall variance\n  \n  dispersion.chisq &lt;- overdisp.lmer_fun(model)[1,1]\n  dispersion.ratio &lt;- overdisp.lmer_fun(model)[1,2]\n  dispersion.rdf &lt;- overdisp.lmer_fun(model)[1,3]\n  dispersion.pval &lt;- overdisp.lmer_fun(model)[1,4]\n  \n  isSingular &lt;- isSingular(model)\n  \n  icc_id_site &lt;-icc(model, by_group = TRUE, tolerance = 0)[1,2]\n  icc_site &lt;-icc(model, by_group = TRUE, tolerance = 0)[2,2]\n  \n  return(data.frame(chr_pos=as.factor(chr_pos),\n                    parameter = as.factor(parameter),\n                    icc_id_site = as.numeric(icc_id_site),\n                    icc_site = as.numeric(icc_site),\n                    parameter_estimate = as.numeric(parameter_estimate),\n                    parameter_se = as.numeric(parameter_se),\n                    parameter_df = as.numeric(parameter_df),\n                    parameter_tval = as.numeric(parameter_tval),\n                    parameter_pval = as.numeric(parameter_pval),\n                    age_estimate = as.numeric(age_estimate),\n                    age_se = as.numeric(age_se),\n                    age_df = as.numeric(age_df),\n                    age_tval = as.numeric(age_tval),\n                    age_pval = as.numeric(age_pval),\n                    pre_estimate = as.numeric(pre_estimate),\n                    pre_se = as.numeric(pre_se),\n                    pre_df = as.numeric(pre_df),\n                    pre_tval = as.numeric(pre_tval),\n                    pre_pval = as.numeric(pre_pval),\n                    rsqc = as.numeric(rsqc),\n                    rsqm = as.numeric(rsqm),\n                    dispersion.chisq = as.numeric(dispersion.chisq),\n                    dispersion.ratio = as.numeric(dispersion.ratio),\n                    dispersion.rdf = as.numeric(dispersion.rdf),\n                    dispersion.pval = as.numeric(dispersion.pval),\n                    isSingular = as.logical(isSingular)\n                    \n  ))\n}, error = function(e){cat(\"ERROR :\", conditionMessage(e), \"\\n\");print(chr_pos)})\n}\n\n### run the model per trait\n\n### mass\n# run model\ndelta_out_mass &lt;- parallel::mclapply(delta_meth_ls, function_model_delta, parameter=\"mass\",mc.cores=12)\ndelta_out_mass &lt;- do.call(rbind.data.frame, delta_out_mass)\n\n# convert to numeric\ndelta_out_mass$parameter_pval &lt;- as.numeric(delta_out_mass$parameter_pval)\ndelta_out_mass$age_pval &lt;- as.numeric(delta_out_mass$age_pval)\n\n# exclude those with overdispersion\ndelta_out_mass &lt;- subset(delta_out_mass, dispersion.ratio &lt; 1.1 & dispersion.pval &gt; 0.05)\n\n# FDR correction\ndelta_out_mass$parameter_qval &lt;- p.adjust(delta_out_mass$parameter_pval, method = \"fdr\", n = nrow(delta_out_mass))\n\ndelta_out_mass$age_qval &lt;- p.adjust(delta_out_mass$age_pval, method = \"fdr\", n = nrow(delta_out_mass))\n\n### microf\n# run model\ndelta_out_microf &lt;- parallel::mclapply(delta_meth_ls, function_model_delta, parameter=\"microf\",mc.cores=12)\ndelta_out_microf &lt;- do.call(rbind.data.frame, delta_out_microf)\n\n# to numeric\ndelta_out_microf$parameter_pval &lt;- as.numeric(delta_out_microf$parameter_pval)\ndelta_out_microf$age_pval &lt;- as.numeric(delta_out_microf$age_pval)\n\n# exclude overdispersion\ndelta_out_microf &lt;- subset(delta_out_microf, isSingular == FALSE & dispersion.ratio &lt; 1.1 & dispersion.pval &gt; 0.05)\n\n# FDR correction\ndelta_out_microf$parameter_qval &lt;- p.adjust(delta_out_microf$parameter_pval, method = \"fdr\", n = nrow(delta_out_microf))\ndelta_out_microf$age_qval &lt;- p.adjust(delta_out_microf$age_pval, method = \"fdr\", n = nrow(delta_out_microf))\n\n### trypa\n# run model\ndelta_out_trypa &lt;- parallel::mclapply(delta_meth_ls, function_model_delta, parameter=\"trypa\",mc.cores=12)\ndelta_out_trypa &lt;- do.call(rbind.data.frame, delta_out_trypa)\n\n# as numeric\ndelta_out_trypa$parameter_pval &lt;- as.numeric(delta_out_trypa$parameter_pval)\ndelta_out_trypa$age_pval &lt;- as.numeric(delta_out_trypa$age_pval)\n\n# exclude overdispersion\ndelta_out_trypa &lt;- subset(delta_out_trypa, dispersion.ratio &lt; 1.1 & dispersion.pval &gt; 0.05)\n\n# FDR correction\ndelta_out_trypa$parameter_qval &lt;- p.adjust(delta_out_trypa$parameter_pval, method = \"fdr\", n = nrow(delta_out_trypa))\ndelta_out_trypa$age_qval &lt;- p.adjust(delta_out_trypa$age_pval, method = \"fdr\", n = nrow(delta_out_trypa))\n\n### ig\n# run model\ndelta_out_ig &lt;- parallel::mclapply(delta_meth_ls, function_model_delta, parameter=\"ig\",mc.cores=12)\ndelta_out_ig &lt;- do.call(rbind.data.frame, delta_out_ig)\n\n# as numeric\ndelta_out_ig$parameter_pval &lt;- as.numeric(delta_out_ig$parameter_pval)\ndelta_out_ig$age_pval &lt;- as.numeric(delta_out_ig$age_pval)\n\n# exclude overdispersion\ndelta_out_ig &lt;- subset(delta_out_ig, dispersion.ratio &lt; 1.1 & dispersion.pval &gt; 0.05)\n\n# FDR correction\ndelta_out_ig$parameter_qval &lt;- p.adjust(delta_out_ig$parameter_pval, method = \"fdr\", n = nrow(delta_out_ig))\ndelta_out_ig$age_qval &lt;- p.adjust(delta_out_ig$age_pval, method = \"fdr\", n = nrow(delta_out_ig))\n\n### hct\n# run model\ndelta_out_hct &lt;- parallel::mclapply(delta_meth_ls, function_model_delta, parameter=\"hct\",mc.cores=12)\ndelta_out_hct &lt;- do.call(rbind.data.frame, delta_out_hct)\n\n# as numeric\ndelta_out_hct$parameter_pval &lt;- as.numeric(delta_out_hct$parameter_pval)\ndelta_out_hct$age_pval &lt;- as.numeric(delta_out_hct$age_pval)\n\n# exclude overdispersion\ndelta_out_hct &lt;- subset(delta_out_hct, dispersion.ratio &lt; 1.1 & dispersion.pval &gt; 0.05)\n\n# FDR correction\ndelta_out_hct$parameter_qval &lt;- p.adjust(delta_out_hct$parameter_pval, method = \"fdr\", n = nrow(delta_out_hct))\ndelta_out_hct$age_qval &lt;- p.adjust(delta_out_hct$age_pval, method = \"fdr\", n = nrow(delta_out_hct))\n\n### combine\ndelta_out_all &lt;- rbind(delta_out_mass, delta_out_microf, delta_out_trypa, delta_out_ig, delta_out_hct)\ndelta_out_all$chr_pos &lt;- as.factor(delta_out_all$chr_pos)\ndelta_out_all$parameter &lt;- as.factor(delta_out_all$parameter)\ndelta_out_all$isSingular &lt;- as.logical(delta_out_all$isSingular)\ndelta_out_all[c(3:25, 27,28)] &lt;- lapply(delta_out_all[c(3:25, 27:28)], as.numeric)\n\nsave(delta_out_all, file=\"results/modeloutput/physio_deltameth_modeloutput_filtered.RData\")\n\n\nAfter also subsetting for at least an (absolute) estimate of 0.1, there is one significant CpG for delta Microfilaria spp, 29 for delta Trypanosoma spp. and 13 for delta IgG. As there are so many, I will only show the plots of the three most significant ones, also because not all raw data plots are as convincing.\n\n\n\nRaw data delta Microfilaria\n\n\n  \n  \nIt seems like most associations are shaped by a few outliers and that most CpG sites do not actually change (delta meth = 0)."
  },
  {
    "objectID": "qmd/6_fitness_meth.html",
    "href": "qmd/6_fitness_meth.html",
    "title": "7  Which changes in CpG site methylation are associated with reproductive effort?",
    "section": "",
    "text": "In this script, we test for which CpG site changes are significantly associated with fitness, measured as annual mating success (AMS) and survival to the next year.\nWe build two GLMMs per CpG site, one for AMS and one for survival, to identify CpG sites whose DNA methylation change is associated with fitness. In these models, we predict AMS and survival, and include delta methylation as a fixed effect, as well as age and pre-lekking methylation.\n\n\nCode\n### load packages\npacman::p_load(tidyverse, data.table, tibble, performance, matrixStats, \n               parallel, performance, lmerTest, tidystats, insight, glmmTMB)\n\n### load data\n\nload(file = \"results/modeloutput/subset_sites_sig_deltameth.RData\")\n\n### load phenotypic data\n\nload(\"data/phenotypes/fulldata_complete_epi_withdates.RData\")\n\n#combine with site and fitness data\npheno_pre &lt;- subset(all_pheno_epi, prepost==\"pre\")\n\ndelta_meth &lt;- left_join(delta_meth, unique(pheno_pre[,c(\"id\", \"year\", \"MS\", \"surv\")]), by = c(\"id\", \"year\"))\n                                           \ndelta_meth_ls &lt;- delta_meth %&gt;% group_split(chr_pos)\n\n# function to run the model\nfunction_model_fitness &lt;- function(df){tryCatch({\n  chr_pos &lt;- as.character(df[1,1])\n  df &lt;- as.data.frame(df)\n  df$site &lt;- as.factor(df$site)\n  df$id &lt;- as.factor(df$id)\n  \n  ### AMS\n  formula_ams &lt;- formula(paste0(\"MS ~ scale(delta_meth) + age + scale(methperc_pre) + (1|site/id) \"))\n  model_ams &lt;- glmmTMB(formula_ams, data=df, family = \"poisson\", ziformula=~1)\n  summary_ams &lt;- summary(model_ams)\n  \n  #fixed effect\n  parameter_estimate &lt;- summary_ams$coefficients$cond[\"scale(delta_meth)\", \"Estimate\"]\n  parameter_se &lt;- summary_ams$coefficients$cond[\"scale(delta_meth)\",\"Std. Error\"]\n  parameter_zval &lt;- summary_ams$coefficients$cond[\"scale(delta_meth)\",\"z value\"]\n  parameter_pval &lt;- summary_ams$coefficients$cond[\"scale(delta_meth)\", \"Pr(&gt;|z|)\"]\n  \n  #age effect\n  age_estimate &lt;- summary_ams$coefficients$cond[\"age\", \"Estimate\"]\n  age_se &lt;- summary_ams$coefficients$cond[\"age\", \"Std. Error\"]\n  age_zval &lt;- summary_ams$coefficients$cond[\"age\", \"z value\"]\n  age_pval &lt;- summary_ams$coefficients$cond[\"age\", \"Pr(&gt;|z|)\"]\n  \n  #premeth effect\n  pre_estimate &lt;- summary_ams$coefficients$cond[\"scale(methperc_pre)\", \"Estimate\"]\n  pre_se &lt;- summary_ams$coefficients$cond[\"scale(methperc_pre)\", \"Std. Error\"]\n  pre_zval &lt;- summary_ams$coefficients$cond[\"scale(methperc_pre)\", \"z value\"]\n  pre_pval &lt;- summary_ams$coefficients$cond[\"scale(methperc_pre)\", \"Pr(&gt;|z|)\"]\n  \n  rsqc &lt;- performance::r2(model_ams)$R2_conditional #fixed plus random parameterects relative to overall variance\n  rsqm &lt;- performance::r2(model_ams)$R2_marginal #fixed parameterects relative to overall variance\n  \n  message &lt;- model_ams$fit$message\n  \n  icc_id_site &lt;-icc(model_ams, by_group = TRUE, tolerance = 0)[1,2]\n  icc_site &lt;-icc(model_ams, by_group = TRUE, tolerance = 0)[2,2]\n  \n \n  ams &lt;- data.frame(chr_pos=as.factor(chr_pos),\n                    ams_icc_id_site = as.numeric(icc_id_site),\n                    ams_icc_site = as.numeric(icc_site),\n                    ams_delta_meth_estimate = as.numeric(parameter_estimate),\n                    ams_delta_meth_se = as.numeric(parameter_se),\n                    ams_delta_meth_zval = as.numeric(parameter_zval),\n                    ams_delta_meth_pval = as.numeric(parameter_pval),\n                    ams_age_estimate = as.numeric(age_estimate),\n                    ams_age_se = as.numeric(age_se),\n                    ams_age_zval = as.numeric(age_zval),\n                    ams_age_pval = as.numeric(age_pval),\n                    ams_pre_estimate = as.numeric(pre_estimate),\n                    ams_pre_se = as.numeric(pre_se),\n                    ams_pre_zval = as.numeric(pre_zval),\n                    ams_pre_pval = as.numeric(pre_pval),\n                    ams_rsqc = as.numeric(rsqc),\n                    ams_rsqm = as.numeric(rsqm),\n                    ams_message = message              \n  ) \n  \n  ### surv\n  formula_surv &lt;- formula(paste0(\"surv ~ scale(delta_meth) + age + scale(methperc_pre) + (1|site/id) \"))\n  model_surv &lt;- glmmTMB(formula_surv, data=df, family = \"binomial\")\n  summary_surv &lt;- summary(model_surv)\n  \n  #fixed effect\n  parameter_estimate &lt;- summary_surv$coefficients$cond[\"scale(delta_meth)\", \"Estimate\"]\n  parameter_se &lt;- summary_surv$coefficients$cond[\"scale(delta_meth)\",\"Std. Error\"]\n  parameter_zval &lt;- summary_surv$coefficients$cond[\"scale(delta_meth)\",\"z value\"]\n  parameter_pval &lt;- summary_surv$coefficients$cond[\"scale(delta_meth)\", \"Pr(&gt;|z|)\"]\n  \n  #age effect\n  age_estimate &lt;- summary_surv$coefficients$cond[\"age\", \"Estimate\"]\n  age_se &lt;- summary_surv$coefficients$cond[\"age\", \"Std. Error\"]\n  age_zval &lt;- summary_surv$coefficients$cond[\"age\", \"z value\"]\n  age_pval &lt;- summary_surv$coefficients$cond[\"age\", \"Pr(&gt;|z|)\"]\n  \n  #premeth effect\n  pre_estimate &lt;- summary_surv$coefficients$cond[\"scale(methperc_pre)\", \"Estimate\"]\n  pre_se &lt;- summary_surv$coefficients$cond[\"scale(methperc_pre)\", \"Std. Error\"]\n  pre_zval &lt;- summary_surv$coefficients$cond[\"scale(methperc_pre)\", \"z value\"]\n  pre_pval &lt;- summary_surv$coefficients$cond[\"scale(methperc_pre)\", \"Pr(&gt;|z|)\"]\n  \n  rsqc &lt;- performance::r2(model_surv)$R2_conditional #fixed plus random parameterects relative to overall variance\n  rsqm &lt;- performance::r2(model_surv)$R2_marginal #fixed parameterects relative to overall variance\n  \n  message &lt;- model_surv$fit$message\n  \n  icc_id_site &lt;-icc(model_surv, by_group = TRUE, tolerance = 0)[1,2]\n  icc_site &lt;-icc(model_surv, by_group = TRUE, tolerance = 0)[2,2]\n  \n  surv &lt;- data.frame(surv_icc_id_site = as.numeric(icc_id_site),\n                    surv_icc_site = as.numeric(icc_site),\n                    surv_delta_meth_estimate = as.numeric(parameter_estimate),\n                    surv_delta_meth_se = as.numeric(parameter_se),\n                    surv_delta_meth_zval = as.numeric(parameter_zval),\n                    surv_delta_meth_pval = as.numeric(parameter_pval),\n                    surv_age_estimate = as.numeric(age_estimate),\n                    surv_age_se = as.numeric(age_se),\n                    surv_age_zval = as.numeric(age_zval),\n                    surv_age_pval = as.numeric(age_pval),\n                    surv_pre_estimate = as.numeric(pre_estimate),\n                    surv_pre_se = as.numeric(pre_se),\n                    surv_pre_zval = as.numeric(pre_zval),\n                    surv_pre_pval = as.numeric(pre_pval),\n                    surv_rsqc = as.numeric(rsqc),\n                    surv_rsqm = as.numeric(rsqm),\n                    surv_message = message              \n  ) \n  out &lt;- cbind(ams, surv)\n  return(out)\n  \n}, error = function(e){cat(\"ERROR :\", conditionMessage(e), \"\\n\");print(chr_pos)})\n}\n\n### run the model \n# run model\ndelta_out_fitness &lt;- parallel::mclapply(delta_meth_ls, function_model_fitness,mc.cores=12)\ndelta_out_fitness &lt;- do.call(rbind.data.frame, delta_out_fitness)\n\n# convert to numeric\ndelta_out_fitness$ams_delta_meth_estimate &lt;- as.numeric(delta_out_fitness$ams_delta_meth_estimate)\ndelta_out_fitness$surv_delta_meth_estimate &lt;- as.numeric(delta_out_fitness$surv_delta_meth_estimate)\n\n# exclude those with convergence errors\ndelta_out_ams &lt;- subset(delta_out_fitness, ams_message == \"relative convergence (4)\")\ndelta_out_surv &lt;- subset(delta_out_fitness, surv_message == \"relative convergence (4)\")\n\n# FDR correction\ndelta_out_ams$ams_delta_meth_qval &lt;- p.adjust(delta_out_ams$ams_delta_meth_pval, method = \"fdr\", n = nrow(delta_out_ams))\ndelta_out_surv$surv_delta_meth_qval &lt;- p.adjust(delta_out_surv$surv_delta_meth_pval, method = \"fdr\", n = nrow(delta_out_surv))\n\ndelta_out_ams$chr_pos &lt;- as.factor(delta_out_ams$chr_pos)\ndelta_out_surv$chr_pos &lt;- as.factor(delta_out_surv$chr_pos)\n\nsave(delta_out_ams, file=\"results/modeloutput/AMS_deltameth_modeloutput_filtered.RData\")\nsave(delta_out_surv, file=\"results/modeloutput/surv_deltameth_modeloutput_filtered.RData\")\n\nnrow(subset(delta_out_ams, ams_delta_meth_qval &lt; 0.05))\nnrow(subset(delta_out_surv, surv_delta_meth_qval &lt; 0.05))\n\n\nThere are 266 significant CpG sites for AMS but none for survival.\n    \nInterestingly, two of the significant CpG sites are the same CpG sites that are significantly associated with changes in Trypanosoma spp.. Below, I plot the relationship between delta Trypanosoma spp and delta methylation (left) and the relationship between delta methylation and AMS (right) for the first (top) and second (bottom) CpG site.\n\n\n\nRaw data overlapping CpG sites\n\n\nThe first CpG site is located in a gene body, intron and downstream region whereas the second CpG site was unannotated (located in an intergenic region) based on the black grouse genome annotation. Neither CpG was annotated based on the lifted over chicken genome annotation.\n\n7.0.1 Annotation\nI annotated all CpG sites from this analysis as well as the previous ones and have lists of genes (based on the chicken genome). Inputting the list of genes in GOrilla shows that cell fate determination is a significant GO term for AMS, but that is the only significant output."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Epigenetic changes associated with reproductive investment in a lekking bird",
    "section": "",
    "text": "This repository holds all scripts and output generated for the manuscript that investigates epigenetic chagnes associated with reproductive investment in black grouse (Lyrurus tetrix)\nBriefly, repeated samples were taken of yearling and adult black grouse males between 2002-2007. Blood samples were taken, which were used for epiGBS (RRBS), as well as measuring physiological traits and parasite abundance. We also have repeated samples of males that were caught pre- and post-lekking (defined as before mid April vs after mid April, ranging from approx. February until mid May in total).\n\n\n\nDNA methylation"
  },
  {
    "objectID": "qmd/1_filter.html#prepare-data",
    "href": "qmd/1_filter.html#prepare-data",
    "title": "2  Preparing and filtering the data",
    "section": "2.1 Prepare data",
    "text": "2.1 Prepare data\n\nltet_meth &lt;- methRead(files, pipeline = \"bismarkCytosineReport\",\n                      sample.id = ids, assembly = \"ltet\", \n                      treatment = c(rep(1, each =length(ids))), context = \"CpG\",\n                      sep = \" \")\n\nWhere files = the list of 116 file locations and ids = the list of the 116 ID’s of those files."
  },
  {
    "objectID": "qmd/1_filter.html#filter-data",
    "href": "qmd/1_filter.html#filter-data",
    "title": "2  Preparing and filtering the data",
    "section": "2.2 Filter data",
    "text": "2.2 Filter data\nNext, we perform a set of filtering steps. First, we filter by coverage, setting the minimum to 10X and a maximum of the 99.9 percentile\n\nltet_meth &lt;- filterByCoverage(ltet_meth,lo.count=10,lo.perc=NULL,\n                                    hi.count=NULL,hi.perc=99.9)   \n\nNext, we unite the strands while only keeping CpG sites that are covered in at least 75% of all individuals.\n\nltet_meth_unite_0.75 &lt;- methylKit::unite(ltet_meth, destrand = TRUE, \n                                    min.per.group = as.integer(0.75*length(ids)), mc.cores = 8)"
  },
  {
    "objectID": "qmd/1_filter.html#convert-data",
    "href": "qmd/1_filter.html#convert-data",
    "title": "2  Preparing and filtering the data",
    "section": "2.3 Convert data",
    "text": "2.3 Convert data\nThe next step is a custom R script that converts the output of the “unite” call to a long dataframe, where each line is a CpG site per individual and in the columns we have CpG site, nC, nT, cov, %meth. Moreover, in this script we remove CpG sites that are nonvariant, meaning that they are either 100% methylated in all samples or 0% methylated. This dataframe can be used for fitting models.\n\nsource(\"scripts/function_convert_methfile.R\")\n\nprepost_long &lt;- convert_meth(methfile = ltet_meth_unite_0.75, novar = \"remove\") \n\n#Out of 274,197 CpG sites, kept 274,188 which is 1% removed due to invariance"
  }
]