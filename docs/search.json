[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Epigenetic changes associated with reproductive investment in a lekking bird\nThis repository holds all scripts and output generated for the manuscript that investigates epigenetic chagnes associated with reproductive investment in black grouse (Lyrurus tetrix)\nEpigenetic, morphological, behavioural, and physiological data were obtained from 51 black grouse males sampled across five lekking sites in Central Finland between 2005 and 2007 inclusive. The birds were captured at two time points: before the lekking season (January-March) and after the lekking season (after mid-April) using walk-in traps. Six individuals were captured both before and after the lekking season in two years, and one individual was caught in three years, totalling to 116 captures.\nReproductive effort was estimated using three behavioural indicators: lek attendance, fighting rate and lek centrality. Blood was used to quantify the abundance of Microfilaria spp. and Trypanosoma spp., two extra-cellular blood parasites, immunoglobulin concentration in blood plasma, and haematocrit concentration. Additionally, body mass was quantified during capture to the nearest 10g.\nOur research questions are as follows:\n\nIs reproductive effort associated with changes in DNA methylation?\nAre physiological changes associated with changes in DNA methylation?\nAre changes in DNA methylation associated with fitness (annual mating success and survival to the next year)?\n\n\n\n\nDNA methylation"
  },
  {
    "objectID": "qmd/1_explore.html#summary-statistics",
    "href": "qmd/1_explore.html#summary-statistics",
    "title": "2  Data exploration",
    "section": "2.1 Summary statistics",
    "text": "2.1 Summary statistics\nWe start by collecting summary statistics per CpG site to check if methylation level is associated with coverage.\n\n\nCode\n#### Get summary statistics ####\n# select columns for specific data: number of sites that are methylated, coverage\n# number of columns in data\nncol &lt;- ncol(data) \n\n# first column with data respectively\nfirst_cov &lt;- 5\nfirst_meth_n &lt;- 6\n\n# select columns \ncols_cov &lt;- seq(first_cov, ncol-(2-(first_cov-5)), 3)\ncols_meth_n &lt;- seq(first_meth_n, ncol-(2-(first_meth_n-5)), 3)\n\n# make summary across all cpg sites\nsummary &lt;- data.frame(site = c(paste(data$chr, data$start, sep=\"_\")))\nsummary &lt;- summary %&gt;% mutate(mean_cov = rowMeans(data[cols_cov], na.rm=T),\n                              sd_cov = rowSds(as.matrix(data[cols_cov]), na.rm=T),\n                              mean_n_meth = rowMeans(data[cols_meth_n], na.rm=T),\n                              sd_n_meth = rowSds(as.matrix(data[cols_meth_n]), na.rm=T),\n                              na =  rowSums(is.na(data[cols_cov])),\n                              n =  rowSums(!is.na(data[cols_cov])))\n\n# calculate percentage methylation\nsum_meth_prop &lt;- data.frame(site = c(paste(data$chr, data$start, sep=\"_\")))\nfor (i in 1:length(cols_cov)){\n  sum_meth_prop &lt;- sum_meth_prop %&gt;% mutate(methProp = data[cols_meth_n[i]]/data[cols_cov[i]])\n  names(sum_meth_prop)[i+1] &lt;- ltet_meth_unite@sample.ids[i] \n}                              \n\n# add summary percentage methylation\nsummary &lt;- summary %&gt;% mutate(mean_perc_meth = rowMeans(sum_meth_prop[,-1], na.rm=T),\n                              sd_perc_meth = rowSds(as.matrix(sum_meth_prop[,-1]), na.rm=T), .before = mean_cov)\n\n\n# site to rownames\nsummary &lt;- summary %&gt;% remove_rownames %&gt;% column_to_rownames(var = \"site\")\n\n\nThe whole dataframe is very long, but we can check out the first 10 rows to see what the data look like:\n\n\n\n\n\nX\nmean_perc_meth\nsd_perc_meth\nmean_cov\nsd_cov\nmean_n_meth\nsd_n_meth\nna\nn\n\n\n\n\nScEsiA3_10002__HRSCAF_10935_92\n1.0000000\nNA\n11.00000\nNA\n11.0000000\nNA\n115\n1\n\n\nScEsiA3_10006__HRSCAF_10939_97\n0.8362985\n0.1392619\n17.14286\n9.3235493\n14.4761905\n8.9644802\n95\n21\n\n\nScEsiA3_1000__HRSCAF_1603_69\n1.0000000\n0.0000000\n10.33333\n0.5773503\n10.3333333\n0.5773503\n113\n3\n\n\nScEsiA3_1000__HRSCAF_1603_73\n0.0435897\n0.1383665\n12.76923\n2.1661735\n0.5384615\n1.6641006\n103\n13\n\n\nScEsiA3_1000__HRSCAF_1603_90\n0.0665976\n0.1105658\n15.76667\n4.6511647\n1.1000000\n2.0060254\n86\n30\n\n\nScEsiA3_1000__HRSCAF_1603_99\n0.9523810\n0.0824786\n11.33333\n2.3094011\n10.6666667\n1.1547005\n113\n3\n\n\nScEsiA3_1000__HRSCAF_1603_107\n0.0358021\n0.0438772\n43.53763\n31.4229766\n1.5806452\n1.9411033\n23\n93\n\n\nScEsiA3_1000__HRSCAF_1603_109\n0.0463004\n0.0457295\n43.51613\n31.4188440\n2.1075269\n2.3334168\n23\n93\n\n\nScEsiA3_1000__HRSCAF_1603_191\n0.0175915\n0.0336013\n43.52688\n31.4177987\n0.7096774\n1.1570262\n23\n93\n\n\nScEsiA3_1000__HRSCAF_1603_213\n0.0160323\n0.0356791\n43.50538\n31.4077752\n0.5698925\n1.0150803\n23\n93\n\n\n\n\n\n\n\nBelow you can find the histograms of the parameters calculated (mean methylation etc.)\n\n\nSummary statistics methylation"
  },
  {
    "objectID": "qmd/1_explore.html#coverage-vs-methylation",
    "href": "qmd/1_explore.html#coverage-vs-methylation",
    "title": "2  Data exploration",
    "section": "2.2 Coverage vs methylation",
    "text": "2.2 Coverage vs methylation\nNext, we can plot the relationship between mean coverage and mean DNA methylation per site. However, as there are many CpG sites we randomly subset 100,000 CpG sites to visualize, and also visualize the density of the points as it is difficult to see overlapping areas.\n\n#### Plot relationshp coverage and dna methylation #####\n\n# geom pointdensity to get an idea of which points are where since many are overlapping\n# on a subset of random CpGs\nrandom_n &lt;- 100000\nggplot(data=summary[sample(nrow(summary),random_n),], aes(x=mean_cov, y=mean_perc_meth)) + labs(x = \"Mean coverage\", y = \"Mean methylation percentage\") +\n  scale_x_continuous(trans = scales::log_trans(),\n                     breaks = scales::log_breaks()) +\n  geom_pointdensity()  +\n  scale_color_viridis_c() -&gt; plot_cov_meth \n\n\n\nRelationship coverage and mean methylation\n\n\n\nHere we see that there are many CpG sites with low average coverage and very low DNA methylation or very high DNA methylation. There is no obvious relationshp between the two, but there is some clustering going on (as expected)."
  },
  {
    "objectID": "qmd/1_explore.html#pca",
    "href": "qmd/1_explore.html#pca",
    "title": "2  Data exploration",
    "section": "2.3 PCA",
    "text": "2.3 PCA\nNext, we can conduct a PCA to visualize potential methodological biases towards methylation. We only use complete data to conduct the PCA, meaning we only include CpG sites that are covered in each sample.\n\n\nCode\n#### PCA ####\n# create dataset for PCA with only complete data\ndata_pca &lt;- data.frame(matrix(unlist(sum_meth_prop), nrow=nrow(sum_meth_prop)),stringsAsFactors=FALSE)\ndata_pca &lt;- data_pca[complete.cases(data_pca),] \nnrow(data_pca) \ndata_pca &lt;- data_pca[,-1]\ndata_pca &lt;- lapply(data_pca, as.numeric)\n\n# conduct pca and save plots\nPCA &lt;- prcomp(t(as.data.frame(data_pca)), center=F, scale=F) # t() transposes the matrix meth_PCA to get one coordinate for each id\n\n# get eigenvalues and percentage explained\neigs &lt;- PCA$sdev^2\nvar &lt;- eigs/sum(eigs)\nexplained&lt;-100*eigs/sum(eigs) #PC1 explains 97% of data\n\n# PCA coloured by library, site\n\n# first collect data required to plot the PCs\n\n# data on lek site, sampling \nload(\"data/phenotypes/fulldata_complete_epi_withdates.RData\")\nmeta_ltet &lt;- all_pheno_epi %&gt;% dplyr::select(c(epi_nr, id, site, prepost, year)) %&gt;% filter(!is.na(prepost))\n\n# data on QC\nload(file=\"/home/nioo/rebeccash/PhD_grouse/methylation_grouse/data/genomics/qc_epi.RData\")\n\nqc_ltet &lt;- qc %&gt;% dplyr::select(c(sample_id, Sample, lib, n_in_lib, conc_std, batch, extraction_batch))\nqc_ltet &lt;- subset(qc_ltet, Sample %in% meta_ltet$epi_nr)\n\n# exclude repeats\nqc_ltet &lt;- subset(qc_ltet, sample_id != \"lib99_1\")\nqc_ltet &lt;- subset(qc_ltet, sample_id != \"lib20_119\")\nqc_ltet &lt;- subset(qc_ltet, sample_id != \"lib20_191\")\nqc_ltet &lt;- subset(qc_ltet, sample_id != \"lib7_250\")\n\n# combine data with PC loadings\nmerge_pca &lt;- data.frame(sample_id = ltet_meth_unite@sample.ids)\nmerge_pca &lt;- left_join(merge_pca, qc_ltet, by = \"sample_id\")\nmerge_pca &lt;- left_join(merge_pca, meta_ltet, by = c(\"Sample\" = \"epi_nr\"))\nmerge_pca$pc1 &lt;- PCA$x[,1]\nmerge_pca$pc2 &lt;- PCA$x[,2]\n\n# and with mean methylation level\nsummary_per_sample &lt;- data.frame(sample_id = ltet_meth_unite@sample.ids)\nsummary_per_sample &lt;- summary_per_sample %&gt;% mutate(mean_perc_meth = colMeans(sum_meth_prop[,-1], na.rm=T))\n\nmerge_pca &lt;- left_join(merge_pca, summary_per_sample, by = \"sample_id\")\n\n# plot PCs\nggplot(merge_pca, aes(x = pc1, y = pc2)) + geom_point(size=3, aes(col = site)) + \n    labs(x = \"PC 1\", y = \"PC 2\", col = \"Lek site\") +\n    scale_color_viridis_d() -&gt; pca_site\n\nggplot(merge_pca, aes(x = pc1, y = pc2)) + geom_point(size=3, aes(col = prepost)) + \n    labs(x = \"PC 1\", y = \"PC 2\", col = \"Time period\") +\n    scale_color_viridis_d() -&gt; pca_prepost\n\nggplot(merge_pca, aes(x = pc1, y = pc2)) + geom_point(size=3, aes(col = as.factor(year))) + \n    labs(x = \"PC 1\", y = \"PC 2\", col = \"Year\") +\n    scale_color_viridis_d() -&gt; pca_year\n    \nggplot(merge_pca, aes(x = pc1, y = pc2)) + geom_point(size=3, aes(col = lib)) + \n    labs(x = \"PC 1\", y = \"PC 2\", col = \"Library\") +\n    scale_color_viridis_d() -&gt; pca_lib\n\nggplot(merge_pca, aes(x = pc1, y = pc2)) + geom_point(size=3, aes(col = as.factor(n_in_lib))) + \n    labs(x = \"PC 1\", y = \"PC 2\", subtitle = \"Sample within library\") +\n    theme(legend.position=\"none\")+\n    scale_color_viridis_d() -&gt; pca_lib_n\n\nmerge_pca$conc_std[which(merge_pca$conc_std &gt; 400)] &lt;- NA #outlier and must be wrong\n\nggplot(merge_pca, aes(x = pc1, y = pc2)) + geom_point(size=3, aes(col = conc_std)) + \n    labs(x = \"PC 1\", y = \"PC 2\", col = \"Concentration\") +\n    scale_color_viridis_c() -&gt; pca_conc\n\nggplot(merge_pca, aes(x = pc1, y = pc2)) + geom_point(size=3, aes(col = as.factor(batch))) + \n    labs(x = \"PC 1\", y = \"PC 2\", col = \"Batch\") +\n    scale_color_viridis_d() -&gt; pca_batch\n\nggplot(merge_pca, aes(x = pc1, y = pc2)) + geom_point(size=3, aes(col = as.factor(extraction_batch))) + \n    labs(x = \"PC 1\", y = \"PC 2\", col = \"Batch\") +\n    scale_color_viridis_d() -&gt; pca_batch_ext    \n\ncowplot::plot_grid(pca_site, pca_prepost, pca_year, pca_lib, pca_lib_n, pca_conc, pca_batch, pca_batch_ext,\n                  labs=\"auto\", align=\"hv\", axis=\"lb\", ncol=2, label_fontface = \"plain\", label_size = 22) -&gt; pca_plots\n\n\n\n\nPCA plots"
  },
  {
    "objectID": "qmd/1_explore.html#linear-mixed-effect-model",
    "href": "qmd/1_explore.html#linear-mixed-effect-model",
    "title": "2  Data exploration",
    "section": "2.4 Linear mixed effect model",
    "text": "2.4 Linear mixed effect model\nLastly, we want to make sure that average methylation percentage is not affected by library by conducting a LMM\n\n#### LM ####\nlmer_lib &lt;- lmerTest::lmer(mean_perc_meth ~ lib + (1|id), data = merge_pca)\nlmer_null  &lt;- lmerTest::lmer(mean_perc_meth ~ 1 + (1|id), data = merge_pca)\nanova(lmer_lib, lmer_null)\n\nrefitting model(s) with ML (instead of REML)\n\n\nData: merge_pca\nModels:\nlmer_null: mean_perc_meth ~ 1 + (1 | id)\nlmer_lib: mean_perc_meth ~ lib + (1 | id)\n          npar     AIC     BIC logLik deviance  Chisq Df Pr(&gt;Chisq)\nlmer_null    3 -399.71 -391.45 202.85  -405.71                     \nlmer_lib    12 -392.84 -359.80 208.42  -416.84 11.133  9     0.2667\n\n\nIt seems there are no library effects on average CpG methylation."
  },
  {
    "objectID": "qmd/2_filter.html#prepare-data",
    "href": "qmd/2_filter.html#prepare-data",
    "title": "3  Filtering",
    "section": "3.1 Prepare data",
    "text": "3.1 Prepare data\n\nltet_meth &lt;- methRead(files, pipeline = \"bismarkCytosineReport\",\n                      sample.id = ids, assembly = \"ltet\", \n                      treatment = c(rep(1, each =length(ids))), context = \"CpG\",\n                      sep = \" \")\n\nWhere files = the list of 116 file locations and ids = the list of the 116 ID’s of those files."
  },
  {
    "objectID": "qmd/2_filter.html#pre-filter-data",
    "href": "qmd/2_filter.html#pre-filter-data",
    "title": "3  Filtering",
    "section": "3.2 Pre-filter data",
    "text": "3.2 Pre-filter data\nNext, we perform a set of filtering steps. First, we filter by coverage, the maximum coverage to the 99.9 percentile\n\nltet_meth &lt;- filterByCoverage(ltet_meth,lo.count=10,lo.perc=NULL,\n                                    hi.count=NULL,hi.perc=99.9)   \n\nNext, we unite the strands. We do not filter yet for sites that are covered in at least X individuals as we will perform this filtering steps later in the script.\n\nltet_meth_unite &lt;- methylKit::unite(ltet_meth, destrand = TRUE, \n                                    min.per.group = 1L, mc.cores = 8)\n\nAt this stage, we have a data set consisting of 1,559,800 partially filtered CpG sites."
  },
  {
    "objectID": "qmd/2_filter.html#convert-data",
    "href": "qmd/2_filter.html#convert-data",
    "title": "3  Filtering",
    "section": "3.3 Convert data",
    "text": "3.3 Convert data\nThe next step is a custom R script that converts the output of the “unite” call to a long dataframe, where each line is a CpG site per individual and in the columns we have CpG site, nC, nT, cov, %meth. Moreover, in this script we remove CpG sites that are nonvariant, meaning that they are either 100% methylated in all samples or 0% methylated.\nWe also filter for CpG sites that are variable in at least X number of samples, where X is a threshold that can be defined within the formula. Right now I have used a threshold of 0.3, meaning that CpG sites that are 0% methylated or 100% methylated in more than 70% of the samples will be excluded. Although we exclude a large number of CpG sites in this filtering step, I think this is more correct and will allow the models to make more accurate estimates and will only include CpG sites with more variation in methylation %.\n\nsource(\"scripts/function_convert_methfile.R\")\n\nprepost_long &lt;- convert_meth(methfile = ltet_meth_unite, novar = \"remove\", threshold = 0.3) \n\n#Out of 1559800 CpG sites, kept 815460 which is 47.72% removed"
  },
  {
    "objectID": "qmd/2_filter.html#post-filtering",
    "href": "qmd/2_filter.html#post-filtering",
    "title": "3  Filtering",
    "section": "3.4 Post-filtering",
    "text": "3.4 Post-filtering\nBecause we have samples from two time points of individuals, and we want to compare the change across this time period, I applied a post-filtering steps to include only CpG sites that are included in at least 50% of the samples in both time points. Since we have 118 samples, which are 59 time comparisons (59 pre-lekking samples linked to 59 post-lekking samples), this means we have an N of at least 29 samples where at least 30% of these samples are not completely methylated or unmethylated (see step above), which I think is a good minimum to draw reliable conclusions.\n\n#count number of individuals per CpG per time point\nn_per_prepost &lt;- prepost_long %&gt;% \n  group_by(chr_pos, prepost) %&gt;% \n  summarise(count=n())\n\nn_per_prepost_wide &lt;-  spread(n_per_prepost, key=prepost,value=count)\n\ncolnames(n_per_prepost_wide)[2] &lt;- \"n_post\"\ncolnames(n_per_prepost_wide)[3] &lt;- \"n_pre\"\n\n#keep only if CpG site is covered in at least 50% of samples at both time points\nthres = 0.5\nn_per_prepost_wide &lt;- n_per_prepost_wide %&gt;% mutate(keep = as.factor(case_when(n_pre  &gt; thres*(118*0.5) & n_post &gt; thres*(118*0.5) ~ \"keep\")))\n\nsummary(n_per_prepost_wide$keep) # 354,649 CpG sites to keep\n\nprepost_long_clean &lt;- left_join(prepost_long, n_per_prepost_wide, by = c(\"chr_pos\"))\n\nprepost_long_clean &lt;- subset(prepost_long_clean, keep == \"keep\")\n\nThus, our fully filtered data set consists of 354,649 CpG sites that have been filtered to ensure: minimum coverage (to ensure more precision of methylation %), maximum coverage (to exclude potential PCR duplicates), variation in methylation % (to allow more accurate modelling) and enough samples in both time points (to draw reliable conclusions about temporal changes)."
  },
  {
    "objectID": "qmd/3_changing_meth.html#prepare-the-data",
    "href": "qmd/3_changing_meth.html#prepare-the-data",
    "title": "4  Changing CpG sites",
    "section": "4.1 Prepare the data",
    "text": "4.1 Prepare the data\n\n### load packages \npacman::p_load(tidyverse, data.table, tibble, performance, matrixStats, \n               parallel, performance, lmerTest, tidystats, insight, rptR)\n\n### load epi data\nload(file = \"data/processed/methylkit_prepost_long_onlyvar_thres0.3_min_0.5_group.RData\") \n\n### load phenotype data \nload(\"data/phenotypes/fulldata_complete_epi_withdates.RData\")\nprepost &lt;- subset(all_pheno_epi, !is.na(prepost)) #phenotype dataset also consists of other individuals not part of this study\nrm(all_pheno_epi)\n\n### merge with metadata\n\nprepost_long &lt;- left_join(prepost_long, prepost[,c(\"id\", \"prepost\", \"Core\", \"year\", \"born\",\"site\", \"fulldate\")], \n                          by = c(\"id\", \"year\", \"fulldate\"))\n\nprepost_long &lt;- prepost_long %&gt;% mutate(age_year = as.factor(case_when(Core == \"Core\" ~ year - born,\n                                                        Core == \"No core\" ~ NA)),\n                                        age = as.factor(case_when(Core == \"Core\" & (year - born &gt; 1) ~ \"Adult\",\n                                                        Core == \"Core\" & (year - born == 1) ~ \"Yearling\",\n                                                        Core == \"No core\" ~ \"Adult\")))\n\n### convert data to a list, one per CpG site\ndata &lt;- prepost_long %&gt;% group_split(chr_pos)"
  },
  {
    "objectID": "qmd/3_changing_meth.html#function-to-run-the-model",
    "href": "qmd/3_changing_meth.html#function-to-run-the-model",
    "title": "4  Changing CpG sites",
    "section": "4.2 Function to run the model",
    "text": "4.2 Function to run the model\nBelow you will find the full model used to 1) run the model in parallel per CpG site and 2) collect the output in a dataframe. Most importantly, this is the formula run for the model:\nlme4::glmer(cbind(numC, numT) ~ prepost + (1|id), family = \"binomial\")\n\n\nCode\n### define function to collect overdispersion statistics\noverdisp.lmer_fun &lt;- function(model) {\n  vpars &lt;- function(m) {\n    nrow(m)*(nrow(m)+1)/2\n  }\n  model.df &lt;- sum(sapply(VarCorr(model),vpars))+length(fixef(model))\n  rdf &lt;- nrow(model.frame(model))-model.df\n  rp &lt;- residuals(model,type=\"pearson\")\n  Pearson.chisq &lt;- sum(rp^2)\n  prat &lt;- Pearson.chisq/rdf\n  pval &lt;- pchisq(Pearson.chisq, df=rdf, lower.tail=FALSE)\n  data.frame(chisq=Pearson.chisq,ratio=prat,rdf=rdf,p=pval)\n}\n\n### build function to run the model\nfunction_model_glmer &lt;- function(df){tryCatch({\n  chr_pos &lt;- as.character(df[1,1])\n  df &lt;- as.data.frame(df)\n  df$prepost &lt;- as.factor(df$prepost)\n  df$id &lt;- as.factor(df$id)\n  \n  # model\n  model &lt;- lme4::glmer(cbind(numC, numT) ~ prepost + (1|id), family = \"binomial\", df)\n  \n  #fixed effects\n  prepost_estimate &lt;- summary(model)$coefficients[2,1]\n  prepost_se &lt;- summary(model)$coefficients[2,2]\n  prepost_zval &lt;- summary(model)$coefficients[2,3]\n  prepost_pval &lt;-  summary(model)$coefficients[2,4]\n  \n  #random effects \n  id_sd &lt;- attributes(VarCorr(model)$id)$stddev\n  id_variance &lt;- data.frame(VarCorr(model), comp=\"Variance\")[1,4]\n  \n  rsqc &lt;- performance::r2(model)$R2_conditional #fixed plus random effects relative to overall variance\n  rsqm &lt;- performance::r2(model)$R2_marginal #fixed effects relative to overall variance\n  \n  dispersion.chisq &lt;- overdisp.lmer_fun(model)[1,1]\n  dispersion.ratio &lt;- overdisp.lmer_fun(model)[1,2]\n  dispersion.rdf &lt;- overdisp.lmer_fun(model)[1,3]\n  dispersion.pval &lt;- overdisp.lmer_fun(model)[1,4]\n  \n  isSingular &lt;- isSingular(model)\n\n  if(is.null(summary(model)$optinfo$conv$lme4$messages )){\n    convergence &lt;- NA\n  }\n\n  if(!is.null(summary(model)$optinfo$conv$lme4$messages )){\n    convergence &lt;- summary(model)$optinfo$conv$lme4$messages\n  }\n  \n  icc_id &lt;- icc(model, by_group = TRUE, tolerance = 0)[1,2]\n  \n  return(data.frame(chr_pos=chr_pos, \n                    prepost_estimate = prepost_estimate,\n                    prepost_se = prepost_se,\n                    prepost_zval = prepost_zval,\n                    prepost_pval = prepost_pval,\n                    id_sd = id_sd,\n                    id_variance = id_variance,\n                    rsqc = rsqc,\n                    rsqm = rsqm,\n                    dispersion.chisq = dispersion.chisq,\n                    dispersion.ratio = dispersion.ratio,\n                    dispersion.rdf = dispersion.rdf,\n                    dispersion.pval = dispersion.pval,\n                    isSingular = isSingular,\n                    convergence = convergence,\n                    icc_id = icc_id\n                    ))\n}, error = function(e){cat(\"ERROR :\", conditionMessage(e), \"\\n\");print(chr_pos)})\n}"
  },
  {
    "objectID": "qmd/3_changing_meth.html#sec-changingcpg",
    "href": "qmd/3_changing_meth.html#sec-changingcpg",
    "title": "4  Changing CpG sites",
    "section": "4.3 Run the model",
    "text": "4.3 Run the model\nHere, we run the model in parallel, and next exclude CpG sites where there was overdispersion or convergence errors. After this filter step, we apply an FDR multiple-testing correction.\n\n### run the model in parallel per CpG site (list item)\nout_glmer &lt;- parallel::mclapply(data, function_model_glmer, mc.cores=4)\nout_glmer &lt;- do.call(rbind.data.frame, out_glmer)\n\n### exclude overdispersion and convergence issues\nout_glmer &lt;- subset(out_glmer, dispersion.ratio &lt; 1.1 & dispersion.pval &gt; 0.05 & is.na(convergence)) \n\n### apply a FDR multiple-testing correction\nout_glmer$prepost_qval &lt;- p.adjust(out_glmer$prepost_pval, method = \"fdr\", n = nrow(out_glmer))\n\nA “changing CpG site” is then defined as a CpG site with a significant effect of time period (FDR-corrected q-value &lt; 0.05) and an absolute beta estimate of 0.1 (similar to needing at least a 10% methylation difference between groups).\n\n### only select CpG sites with significant effects of pre/post\n\nsub_glmer_prepost &lt;- subset(out_glmer, prepost_qval &lt; 0.05 & abs(prepost_estimate &gt;= 0.1))\n\nA total of 3,563 CpG sites significantly change across the lekking period."
  },
  {
    "objectID": "qmd/3_changing_meth.html#plotting",
    "href": "qmd/3_changing_meth.html#plotting",
    "title": "4  Changing CpG sites",
    "section": "4.4 Plotting",
    "text": "4.4 Plotting\n\n4.4.1 Volcano plot\nNext, we make a volcano plot to see the results.\n\nload(file=\"results/modeloutput/prepost_modeloutput_glmer_min0.75.RData\")\n\nout_glmer &lt;- out_glmer %&gt;% mutate(sig = as.factor(case_when(abs(as.numeric(prepost_estimate)) &gt; 0.1 & prepost_qval &lt; 0.05 ~ \"sig\", TRUE ~ \"nonsig\")))\n\nclrs &lt;- viridisLite::viridis(6)\n\nggplot(out_glmer, aes(x = as.numeric(prepost_estimate), y = -log10(as.numeric(prepost_qval)))) + geom_point(size=4, alpha=0.5, aes(col = as.factor(sig))) +\n    labs(x = \"Estimate time period\", y = \"-log10(q-value)\") +\n    scale_color_manual(values=c(\"grey60\", clrs[4])) +\n    geom_hline(yintercept = -log10(0.05), col = \"darkred\", linetype = \"dotted\", linewidth = 1) +\n    geom_vline(xintercept = -0.1, col = \"darkred\", linetype = \"dotted\", linewidth = 1) +\n    geom_vline(xintercept = 0.1, col = \"darkred\", linetype = \"dotted\", linewidth = 1) +\n    theme(legend.position=\"none\") -&gt; volcano_change\n\n\n\n\nVolcano plot changing CpG sites\n\n\nInterestingly, there seems to more CpG sites that decrease in methylation over time (negative beta estimates) compared to CpG sites that increase in methylation over time (positive beta estimates).\n\n\n4.4.2 Raw data\nTo assess whether the models performed well, I also plotted the raw data of the five most significantly changing CpG sites.\n\n# raw plot for the 1st significant CpG site, repeat for the other 4 and combine with cowplot\n\nout_glmer &lt;- out_glmer %&gt;% arrange(prepost_qval)\n\nsubset(changing_cpg, chr_pos == out_glmer$chr_pos[1]) %&gt;%\n  arrange(id, year) %&gt;%\n  ggplot(., aes(x = prepost, y = methperc))+\n  geom_boxplot(linewidth=1, outlier.shape=NA) + \n  geom_path(aes(group = id_year), alpha = 0.8, col = \"grey60\", position = position_jitter(width = 0.1, seed = 3922)) +\n  geom_point(aes(alpha = 0.8, size=cov), col = clrs[4], position = position_jitter(width = 0.1, seed = 3922)) + \n  labs(x = \"Time period\", y = \"Methylation percentage\", subtitle = out_glmer$chr_pos[1]) +\n  theme(legend.position=\"none\") -&gt; plot_top_cpg_1\n\n\n\n\nRaw data top 5 significantly changing CpG sites"
  },
  {
    "objectID": "qmd/3_changing_meth.html#note-on-lmm-vs-glmm",
    "href": "qmd/3_changing_meth.html#note-on-lmm-vs-glmm",
    "title": "4  Changing CpG sites",
    "section": "4.5 Note on LMM vs GLMM",
    "text": "4.5 Note on LMM vs GLMM\nI also executed a similar model to above but using a lmer where the response variable is the methylation % rather than nC, nT. Using the same filtering steps, I only found 199 significantly changing CpG sites, where 103 were also included in the glmer output."
  },
  {
    "objectID": "qmd/4_effort_meth.html#delta-methylation",
    "href": "qmd/4_effort_meth.html#delta-methylation",
    "title": "5  Effort-associated CpG sites",
    "section": "5.1 Delta methylation",
    "text": "5.1 Delta methylation\n\n### load packages\npacman::p_load(tidyverse, data.table, tibble, performance, matrixStats, \n               parallel, performance, lmerTest, tidystats, insight)\n\n### load data\n\nload(file=\"results/modeloutput/subset_sites_sig_prepost.RData\")\n\n### load phenotypic data\n\nload(\"data/phenotypes/fulldata_complete_epi_withdates.RData\")\n\n### Calculate delta methylation by matching up pre-post ####\n\ndelta_meth &lt;- left_join(subset(changing_cpg, prepost == \"pre\"),\n                            subset(changing_cpg, prepost == \"post\")[,c(\"chr_pos\", \"lib_id\", \"epi_nr\", \"lib\", \"methperc\", \"cov\", \"id\", \"year\", \"fulldate\")],\n                            by = c(\"chr_pos\", \"id\", \"year\"), suffix = c(\"_pre\", \"_post\"))\n\ndelta_meth &lt;- delta_meth %&gt;% dplyr::select(-c(numC, numT, n_sample, prepost))\ndelta_meth &lt;- delta_meth %&gt;% relocate(c(id, year, born:age), .before=lib_id_pre)\n\ndelta_meth &lt;- delta_meth %&gt;% mutate(delta_meth = methperc_post - methperc_pre, .after =born)\ndelta_meth &lt;- delta_meth %&gt;% mutate(diff_date = fulldate_post - fulldate_pre)\ndelta_meth$diff_date &lt;- as.numeric(delta_meth$diff_date)\n\nNow, we can use this calculation of delta methylation as a predictor of reproductive effort, and loop over CpG sites with this model. In addition to delta methylation, we also control for pre-methylation level (as this determines the potential for methylation change) and age as fixed effects."
  },
  {
    "objectID": "qmd/4_effort_meth.html#prepare-the-data",
    "href": "qmd/4_effort_meth.html#prepare-the-data",
    "title": "5  Effort-associated CpG sites",
    "section": "5.2 Prepare the data",
    "text": "5.2 Prepare the data\n\n#combine with site and behaviour info\n\ndelta_meth &lt;- left_join(delta_meth, unique(all_pheno_epi[,c(\"id\", \"year\", \"site\", \"Core\")], by = c(\"id\", \"year\")))\n\n#z-transform the traits before the model that subsets IDs and years where there is\n#data for that CpG site\n\neffort &lt;- all_pheno_epi %&gt;% dplyr::select(c(\"id\", \"year\", \"attend\", \"fight\", \"dist\", \"MS\")) %&gt;% filter(!is.na(attend)) %&gt;% unique()\n\neffort &lt;- subset(effort, id %in% delta_meth$id)\n\neffort$attend_scl &lt;- scale(effort$attend)\neffort$fight_scl &lt;- scale(effort$fight)\neffort$dist_scl &lt;- scale(effort$dist)\n\n#combine effort data with methylation data\n\ndelta_meth &lt;- left_join(delta_meth, effort[,c(\"id\", \"year\", \"attend\", \"fight\", \"dist\", \"attend_scl\", \"fight_scl\", \"dist_scl\")], by = c(\"id\", \"year\"))\n                                           \ndelta_meth_ls &lt;- delta_meth %&gt;% group_split(chr_pos)"
  },
  {
    "objectID": "qmd/4_effort_meth.html#function-to-run-the-model",
    "href": "qmd/4_effort_meth.html#function-to-run-the-model",
    "title": "5  Effort-associated CpG sites",
    "section": "5.3 Function to run the model",
    "text": "5.3 Function to run the model\nYou can find the full function below, but importantly this is the LMM formula I run for each CpG site for each trait:\nlmgerTest::lmer(scale(delta_meth) ~ scale(trait) + age + scale(methperc_pre) + (1|site/id))\n\n\nCode\n# function to run the model\nfunction_model_delta &lt;- function(df, parameter){tryCatch({\n  chr_pos &lt;- as.character(df[1,1])\n  df &lt;- as.data.frame(df)\n  df$methperc_pre_scl &lt;- scale(df$methperc_pre)\n\n  formula &lt;- formula(paste0(\"scale(delta_meth) ~ \", parameter, \"_scl + age + scale(methperc_pre) + (1|site/id) \"))\n  \n  model &lt;- lmerTest::lmer(formula, data=df)\n  summary &lt;- summary(model)\n  \n  overdisp.lmer_fun &lt;- function(model) {\n    vpars &lt;- function(m) {\n      nrow(m)*(nrow(m)+1)/2\n    }\n    model.df &lt;- sum(sapply(VarCorr(model),vpars))+length(fixef(model))\n    rdf &lt;- nrow(model.frame(model))-model.df\n    rp &lt;- residuals(model,type=\"pearson\")\n    Pearson.chisq &lt;- sum(rp^2)\n    prat &lt;- Pearson.chisq/rdf\n    pval &lt;- pchisq(Pearson.chisq, df=rdf, lower.tail=FALSE)\n    data.frame(chisq=Pearson.chisq,ratio=prat,rdf=rdf,p=pval)\n  }\n  \n  #fixed effect\n  parameter_estimate &lt;- summary$coefficients[2,1]\n  parameter_se &lt;- summary$coefficients[2,2]\n  parameter_df &lt;- summary$coefficients[2,3]\n  parameter_tval &lt;- summary$coefficients[2,4]\n  parameter_pval &lt;- summary$coefficients[2,5]\n  \n  #age effect\n  age_estimate &lt;- summary$coefficients[\"age\", \"Estimate\"]\n  age_se &lt;- summary$coefficients[\"age\", \"Std. Error\"]\n  age_df &lt;- summary$coefficients[\"age\", \"df\"]\n  age_tval &lt;- summary$coefficients[\"age\", \"t value\"]\n  age_pval &lt;- summary$coefficients[\"age\", \"Pr(&gt;|t|)\"]\n  \n  #premeth effect\n  pre_estimate &lt;- summary$coefficients[\"scale(methperc_pre)\", \"Estimate\"]\n  pre_se &lt;- summary$coefficients[\"scale(methperc_pre)\", \"Std. Error\"]\n  pre_df &lt;- summary$coefficients[\"scale(methperc_pre)\", \"df\"]\n  pre_tval &lt;- summary$coefficients[\"scale(methperc_pre)\", \"t value\"]\n  pre_pval &lt;- summary$coefficients[\"scale(methperc_pre)\", \"Pr(&gt;|t|)\"]\n  \n  rsqc &lt;- performance::r2(model)$R2_conditional #fixed plus random parameterects relative to overall variance\n  rsqm &lt;- performance::r2(model)$R2_marginal #fixed parameterects relative to overall variance\n  \n  dispersion.chisq &lt;- overdisp.lmer_fun(model)[1,1]\n  dispersion.ratio &lt;- overdisp.lmer_fun(model)[1,2]\n  dispersion.rdf &lt;- overdisp.lmer_fun(model)[1,3]\n  dispersion.pval &lt;- overdisp.lmer_fun(model)[1,4]\n  \n  isSingular &lt;- isSingular(model)\n  \n  icc_id_site &lt;-icc(model, by_group = TRUE, tolerance = 0)[1,2]\n  icc_site &lt;-icc(model, by_group = TRUE, tolerance = 0)[2,2]\n  \n  return(data.frame(chr_pos=as.factor(chr_pos),\n                    parameter = as.factor(parameter),\n                    icc_id_site = as.numeric(icc_id_site),\n                    icc_site = as.numeric(icc_site),\n                    parameter_estimate = as.numeric(parameter_estimate),\n                    parameter_se = as.numeric(parameter_se),\n                    parameter_df = as.numeric(parameter_df),\n                    parameter_tval = as.numeric(parameter_tval),\n                    parameter_pval = as.numeric(parameter_pval),\n                    age_estimate = as.numeric(age_estimate),\n                    age_se = as.numeric(age_se),\n                    age_df = as.numeric(age_df),\n                    age_tval = as.numeric(age_tval),\n                    age_pval = as.numeric(age_pval),\n                    pre_estimate = as.numeric(pre_estimate),\n                    pre_se = as.numeric(pre_se),\n                    pre_df = as.numeric(pre_df),\n                    pre_tval = as.numeric(pre_tval),\n                    pre_pval = as.numeric(pre_pval),\n                    rsqc = as.numeric(rsqc),\n                    rsqm = as.numeric(rsqm),\n                    dispersion.chisq = as.numeric(dispersion.chisq),\n                    dispersion.ratio = as.numeric(dispersion.ratio),\n                    dispersion.rdf = as.numeric(dispersion.rdf),\n                    dispersion.pval = as.numeric(dispersion.pval),\n                    isSingular = as.logical(isSingular)\n                    \n  ))\n}, error = function(e){cat(\"ERROR :\", conditionMessage(e), \"\\n\");print(chr_pos)})\n}"
  },
  {
    "objectID": "qmd/4_effort_meth.html#run-the-model-per-trait",
    "href": "qmd/4_effort_meth.html#run-the-model-per-trait",
    "title": "5  Effort-associated CpG sites",
    "section": "5.4 Run the model per trait",
    "text": "5.4 Run the model per trait\n\n### run the model per trait\n\n### centrality\n# run model\ndelta_out_dist &lt;- parallel::mclapply(delta_meth_ls, function_model_delta, parameter=\"dist\",mc.cores=12)\ndelta_out_dist &lt;- do.call(rbind.data.frame, delta_out_dist)\n\n# convert to numeric\ndelta_out_dist$parameter_pval &lt;- as.numeric(delta_out_dist$parameter_pval)\ndelta_out_dist$age_pval &lt;- as.numeric(delta_out_dist$age_pval)\n\n# exclude those with overdispersion\ndelta_out_dist &lt;- subset(delta_out_dist, dispersion.ratio &lt; 1.1 & dispersion.pval &gt; 0.05)\n\n# FDR correction\ndelta_out_dist$parameter_qval &lt;- p.adjust(delta_out_dist$parameter_pval, method = \"fdr\", n = nrow(delta_out_dist))\n\ndelta_out_dist$age_qval &lt;- p.adjust(delta_out_dist$age_pval, method = \"fdr\", n = nrow(delta_out_dist))\n\nRepeat this for all traits:\n\n\nCode\n### attendance\n# run model\ndelta_out_attend &lt;- parallel::mclapply(delta_meth_ls, function_model_delta, parameter=\"attend\",mc.cores=12)\ndelta_out_attend &lt;- do.call(rbind.data.frame, delta_out_attend)\n\n# to numeric\ndelta_out_attend$parameter_pval &lt;- as.numeric(delta_out_attend$parameter_pval)\ndelta_out_attend$age_pval &lt;- as.numeric(delta_out_attend$age_pval)\n\n# exclude overdispersion\ndelta_out_attend &lt;- subset(delta_out_attend, isSingular == FALSE & dispersion.ratio &lt; 1.1 & dispersion.pval &gt; 0.05)\n\n# FDR correction\ndelta_out_attend$parameter_qval &lt;- p.adjust(delta_out_attend$parameter_pval, method = \"fdr\", n = nrow(delta_out_attend))\ndelta_out_attend$age_qval &lt;- p.adjust(delta_out_attend$age_pval, method = \"fdr\", n = nrow(delta_out_attend))\n\n### fighting\n# run model\ndelta_out_fight &lt;- parallel::mclapply(delta_meth_ls, function_model_delta, parameter=\"fight\",mc.cores=12)\ndelta_out_fight &lt;- do.call(rbind.data.frame, delta_out_fight)\n\n# as numeric\ndelta_out_fight$parameter_pval &lt;- as.numeric(delta_out_fight$parameter_pval)\ndelta_out_fight$age_pval &lt;- as.numeric(delta_out_fight$age_pval)\n\n# exclude overdispersion\ndelta_out_fight &lt;- subset(delta_out_fight, dispersion.ratio &lt; 1.1 & dispersion.pval &gt; 0.05)\n\n# FDR correction\ndelta_out_fight$parameter_qval &lt;- p.adjust(delta_out_fight$parameter_pval, method = \"fdr\", n = nrow(delta_out_fight))\ndelta_out_fight$age_qval &lt;- p.adjust(delta_out_fight$age_pval, method = \"fdr\", n = nrow(delta_out_fight))\n\ndelta_out_all &lt;- rbind(delta_out_dist, delta_out_attend, delta_out_fight)\ndelta_out_all$chr_pos &lt;- as.factor(delta_out_all$chr_pos)\ndelta_out_all$parameter &lt;- as.factor(delta_out_all$parameter)\ndelta_out_all$isSingular &lt;- as.logical(delta_out_all$isSingular)\ndelta_out_all[c(3:25, 27,28)] &lt;- lapply(delta_out_all[c(3:25, 27:28)], as.numeric)\n\n\nAgain, we have excluded CpG sites with convergence errors or significant overdispersion issues."
  },
  {
    "objectID": "qmd/4_effort_meth.html#results",
    "href": "qmd/4_effort_meth.html#results",
    "title": "5  Effort-associated CpG sites",
    "section": "5.5 Results",
    "text": "5.5 Results\nThere are 7 significant CpG sites for centrality, 3 for attendance, but and 35 for fighting rate.\nBelow you can find the volcano plots.\n\n\nVolcano plot reproductive effort\n\n\n\nWe can plot the raw data here per trait:\n\n5.5.1 Attendance\n\n\nRaw data attendance\n\n\n\n\n\n5.5.2 Centrality\n\n\nRaw data centrality\n\n\n\n\n\n5.5.3 Fight"
  },
  {
    "objectID": "qmd/5_physio_meth.html#prepare-the-data",
    "href": "qmd/5_physio_meth.html#prepare-the-data",
    "title": "6  Physio-associated CpG sites",
    "section": "6.1 Prepare the data",
    "text": "6.1 Prepare the data\n\n### load packages\npacman::p_load(tidyverse, data.table, tibble, performance, matrixStats, \n               parallel, performance, lmerTest, tidystats, insight)\n\n### load data\n\nload(file = \"results/modeloutput/subset_sites_sig_deltameth.RData\")\n\n### load phenotypic data\n\nload(\"data/phenotypes/fulldata_complete_epi_withdates.RData\")\nload(\"data/phenotypes/pheno_dif_prepost.RData\")\n\n#combine with site info\n\ndelta_meth &lt;- left_join(delta_meth, unique(all_pheno_epi[,c(\"id\", \"year\", \"site\", \"Core\")], by = c(\"id\", \"year\")))\n\n#combine with delta physiology\nprepost_dif$mass_dif_scl &lt;- scale(prepost_dif$mass_dif)\nprepost_dif$microf_dif_scl &lt;- scale(prepost_dif$microf_dif)\nprepost_dif$trypa_dif_scl &lt;- scale(prepost_dif$trypa_dif)\nprepost_dif$ig_dif_scl &lt;- scale(prepost_dif$ig_dif)\nprepost_dif$hct_dif_scl &lt;- scale(prepost_dif$hct_dif)\n\ndelta_meth &lt;- left_join(delta_meth, unique(prepost_dif[,c(\"id\", \"year\", \"mass_dif_scl\", \"microf_dif_scl\", \"trypa_dif_scl\", \"ig_dif_scl\", \"hct_dif_scl\")], by = c(\"id\", \"year\")))\n\ndelta_meth_ls &lt;- delta_meth %&gt;% group_split(chr_pos)"
  },
  {
    "objectID": "qmd/5_physio_meth.html#functon-to-run-the-model",
    "href": "qmd/5_physio_meth.html#functon-to-run-the-model",
    "title": "6  Physio-associated CpG sites",
    "section": "6.2 Functon to run the model",
    "text": "6.2 Functon to run the model\nBelow you’ll find the full function ran per trait per CpG site, where the LMM ran follows this structure:\nlmerTest::lmer(scale(delta_meth) ~ scale(delta_trait) + age + scale(methperc_pre) + (1|site/id))\n\n\nCode\n# function to run the model\nfunction_model_delta &lt;- function(df, parameter){tryCatch({\n  chr_pos &lt;- as.character(df[1,1])\n  df &lt;- as.data.frame(df)\n  df$methperc_pre_scl &lt;- scale(df$methperc_pre)\n\n  formula &lt;- formula(paste0(\"scale(delta_meth) ~ \", parameter, \"_dif_scl + age + scale(methperc_pre) + (1|site/id) \"))\n  \n  model &lt;- lmerTest::lmer(formula, data=df)\n  summary &lt;- summary(model)\n  \n  overdisp.lmer_fun &lt;- function(model) {\n    vpars &lt;- function(m) {\n      nrow(m)*(nrow(m)+1)/2\n    }\n    model.df &lt;- sum(sapply(VarCorr(model),vpars))+length(fixef(model))\n    rdf &lt;- nrow(model.frame(model))-model.df\n    rp &lt;- residuals(model,type=\"pearson\")\n    Pearson.chisq &lt;- sum(rp^2)\n    prat &lt;- Pearson.chisq/rdf\n    pval &lt;- pchisq(Pearson.chisq, df=rdf, lower.tail=FALSE)\n    data.frame(chisq=Pearson.chisq,ratio=prat,rdf=rdf,p=pval)\n  }\n  \n  #fixed effect\n  parameter_estimate &lt;- summary$coefficients[2,1]\n  parameter_se &lt;- summary$coefficients[2,2]\n  parameter_df &lt;- summary$coefficients[2,3]\n  parameter_tval &lt;- summary$coefficients[2,4]\n  parameter_pval &lt;- summary$coefficients[2,5]\n  \n  #age effect\n  age_estimate &lt;- summary$coefficients[\"age\", \"Estimate\"]\n  age_se &lt;- summary$coefficients[\"age\", \"Std. Error\"]\n  age_df &lt;- summary$coefficients[\"age\", \"df\"]\n  age_tval &lt;- summary$coefficients[\"age\", \"t value\"]\n  age_pval &lt;- summary$coefficients[\"age\", \"Pr(&gt;|t|)\"]\n  \n  #premeth effect\n  pre_estimate &lt;- summary$coefficients[\"scale(methperc_pre)\", \"Estimate\"]\n  pre_se &lt;- summary$coefficients[\"scale(methperc_pre)\", \"Std. Error\"]\n  pre_df &lt;- summary$coefficients[\"scale(methperc_pre)\", \"df\"]\n  pre_tval &lt;- summary$coefficients[\"scale(methperc_pre)\", \"t value\"]\n  pre_pval &lt;- summary$coefficients[\"scale(methperc_pre)\", \"Pr(&gt;|t|)\"]\n  \n  rsqc &lt;- performance::r2(model)$R2_conditional #fixed plus random parameterects relative to overall variance\n  rsqm &lt;- performance::r2(model)$R2_marginal #fixed parameterects relative to overall variance\n  \n  dispersion.chisq &lt;- overdisp.lmer_fun(model)[1,1]\n  dispersion.ratio &lt;- overdisp.lmer_fun(model)[1,2]\n  dispersion.rdf &lt;- overdisp.lmer_fun(model)[1,3]\n  dispersion.pval &lt;- overdisp.lmer_fun(model)[1,4]\n  \n  isSingular &lt;- isSingular(model)\n  \n  icc_id_site &lt;-icc(model, by_group = TRUE, tolerance = 0)[1,2]\n  icc_site &lt;-icc(model, by_group = TRUE, tolerance = 0)[2,2]\n  \n  return(data.frame(chr_pos=as.factor(chr_pos),\n                    parameter = as.factor(parameter),\n                    icc_id_site = as.numeric(icc_id_site),\n                    icc_site = as.numeric(icc_site),\n                    parameter_estimate = as.numeric(parameter_estimate),\n                    parameter_se = as.numeric(parameter_se),\n                    parameter_df = as.numeric(parameter_df),\n                    parameter_tval = as.numeric(parameter_tval),\n                    parameter_pval = as.numeric(parameter_pval),\n                    age_estimate = as.numeric(age_estimate),\n                    age_se = as.numeric(age_se),\n                    age_df = as.numeric(age_df),\n                    age_tval = as.numeric(age_tval),\n                    age_pval = as.numeric(age_pval),\n                    pre_estimate = as.numeric(pre_estimate),\n                    pre_se = as.numeric(pre_se),\n                    pre_df = as.numeric(pre_df),\n                    pre_tval = as.numeric(pre_tval),\n                    pre_pval = as.numeric(pre_pval),\n                    rsqc = as.numeric(rsqc),\n                    rsqm = as.numeric(rsqm),\n                    dispersion.chisq = as.numeric(dispersion.chisq),\n                    dispersion.ratio = as.numeric(dispersion.ratio),\n                    dispersion.rdf = as.numeric(dispersion.rdf),\n                    dispersion.pval = as.numeric(dispersion.pval),\n                    isSingular = as.logical(isSingular)\n                    \n  ))\n}, error = function(e){cat(\"ERROR :\", conditionMessage(e), \"\\n\");print(chr_pos)})\n}"
  },
  {
    "objectID": "qmd/5_physio_meth.html#run-the-model-per-trait",
    "href": "qmd/5_physio_meth.html#run-the-model-per-trait",
    "title": "6  Physio-associated CpG sites",
    "section": "6.3 Run the model per trait",
    "text": "6.3 Run the model per trait\n\n### run the model per trait\n\n### mass\n# run model\ndelta_out_mass &lt;- parallel::mclapply(delta_meth_ls, function_model_delta, parameter=\"mass\",mc.cores=12)\ndelta_out_mass &lt;- do.call(rbind.data.frame, delta_out_mass)\n\n# convert to numeric\ndelta_out_mass$parameter_pval &lt;- as.numeric(delta_out_mass$parameter_pval)\ndelta_out_mass$age_pval &lt;- as.numeric(delta_out_mass$age_pval)\n\n# exclude those with overdispersion\ndelta_out_mass &lt;- subset(delta_out_mass, dispersion.ratio &lt; 1.1 & dispersion.pval &gt; 0.05)\n\n# FDR correction\ndelta_out_mass$parameter_qval &lt;- p.adjust(delta_out_mass$parameter_pval, method = \"fdr\", n = nrow(delta_out_mass))\n\ndelta_out_mass$age_qval &lt;- p.adjust(delta_out_mass$age_pval, method = \"fdr\", n = nrow(delta_out_mass))\n\nRepeat this for all traits:\n\n\nCode\n### microf\n# run model\ndelta_out_microf &lt;- parallel::mclapply(delta_meth_ls, function_model_delta, parameter=\"microf\",mc.cores=12)\ndelta_out_microf &lt;- do.call(rbind.data.frame, delta_out_microf)\n\n# to numeric\ndelta_out_microf$parameter_pval &lt;- as.numeric(delta_out_microf$parameter_pval)\ndelta_out_microf$age_pval &lt;- as.numeric(delta_out_microf$age_pval)\n\n# exclude overdispersion\ndelta_out_microf &lt;- subset(delta_out_microf, isSingular == FALSE & dispersion.ratio &lt; 1.1 & dispersion.pval &gt; 0.05)\n\n# FDR correction\ndelta_out_microf$parameter_qval &lt;- p.adjust(delta_out_microf$parameter_pval, method = \"fdr\", n = nrow(delta_out_microf))\ndelta_out_microf$age_qval &lt;- p.adjust(delta_out_microf$age_pval, method = \"fdr\", n = nrow(delta_out_microf))\n\n### trypa\n# run model\ndelta_out_trypa &lt;- parallel::mclapply(delta_meth_ls, function_model_delta, parameter=\"trypa\",mc.cores=12)\ndelta_out_trypa &lt;- do.call(rbind.data.frame, delta_out_trypa)\n\n# as numeric\ndelta_out_trypa$parameter_pval &lt;- as.numeric(delta_out_trypa$parameter_pval)\ndelta_out_trypa$age_pval &lt;- as.numeric(delta_out_trypa$age_pval)\n\n# exclude overdispersion\ndelta_out_trypa &lt;- subset(delta_out_trypa, dispersion.ratio &lt; 1.1 & dispersion.pval &gt; 0.05)\n\n# FDR correction\ndelta_out_trypa$parameter_qval &lt;- p.adjust(delta_out_trypa$parameter_pval, method = \"fdr\", n = nrow(delta_out_trypa))\ndelta_out_trypa$age_qval &lt;- p.adjust(delta_out_trypa$age_pval, method = \"fdr\", n = nrow(delta_out_trypa))\n\n### ig\n# run model\ndelta_out_ig &lt;- parallel::mclapply(delta_meth_ls, function_model_delta, parameter=\"ig\",mc.cores=12)\ndelta_out_ig &lt;- do.call(rbind.data.frame, delta_out_ig)\n\n# as numeric\ndelta_out_ig$parameter_pval &lt;- as.numeric(delta_out_ig$parameter_pval)\ndelta_out_ig$age_pval &lt;- as.numeric(delta_out_ig$age_pval)\n\n# exclude overdispersion\ndelta_out_ig &lt;- subset(delta_out_ig, dispersion.ratio &lt; 1.1 & dispersion.pval &gt; 0.05)\n\n# FDR correction\ndelta_out_ig$parameter_qval &lt;- p.adjust(delta_out_ig$parameter_pval, method = \"fdr\", n = nrow(delta_out_ig))\ndelta_out_ig$age_qval &lt;- p.adjust(delta_out_ig$age_pval, method = \"fdr\", n = nrow(delta_out_ig))\n\n### hct\n# run model\ndelta_out_hct &lt;- parallel::mclapply(delta_meth_ls, function_model_delta, parameter=\"hct\",mc.cores=12)\ndelta_out_hct &lt;- do.call(rbind.data.frame, delta_out_hct)\n\n# as numeric\ndelta_out_hct$parameter_pval &lt;- as.numeric(delta_out_hct$parameter_pval)\ndelta_out_hct$age_pval &lt;- as.numeric(delta_out_hct$age_pval)\n\n# exclude overdispersion\ndelta_out_hct &lt;- subset(delta_out_hct, dispersion.ratio &lt; 1.1 & dispersion.pval &gt; 0.05)\n\n# FDR correction\ndelta_out_hct$parameter_qval &lt;- p.adjust(delta_out_hct$parameter_pval, method = \"fdr\", n = nrow(delta_out_hct))\ndelta_out_hct$age_qval &lt;- p.adjust(delta_out_hct$age_pval, method = \"fdr\", n = nrow(delta_out_hct))\n\n### combine\ndelta_out_all &lt;- rbind(delta_out_mass, delta_out_microf, delta_out_trypa, delta_out_ig, delta_out_hct)\ndelta_out_all$chr_pos &lt;- as.factor(delta_out_all$chr_pos)\ndelta_out_all$parameter &lt;- as.factor(delta_out_all$parameter)\ndelta_out_all$isSingular &lt;- as.logical(delta_out_all$isSingular)\ndelta_out_all[c(3:25, 27,28)] &lt;- lapply(delta_out_all[c(3:25, 27:28)], as.numeric)"
  },
  {
    "objectID": "qmd/5_physio_meth.html#results",
    "href": "qmd/5_physio_meth.html#results",
    "title": "6  Physio-associated CpG sites",
    "section": "6.4 Results",
    "text": "6.4 Results\nBelow we can see the volcano plots of all five physiological traits.\n\n\nVolcano plot physiological change\n\n\n\nAfter also subsetting for at least an (absolute) estimate of 0.1, there are 12 significant CpGs for delta Microfilaria spp, 21 for delta Trypanosoma spp., 23 for delta HCT and 5 for delta IgG, but 8 significant ones for delta body mass. Below you’ll find the raw data plots for each trait and CpG site.\n\n6.4.1 Microfilaria spp.\n\n\nRaw data delta Microfilaria a\n\n\n\n\n\nRaw data delta Microfilaria b\n\n\n\n\n\n6.4.2 Trypanosoma spp.\n\n\nRaw data delta Trypanosoma a\n\n\n\n\n\nRaw data delta Trypanosoma b\n\n\n\n\n\n6.4.3 IgG\n\n\nRaw data delta IgG\n\n\n\n\n\n6.4.4 HCT\n\n\nRaw data delta HCT a\n\n\n\n\n\nRaw data delta HCT b"
  },
  {
    "objectID": "qmd/6_fitness_meth.html#prepare-the-data",
    "href": "qmd/6_fitness_meth.html#prepare-the-data",
    "title": "7  Fitness effects",
    "section": "7.1 Prepare the data",
    "text": "7.1 Prepare the data\n\n### load packages\npacman::p_load(tidyverse, data.table, tibble, performance, matrixStats, \n               parallel, performance, lmerTest, tidystats, insight, glmmTMB)\n\n### load data\n\nload(file = \"results/modeloutput/subset_sites_sig_deltameth.RData\")\n\n### load phenotypic data\n\nload(\"data/phenotypes/fulldata_complete_epi_withdates.RData\")\n\n#combine with site and fitness data\npheno_pre &lt;- subset(all_pheno_epi, prepost==\"pre\")\n\ndelta_meth &lt;- left_join(delta_meth, unique(pheno_pre[,c(\"id\", \"year\", \"MS\", \"surv\")]), by = c(\"id\", \"year\"))\n                                           \ndelta_meth_ls &lt;- delta_meth %&gt;% group_split(chr_pos)"
  },
  {
    "objectID": "qmd/6_fitness_meth.html#functon-to-run-the-model",
    "href": "qmd/6_fitness_meth.html#functon-to-run-the-model",
    "title": "7  Fitness effects",
    "section": "7.2 Functon to run the model",
    "text": "7.2 Functon to run the model\nBelow you’ll find the full function to run the model per CpG site, where two models are run:\nOne for annual mating success (AMS): glmmTMB(MS ~ scale(delta_meth) + age + scale(methperc_pre) + (1|site/id), family = \"poisson\", ziformula=~1)\nAnd one for survival: glmmTMB(surv ~ scale(delta_meth) + age + scale(methperc_pre) + (1|site/id), family = \"binomial\")\n\n\nCode\n# function to run the model\nfunction_model_fitness &lt;- function(df){tryCatch({\n  chr_pos &lt;- as.character(df[1,1])\n  df &lt;- as.data.frame(df)\n  df$site &lt;- as.factor(df$site)\n  df$id &lt;- as.factor(df$id)\n  \n  ### AMS\n  formula_ams &lt;- formula(paste0(\"MS ~ scale(delta_meth) + age + scale(methperc_pre) + (1|site/id) \"))\n  model_ams &lt;- glmmTMB(formula_ams, data=df, family = \"poisson\", ziformula=~1)\n  summary_ams &lt;- summary(model_ams)\n  \n  #fixed effect\n  parameter_estimate &lt;- summary_ams$coefficients$cond[\"scale(delta_meth)\", \"Estimate\"]\n  parameter_se &lt;- summary_ams$coefficients$cond[\"scale(delta_meth)\",\"Std. Error\"]\n  parameter_zval &lt;- summary_ams$coefficients$cond[\"scale(delta_meth)\",\"z value\"]\n  parameter_pval &lt;- summary_ams$coefficients$cond[\"scale(delta_meth)\", \"Pr(&gt;|z|)\"]\n  \n  #age effect\n  age_estimate &lt;- summary_ams$coefficients$cond[\"age\", \"Estimate\"]\n  age_se &lt;- summary_ams$coefficients$cond[\"age\", \"Std. Error\"]\n  age_zval &lt;- summary_ams$coefficients$cond[\"age\", \"z value\"]\n  age_pval &lt;- summary_ams$coefficients$cond[\"age\", \"Pr(&gt;|z|)\"]\n  \n  #premeth effect\n  pre_estimate &lt;- summary_ams$coefficients$cond[\"scale(methperc_pre)\", \"Estimate\"]\n  pre_se &lt;- summary_ams$coefficients$cond[\"scale(methperc_pre)\", \"Std. Error\"]\n  pre_zval &lt;- summary_ams$coefficients$cond[\"scale(methperc_pre)\", \"z value\"]\n  pre_pval &lt;- summary_ams$coefficients$cond[\"scale(methperc_pre)\", \"Pr(&gt;|z|)\"]\n  \n  rsqc &lt;- performance::r2(model_ams)$R2_conditional #fixed plus random parameterects relative to overall variance\n  rsqm &lt;- performance::r2(model_ams)$R2_marginal #fixed parameterects relative to overall variance\n  \n  message &lt;- model_ams$fit$message\n  \n  icc_id_site &lt;-icc(model_ams, by_group = TRUE, tolerance = 0)[1,2]\n  icc_site &lt;-icc(model_ams, by_group = TRUE, tolerance = 0)[2,2]\n  \n \n  ams &lt;- data.frame(chr_pos=as.factor(chr_pos),\n                    ams_icc_id_site = as.numeric(icc_id_site),\n                    ams_icc_site = as.numeric(icc_site),\n                    ams_delta_meth_estimate = as.numeric(parameter_estimate),\n                    ams_delta_meth_se = as.numeric(parameter_se),\n                    ams_delta_meth_zval = as.numeric(parameter_zval),\n                    ams_delta_meth_pval = as.numeric(parameter_pval),\n                    ams_age_estimate = as.numeric(age_estimate),\n                    ams_age_se = as.numeric(age_se),\n                    ams_age_zval = as.numeric(age_zval),\n                    ams_age_pval = as.numeric(age_pval),\n                    ams_pre_estimate = as.numeric(pre_estimate),\n                    ams_pre_se = as.numeric(pre_se),\n                    ams_pre_zval = as.numeric(pre_zval),\n                    ams_pre_pval = as.numeric(pre_pval),\n                    ams_rsqc = as.numeric(rsqc),\n                    ams_rsqm = as.numeric(rsqm),\n                    ams_message = message              \n  ) \n  \n  ### surv\n  formula_surv &lt;- formula(paste0(\"surv ~ scale(delta_meth) + age + scale(methperc_pre) + (1|site/id) \"))\n  model_surv &lt;- glmmTMB(formula_surv, data=df, family = \"binomial\")\n  summary_surv &lt;- summary(model_surv)\n  \n  #fixed effect\n  parameter_estimate &lt;- summary_surv$coefficients$cond[\"scale(delta_meth)\", \"Estimate\"]\n  parameter_se &lt;- summary_surv$coefficients$cond[\"scale(delta_meth)\",\"Std. Error\"]\n  parameter_zval &lt;- summary_surv$coefficients$cond[\"scale(delta_meth)\",\"z value\"]\n  parameter_pval &lt;- summary_surv$coefficients$cond[\"scale(delta_meth)\", \"Pr(&gt;|z|)\"]\n  \n  #age effect\n  age_estimate &lt;- summary_surv$coefficients$cond[\"age\", \"Estimate\"]\n  age_se &lt;- summary_surv$coefficients$cond[\"age\", \"Std. Error\"]\n  age_zval &lt;- summary_surv$coefficients$cond[\"age\", \"z value\"]\n  age_pval &lt;- summary_surv$coefficients$cond[\"age\", \"Pr(&gt;|z|)\"]\n  \n  #premeth effect\n  pre_estimate &lt;- summary_surv$coefficients$cond[\"scale(methperc_pre)\", \"Estimate\"]\n  pre_se &lt;- summary_surv$coefficients$cond[\"scale(methperc_pre)\", \"Std. Error\"]\n  pre_zval &lt;- summary_surv$coefficients$cond[\"scale(methperc_pre)\", \"z value\"]\n  pre_pval &lt;- summary_surv$coefficients$cond[\"scale(methperc_pre)\", \"Pr(&gt;|z|)\"]\n  \n  rsqc &lt;- performance::r2(model_surv)$R2_conditional #fixed plus random parameterects relative to overall variance\n  rsqm &lt;- performance::r2(model_surv)$R2_marginal #fixed parameterects relative to overall variance\n  \n  message &lt;- model_surv$fit$message\n  \n  icc_id_site &lt;-icc(model_surv, by_group = TRUE, tolerance = 0)[1,2]\n  icc_site &lt;-icc(model_surv, by_group = TRUE, tolerance = 0)[2,2]\n  \n  surv &lt;- data.frame(surv_icc_id_site = as.numeric(icc_id_site),\n                    surv_icc_site = as.numeric(icc_site),\n                    surv_delta_meth_estimate = as.numeric(parameter_estimate),\n                    surv_delta_meth_se = as.numeric(parameter_se),\n                    surv_delta_meth_zval = as.numeric(parameter_zval),\n                    surv_delta_meth_pval = as.numeric(parameter_pval),\n                    surv_age_estimate = as.numeric(age_estimate),\n                    surv_age_se = as.numeric(age_se),\n                    surv_age_zval = as.numeric(age_zval),\n                    surv_age_pval = as.numeric(age_pval),\n                    surv_pre_estimate = as.numeric(pre_estimate),\n                    surv_pre_se = as.numeric(pre_se),\n                    surv_pre_zval = as.numeric(pre_zval),\n                    surv_pre_pval = as.numeric(pre_pval),\n                    surv_rsqc = as.numeric(rsqc),\n                    surv_rsqm = as.numeric(rsqm),\n                    surv_message = message              \n  ) \n  out &lt;- cbind(ams, surv)\n  return(out)\n  \n}, error = function(e){cat(\"ERROR :\", conditionMessage(e), \"\\n\");print(chr_pos)})\n}"
  },
  {
    "objectID": "qmd/6_fitness_meth.html#run-the-model",
    "href": "qmd/6_fitness_meth.html#run-the-model",
    "title": "7  Fitness effects",
    "section": "7.3 Run the model",
    "text": "7.3 Run the model\n\n### run the model \n# run model\ndelta_out_fitness &lt;- parallel::mclapply(delta_meth_ls, function_model_fitness,mc.cores=12)\ndelta_out_fitness &lt;- do.call(rbind.data.frame, delta_out_fitness)\n\n# convert to numeric\ndelta_out_fitness$ams_delta_meth_estimate &lt;- as.numeric(delta_out_fitness$ams_delta_meth_estimate)\ndelta_out_fitness$surv_delta_meth_estimate &lt;- as.numeric(delta_out_fitness$surv_delta_meth_estimate)\n\n# exclude those with convergence errors\ndelta_out_ams &lt;- subset(delta_out_fitness, ams_message == \"relative convergence (4)\")\ndelta_out_surv &lt;- subset(delta_out_fitness, surv_message == \"relative convergence (4)\")\n\n# FDR correction\ndelta_out_ams$ams_delta_meth_qval &lt;- p.adjust(delta_out_ams$ams_delta_meth_pval, method = \"fdr\", n = nrow(delta_out_ams))\ndelta_out_surv$surv_delta_meth_qval &lt;- p.adjust(delta_out_surv$surv_delta_meth_pval, method = \"fdr\", n = nrow(delta_out_surv))\n\ndelta_out_ams$chr_pos &lt;- as.factor(delta_out_ams$chr_pos)\ndelta_out_surv$chr_pos &lt;- as.factor(delta_out_surv$chr_pos)"
  },
  {
    "objectID": "qmd/6_fitness_meth.html#results",
    "href": "qmd/6_fitness_meth.html#results",
    "title": "7  Fitness effects",
    "section": "7.4 Results",
    "text": "7.4 Results\nThere are 481 significant CpG sites for AMS but none for survival. Below you can see the volcano plot and the raw data plots of the four most significant CpG sites.\n\n\nVolcano plot fitness\n\n\n\n\n\nRaw data AMS top CpG\n\n\n\n\n7.4.1 Overlapping CpGs previous analyses\nInterestingly, there is some overlap between changing CpG sites that are significantly associated with reproductive effort as well as with AMS (N = 8), changing CpG sites that are associated with changing physiology as well as with AMS (N = 15) and changing CpG sites that are associated with reproductive effort and changing physiology (N = 18).\nBelow, I will plot both associations for a subset of these CpG sites\n\n\nRaw data overlapping CpG sites\n\n\n\nThe first CpG site is located in a gene body, intron and downstream region whereas the second CpG site was unannotated (located in an intergenic region) based on the black grouse genome annotation. Neither CpG was annotated based on the lifted over chicken genome annotation."
  },
  {
    "objectID": "qmd/6_fitness_meth.html#annotation",
    "href": "qmd/6_fitness_meth.html#annotation",
    "title": "7  Fitness effects",
    "section": "7.5 Annotation",
    "text": "7.5 Annotation\nI annotated all CpG sites from this analysis as well as the previous ones and have lists of genes (based on the chicken genome). Inputting the list of genes in GOrilla shows that cell fate determination is a significant GO term for AMS, but that is the only significant output."
  }
]