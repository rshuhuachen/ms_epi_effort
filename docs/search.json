[
  {
    "objectID": "index.html#overview-data",
    "href": "index.html#overview-data",
    "title": "Overview",
    "section": "0.1 Overview data",
    "text": "0.1 Overview data\nEpigenetic, morphological, behavioural, and physiological data were obtained from 51 black grouse males sampled across five lekking sites in Central Finland between 2005 and 2007 inclusive. The birds were captured at two time points: before the lekking season (January-March) and after the lekking season (after mid-April) using walk-in traps. Six individuals were captured both before and after the lekking season in two years, and one individual was caught in three years, totalling to 116 captures.\nReproductive effort was estimated using three behavioural indicators: lek attendance, fighting rate and lek centrality. Blood was used to quantify the abundance of Microfilaria spp. and Trypanosoma spp., two extra-cellular blood parasites, immunoglobulin concentration in blood plasma, and haematocrit concentration. Additionally, body mass was quantified during capture to the nearest 10g.\n\n\n\nDNA methylation"
  },
  {
    "objectID": "qmd/1_intro_hypothesis.html#phenotypes",
    "href": "qmd/1_intro_hypothesis.html#phenotypes",
    "title": "2  Introduction and hypotheses",
    "section": "2.1 Phenotypes",
    "text": "2.1 Phenotypes\nFirst, we explore the trade-offs that we can find in our black grouse data set, independent of epigenetic changes. For this analysis, we use our full phenotypic dataset, which includes samples that are not used for the epigenetic analysis in this paper as they are not sampled before and after the lekking season.\nWe have a few different questions that we want to test for, to understand what trade-offs can be identified in our species:\n\nDo males invest more in reproduction if they have more resources to start with?\nIs reproductive effort associated with body mass losses?\nIs reproductive effort and/or losses in body mass associated with mating success and/or survival?\n\nWe test these three questions in a Bayesian structural equation model, in which we can test multiple regressions simultaneously.\n\n### load packages ####\npacman::p_load(tidyverse, data.table, lmerTest, glmmTMB, brms, bayesplot)\n\n### load data ####\n\nload(\"data/phenotypes/fulldata_complete_epi_withdates.RData\")\nload(\"data/phenotypes/pheno_dif_prepost.RData\")\n\n### test for trade-offs ####\n\ndata &lt;- left_join(all_pheno_epi, prepost_dif[,c(\"id\", \"year\", \"mass_dif\", \"microf_dif\", \"trypa_dif\", \"ig_dif\", \"hct_dif\")], by = c(\"year\", \"id\"))\ndata &lt;- data %&gt;% mutate(age_year = as.factor(case_when(Core == \"Core\" ~ year - born,\n                                                        Core == \"No core\" ~ NA)),\n                                        age = as.factor(case_when(Core == \"Core\" & (year - born &gt; 1) ~ \"Adult\",\n                                                        Core == \"Core\" & (year - born == 1) ~ \"Yearling\",\n                                                        Core == \"No core\" ~ \"Adult\")))\n\ndata$mass &lt;- as.numeric(data$mass)    \n\n## 1) reproductive effort affected by available resources?\nm_1_a &lt;- bf(attend ~ mass + (1|site/id))\nm_1_f &lt;- bf(fight ~ mass + (1|site/id))\nm_1_d &lt;- bf(dist ~ mass + (1|site/id))\n\n## 2) loss in resources affected by reproductive effort?\nm_2 &lt;- bf(mass_dif ~ attend + fight + dist +(1|site/id))\n\n## 3) fitness affected by loss in resources and/or reproductive effort?\nm_3_s &lt;- bf(surv ~ mass_dif + attend + fight + dist + (1|site/id), family = \"bernoulli\")\nm_3_m &lt;- bf(MS ~ mass_dif + attend + fight + dist +(1|site/id), family = \"poisson\")\n\nsem &lt;- m_1_a + m_1_f + m_1_d + m_2 + m_3_s + m_3_m\n\nfit &lt;- brm(sem, data = data, cores = 8, control = list(adapt_delta = 0.99, max_treedepth = 15),\n           prior = prior(normal(0,10), class = b), iter = 100000, thin = 1000, warmup = 50000)\n\nHowever, if we use all three measures of reproductive effort as predictors for survival, we automatically exclude males had did not attend the lek, as they therefore have unmeasured fighting and centrality rates. Therfore, we also run an alternative model that just uses attendance as a predictor of survival.\n\nm_3_s_v2 &lt;- bf(surv ~ attend + (1|site/id), family = \"bernoulli\")\n\nsem2 &lt;- m_1_a + m_1_f + m_1_d + m_2 + m_3_s_v2 + m_3_m\n\nfit_a &lt;- brm(sem, data = data, cores = 8, control = list(adapt_delta = 0.99, max_treedepth = 15), prior = prior(normal(0,10), class = b), iter = 100000, thin = 1000, warmup = 50000)\n\n\n\n\n\nLebigre, Christophe, Rauno V. Alatalo, and Heli Siitari. 2013. “Physiological Costs Enforce the Honesty of Lek Display in the Black Grouse (Tetrao Tetrix).” Oecologia 172 (4): 983–93. https://doi.org/10.1007/s00442-012-2548-9."
  },
  {
    "objectID": "qmd/2_wgbs.html",
    "href": "qmd/2_wgbs.html",
    "title": "3  Whole genome bisulphite sequencing",
    "section": "",
    "text": "4 Trim, align, call methylation\nWe used WGBS for one sample (E197) and trimmed the reads.\ntrim_galore --paired data/E197_R1.fq.gz data/E197_R2.fq.gz --quality 20 --fastqc --illumina --stringency 3 --gzip --length 20 --trim-n --cores 8 -o ./data/processed/trim/ 2&gt;&1 | tee log/trim.log\nNext, we prepare the black grouse reference genome for aligning bisulphite-treated reads (using a container).\ncd /vol/cluster-data/rchen/wgbs\nWGBS_SCRATCH=$(pwd)/scratch/\n\n/vol/apptainer/bin/apptainer run --cleanenv \\\n  --fakeroot --overlay ${WGBS_SCRATCH} \\\n  --bind ${WGBS_SCRATCH}/tmp,$(pwd),/vol/cluster-data/rchen/wgbs/data/genome \\\n  --env PYTHONNOUSERSITE=1 \\\n  /vol/cluster-data/rchen/epi/epigbs2/singularity/bismark_0_24.sif \\\n  bismark_genome_preparation data/genome/\nNow that the genome is ready, we align the reads to the prepared reference genome.\n/vol/apptainer/bin/apptainer run --cleanenv \\\n  --fakeroot --overlay ${WGBS_SCRATCH} \\\n  --bind ${WGBS_SCRATCH}/tmp,$(pwd),/vol/cluster-data/rchen/wgbs/data/genome \\\n  --env PYTHONNOUSERSITE=1 \\\n  /vol/cluster-data/rchen/epi/epigbs2/singularity/bismark_0_24.sif \\\n  bismark -p 8 --parallel 4 --un --ambiguous --genome data/genome/ \\\n  -1 data/processed/trim/E197_R1_val_1.fq.gz -2 data/processed/trim/E197_R2_val_2.fq.gz \\\n  -o data/processed/alignment --rg_tag\nWe de-duplicate the aligned sequences with bismark\n/vol/apptainer/bin/apptainer run --cleanenv \\\n  --fakeroot --overlay ${WGBS_SCRATCH} \\\n  --bind ${WGBS_SCRATCH}/tmp,$(pwd) \\\n  --env PYTHONNOUSERSITE=1 \\\n  /vol/cluster-data/rchen/epi/epigbs2/singularity/bismark_0_24.sif \\\n  deduplicate_bismark E197_R1_val_1_bismark_bt2_pe.bam\nLastly, we call methylation using bismark.\n/vol/apptainer/bin/apptainer run --cleanenv \\\n  --fakeroot --overlay ${WGBS_SCRATCH} \\\n  --bind ${WGBS_SCRATCH}/tmp,$(pwd),/vol/cluster-data/rchen/wgbs/data/genome/ \\\n  --env PYTHONNOUSERSITE=1 \\\n  /vol/cluster-data/rchen/epi/epigbs2/singularity/bismark_0_24.sif \\\n  bismark_methylation_extractor --multicore 4 --ignore 4 --ignore_r2 4 -p --CX --no_overlap --scaffolds --report \\\n  --cutoff 10 \\\n  --bedGraph --cytosine_report --comprehensive --gzip --merge_non_CpG --genome_folder data/ref/ data/processed/deduplicated/E197_R1_val_1_bismark_bt2_pe.deduplicated.bam \\\n  -o data/processed/methcall\n# Downstream analysis\nThe last command generateds the file methcall_report.CX_report.txt.gz containing methylation calls. We further process this file in R to 1) annotate the CpG sites, 2) calculate average CpG methylation within gene regions across genes, using a sliding window approach. Next, we plot the result.\n## Annotate CpG sites\nTo characterise methylation levels across different gene regions, we calculated the mean methylation level across genes for four regions: the transcription start site (TSS; 300 bp upstream to 50 bp downstream of the annotated starting position of each gene (Laine et al., 2016)), the gene body, upstream regions (10 kb upstream from the gene body) and downstream regions (10 kb downstream from the gene body).\n```{r meth, echo=T, eval=F} #| code-fold: true\n\n4.0.0.1 packages\npacman::p_load(data.table, genomation, GenomicFeatures, rtracklayer, GenomicRanges, windowscanr, dplyr, ggplot2, cowplot, assertthat)\n\n\n4.0.0.2 load data\nmeth &lt;- fread(“data/processed/methcall/methcall_report.CX_report.txt.gz”)\n\n\n5 change symbols in scaffold names\nmeth\\(V1 &lt;- gsub(\";\", \"__\", meth\\)V1) meth\\(V1 &lt;- gsub(\"=\", \"_\", meth\\)V1)\n\n\n6 name columns\nnames(meth) &lt;- c(“chr”, “start”, “strand”, “nC”, “nT”, “dicontext”, “tricontext”)\n\n\n7 add ‘end’ column for ranges\nmeth\\(end &lt;- meth\\)start\ncpg &lt;- subset(meth, dicontext == “CG”)\n\n7.0.0.0.1 Annotation\n\n\n7.0.1 make a function to annotate dataframe\nannotate_methfile &lt;- function(long_df, annotation_dir, regions){ pacman::p_load(genomation, GenomicFeatures, rtracklayer, GenomicRanges, tidyverse)\n### annotate df accordingly and add region name long_df\\(end &lt;- long_df\\)start df_gr &lt;- as(long_df, “GRanges”) # convert to GRanges object\n#more complicated than just subsetting, want to include gene information too so need the overlap annotated &lt;- data.frame()\nfor (i in regions){ # loop over specified regions #load in gff file region &lt;- unique(gffToGRanges(paste0(annotation_dir, i, “.gff3”))) region &lt;- as(region, “GRanges”) #find overlaps in df and gene region, because can have multiple hits include all hits &lt;- findOverlaps(df_gr, region) idx_c &lt;- queryHits(hits) idx_region &lt;- subjectHits(hits)\n#get values from overlaps for cpg and region separately\nvalues_region &lt;- data.frame(chr=region@seqnames[idx_region],\n                            start = region@ranges@start[idx_region], \n                            end= region@ranges@start[idx_region] + region@ranges@width[idx_region], \n                            gene_id = mcols(region)$gene_id[idx_region],\n                            region = i)\n\nvalues_cytosines &lt;- data.frame(pos = df_gr@ranges@start[idx_c], \n                               nC = mcols(df_gr)$nC[idx_c], \n                               nT = mcols(df_gr)$nT[idx_c])\n\nannotated_region &lt;- cbind(values_cytosines, values_region) #combine\nannotated &lt;- rbind(annotated, annotated_region) #add to full df\n} annotated\\(region &lt;- as.factor(annotated\\)region)\nreturn(annotated) }\n\n\n7.1 Annotate CpG and CH file\ncpg_annotate &lt;- annotate_methfile(long_df = cpg, annotation_dir = “/vol/cluster-data/rchen/git/grouse-annotation/output/”, regions = c(“TSS”, “genes”, “upstream”, “downstream”))\ncpg_annotate\\(methperc &lt;- cpg_annotate\\)nC / (cpg_annotate\\(nC + cpg_annotate\\)nT) * 100\nsave(cpg_annotate, file = “data/processed/annotated_cpg.RData”)\n:::\n\n\n## Calculate average methylation % per bin per region\nThe mean methylation of TSS regions was calculated across the entire 350 bp window. We used a sliding window approach to calculate mean methylation of gene bodies following (Laine et al., 2016). First, we subdivided the gene body into 40 bins (where the bin length therefore differs depending on the gene size), and then calculated the mean methylation for each bin, with an overlap between neighbouring bins of 250 bp. A similar sliding window approach was used to calculate mean methylation of up- and downstream regions. Here, the regions were divided into 40 bins of 250 bp each, and the mean methylation was calculated for each bin with an overlap between neighbouring bins of 125 bp. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n#### Per gene, calculate meth% per bin\ncpg_list &lt;- cpg_annotate %&gt;% group_split(gene_id, region)\n\nsave(cpg_list, file = \"data/processed/annotated_cpg_list.RData\")\n\n# make function to calcalate average methylation per bin\nmeth_per_window &lt;- function(gene_region){tryCatch({\n  #determine start and end of each region\n \n    #determine window length for each region\n  if (gene_region$region[1] == \"TSS\"){\n    start_region &lt;- gene_region$start[1]\n    end_region &lt;- gene_region$end[1]\n    length = end_region - start_region\n    overlap = 0\n    } else if (gene_region$region[1] == \"genes\"){\n    start_region &lt;- gene_region$start[1]\n    end_region &lt;- gene_region$end[1]\n    length = floor((end_region - start_region) / 40)\n    overlap = 0.125*length \n    } else if (gene_region$region[1] == \"downstream\"){\n    start_region &lt;- gene_region$start[1]\n    end_region &lt;- gene_region$end[1]\n    length = 250\n    overlap = 125 \n    } else if (gene_region$region[1] == \"upstream\"){\n    start_region &lt;- gene_region$start[1]\n    end_region &lt;- gene_region$end[1] \n    length = 250\n    overlap = 125}\n  \n  ### function window slider adapted from R package windowscanr\n  \n  source(\"scripts/function_sliding_window_custom.R\")\n  window &lt;- win_scan(x = gene_region,\n                     position = \"pos\",\n                     values = \"methperc\",\n                     win_size = length,\n                     win_step = length,\n                     overlap = overlap,\n                     funs = c(\"mean\", \"sd\"),\n                     region = as.character(gene_region$region[1]))\n\n  window[window == \"NaN\"] &lt;- NA\n  sum_window &lt;- data.frame(window)\n  sum_window$chr&lt;- gene_region$chr[1]\n  sum_window$gene_id&lt;- gene_region$gene_id[1]\n  sum_window$region&lt;- gene_region$region[1]\n  sum_window$start_bp&lt;- start_region\n  sum_window$end_bp&lt;- end_region\n  sum_window$length_bin&lt;- length\n  sum_window$win_nr &lt;- row.names(sum_window)\n  \n  return(sum_window)\n  }, error = function(e){cat(\"ERROR :\", conditionMessage(e), \"\\n\");print(paste0(gene_region$chr[1], \"_\", gene_region$pos[1]))})}\n\n# run in parallel\ncpg_windows &lt;- parallel::mclapply(cpg_list, meth_per_window, mc.cores=12)\ncpg_windows &lt;- do.call(rbind.data.frame, cpg_windows)\n\nsave(cpg_windows, file = \"data/processed/cpg_meth_per_window_per_region.RData\")\nmeth\\(V1 &lt;- gsub(\";\", \"__\", meth\\)V1) meth\\(V1 &lt;- gsub(\"=\", \"_\", meth\\)V1)\nnames(meth) &lt;- c(“chr”, “start”, “strand”, “nC”, “nT”, “dicontext”, “tricontext”)\nmeth\\(end &lt;- meth\\)start\ncpg &lt;- subset(meth, dicontext == “CG”)"
  },
  {
    "objectID": "qmd/2_wgbs.html#annotate-cpg-and-ch-file",
    "href": "qmd/2_wgbs.html#annotate-cpg-and-ch-file",
    "title": "3  Whole genome bisulphite sequencing",
    "section": "7.1 Annotate CpG and CH file",
    "text": "7.1 Annotate CpG and CH file\ncpg_annotate &lt;- annotate_methfile(long_df = cpg, annotation_dir = “/vol/cluster-data/rchen/git/grouse-annotation/output/”, regions = c(“TSS”, “genes”, “upstream”, “downstream”))\ncpg_annotate\\(methperc &lt;- cpg_annotate\\)nC / (cpg_annotate\\(nC + cpg_annotate\\)nT) * 100\nsave(cpg_annotate, file = “data/processed/annotated_cpg.RData”)\n:::\n\n\n## Calculate average methylation % per bin per region\nThe mean methylation of TSS regions was calculated across the entire 350 bp window. We used a sliding window approach to calculate mean methylation of gene bodies following (Laine et al., 2016). First, we subdivided the gene body into 40 bins (where the bin length therefore differs depending on the gene size), and then calculated the mean methylation for each bin, with an overlap between neighbouring bins of 250 bp. A similar sliding window approach was used to calculate mean methylation of up- and downstream regions. Here, the regions were divided into 40 bins of 250 bp each, and the mean methylation was calculated for each bin with an overlap between neighbouring bins of 125 bp. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n#### Per gene, calculate meth% per bin\ncpg_list &lt;- cpg_annotate %&gt;% group_split(gene_id, region)\n\nsave(cpg_list, file = \"data/processed/annotated_cpg_list.RData\")\n\n# make function to calcalate average methylation per bin\nmeth_per_window &lt;- function(gene_region){tryCatch({\n  #determine start and end of each region\n \n    #determine window length for each region\n  if (gene_region$region[1] == \"TSS\"){\n    start_region &lt;- gene_region$start[1]\n    end_region &lt;- gene_region$end[1]\n    length = end_region - start_region\n    overlap = 0\n    } else if (gene_region$region[1] == \"genes\"){\n    start_region &lt;- gene_region$start[1]\n    end_region &lt;- gene_region$end[1]\n    length = floor((end_region - start_region) / 40)\n    overlap = 0.125*length \n    } else if (gene_region$region[1] == \"downstream\"){\n    start_region &lt;- gene_region$start[1]\n    end_region &lt;- gene_region$end[1]\n    length = 250\n    overlap = 125 \n    } else if (gene_region$region[1] == \"upstream\"){\n    start_region &lt;- gene_region$start[1]\n    end_region &lt;- gene_region$end[1] \n    length = 250\n    overlap = 125}\n  \n  ### function window slider adapted from R package windowscanr\n  \n  source(\"scripts/function_sliding_window_custom.R\")\n  window &lt;- win_scan(x = gene_region,\n                     position = \"pos\",\n                     values = \"methperc\",\n                     win_size = length,\n                     win_step = length,\n                     overlap = overlap,\n                     funs = c(\"mean\", \"sd\"),\n                     region = as.character(gene_region$region[1]))\n\n  window[window == \"NaN\"] &lt;- NA\n  sum_window &lt;- data.frame(window)\n  sum_window$chr&lt;- gene_region$chr[1]\n  sum_window$gene_id&lt;- gene_region$gene_id[1]\n  sum_window$region&lt;- gene_region$region[1]\n  sum_window$start_bp&lt;- start_region\n  sum_window$end_bp&lt;- end_region\n  sum_window$length_bin&lt;- length\n  sum_window$win_nr &lt;- row.names(sum_window)\n  \n  return(sum_window)\n  }, error = function(e){cat(\"ERROR :\", conditionMessage(e), \"\\n\");print(paste0(gene_region$chr[1], \"_\", gene_region$pos[1]))})}\n\n# run in parallel\ncpg_windows &lt;- parallel::mclapply(cpg_list, meth_per_window, mc.cores=12)\ncpg_windows &lt;- do.call(rbind.data.frame, cpg_windows)\n\nsave(cpg_windows, file = \"data/processed/cpg_meth_per_window_per_region.RData\")"
  },
  {
    "objectID": "qmd/2_wgbs.html#plot-the-result",
    "href": "qmd/2_wgbs.html#plot-the-result",
    "title": "3  Whole genome bisulphite sequencing",
    "section": "7.2 Plot the result",
    "text": "7.2 Plot the result\n\n\nCode\n#### plotting\n\ntotal_window &lt;- data.frame(region = c(rep(\"upstream\", times = 41),\n                                      rep(\"TSS\", times = 1),\n                                      rep(\"genes\", times = 41),\n                                      rep(\"downstream\", times = 41)),\n                           win_nr = c(c(1:41), 1, c(1:41), c(1:41)),\n                           window_total = c(1:124))\n#extract for one gene\n### first filter to have at least 2 cpg sites\ncpg_windows_min2 &lt;- subset(cpg_windows, methperc_n &gt; 1)\n\ncpg_windows_min2$region &lt;- factor(cpg_windows_min2$region, levels = c(\"upstream\", \"TSS\", \"genes\", \"downstream\"))\ncpg_windows_min2$win_nr &lt;- as.numeric(cpg_windows_min2$win_nr)\ncpg_windows_min2$methperc_mean &lt;- as.numeric(cpg_windows_min2$methperc_mean)\ncpg_windows_min2 &lt;- left_join(cpg_windows_min2, total_window, by = c(\"win_nr\", \"region\"))\ncpg_windows_min2 &lt;- subset(cpg_windows_min2, !is.na(window_total))\n\n#problem when gene is too short and don't have 41 windows\n\ncpg_windows_min2_n &lt;- cpg_windows_min2 %&gt;% group_by(window_total) %&gt;% \n  summarise(n_meth = sum(!is.na(methperc_mean)))\n\ncpg_windows_min2_mean &lt;- cpg_windows_min2 %&gt;% group_by(window_total) %&gt;% \n  summarise(mean_meth = mean(methperc_mean, na.rm=TRUE),\n            min_meth = min(methperc_mean, na.rm=TRUE),\n            max_meth = max(methperc_mean, na.rm=TRUE))\n\ncpg_windows_min2_sd &lt;- cpg_windows_min2 %&gt;% group_by(window_total) %&gt;% \n  summarise(sd_meth = sd(methperc_mean, na.rm=T))\n\ncpg_windows_min2_sum &lt;- left_join(cpg_windows_min2_n, cpg_windows_min2_mean, by = \"window_total\") #leave out region for now, so wrong - talk to kees\ncpg_windows_min2_sum &lt;- left_join(cpg_windows_min2_sum, cpg_windows_min2_sd, by = \"window_total\")\ncpg_windows_min2_sum$se_meth &lt;- cpg_windows_min2_sum$sd_meth/sqrt(cpg_windows_min2_sum$n_meth)\ncpg_windows_min2_sum[cpg_windows_min2_sum == \"NaN\"] &lt;- NA\n\n# plot \nclr_4 &lt;- c(\"#0F8D7BFF\", \"#928918FF\", \"#774CB3FF\", \"#436C97FF\")\nmean_tss_meth &lt;- mean(cpg_windows_min2$methperc_mean[which(cpg_windows_min2$region == \"TSS\")], na.rm=T)      \n\nggplot(cpg_windows_min2_sum, aes(x = window_total, y = mean_meth)) + \n  geom_ribbon(aes(ymin = mean_meth - se_meth, ymax =mean_meth + se_meth), fill = \"lightblue\", alpha = 0.7)+\n  geom_line(col = \"black\", linewidth = 0.8) +\n  geom_point() + labs(y = \"Mean CpG methylation %\", title = \"CpG methylation across gene regions\")+\n  geom_text(label=\"10 kb upstream\", x = 20, y = 66, col = clr_4[1], family = \"Arial\", size = 6)+\n  geom_text(label=\"Gene body\", x = 62, y = 66, col = clr_4[3], family = \"Arial\", size = 6)+\n  geom_text(label=\"10 kb downstream\", x = 104, y = 66, col = clr_4[4], family = \"Arial\", size = 6)+\n  geom_text(label=\"TSS\", x = 51, y = mean_tss_meth, col = clr_4[2], family = \"Arial\", size = 6)+ \n  geom_segment(aes(xend = 43, y = mean_tss_meth, x = 47, yend = mean_tss_meth), arrow = arrow(length = unit(0.2, \"cm\")))+\n  geom_vline(xintercept = 41.5, linetype = \"dotted\", col = clr_4[1])+ \n  geom_vline(xintercept = 42.5, linetype = \"dotted\", col = clr_4[2])+ \n  geom_vline(xintercept = 41.5, linetype = \"dotted\", col = clr_4[3])+ \n  geom_vline(xintercept = 83.5, linetype = \"dotted\", col = clr_4[4])+ \n  scale_color_manual(values=clr_4)+\n  ylim(55, 67)+\n  theme(axis.title.x = element_blank(),\n        axis.text.x = element_blank(),\n        legend.position = \"bottom\") -&gt; across_genes_min2\n\ntss_min2 &lt;- subset(cpg_windows_min2, region == \"TSS\")\ntss_min2$methperc_n &lt;- as.numeric(tss_min2$methperc_n)\n\nggplot(tss_min2, aes(x = methperc_mean)) + geom_histogram() +\n  labs(x = \"Mean CpG methylation %\", title = \"Histogram TSS CpG methylation % \", subtitle = \"(min sites = 2)\", y = \"Count\") -&gt; tss_hist_min2\n\nggplot(tss_min2, aes(x = methperc_n, y = methperc_mean)) + geom_point() +\n  labs(x = \"Number of CpGs\", title = \"CpG sites vs mean methylation in TSS\", subtitle = \"(min sites = 2)\", y = \"Mean CpG methylation %\") +\n  ylim(0, 100)+\n  geom_smooth(method=\"lm\")-&gt; tss_n_vs_meth_min2\n\ncowplot::plot_grid(tss_hist_min2, tss_n_vs_meth_min2, ncol = 2, align = \"hv\", axis = \"bl\") -&gt; tss_a_min2\ncowplot::plot_grid(tss_a_min2, across_genes_min2, ncol = 1, align = \"h\", axis = \"l\") -&gt; tss_sum_min2\n\nggsave(tss_sum_min2, file = \"plots/summary_wgbs_TSS_min2.png\", width=16, height=16)\n\n\n\n\n\nCpG methylation across gene regions"
  },
  {
    "objectID": "qmd/3_explore.html#summary-statistics",
    "href": "qmd/3_explore.html#summary-statistics",
    "title": "4  Data exploration",
    "section": "4.1 Summary statistics",
    "text": "4.1 Summary statistics\nWe start by collecting summary statistics per CpG site to check if methylation level is associated with coverage.\n\n\nCode\n#### Get summary statistics ####\n# select columns for specific data: number of sites that are methylated, coverage\n# number of columns in data\nncol &lt;- ncol(data) \n\n# first column with data respectively\nfirst_cov &lt;- 5\nfirst_meth_n &lt;- 6\n\n# select columns \ncols_cov &lt;- seq(first_cov, ncol-(2-(first_cov-5)), 3)\ncols_meth_n &lt;- seq(first_meth_n, ncol-(2-(first_meth_n-5)), 3)\n\n# make summary across all cpg sites\nsummary &lt;- data.frame(site = c(paste(data$chr, data$start, sep=\"_\")))\nsummary &lt;- summary %&gt;% mutate(mean_cov = rowMeans(data[cols_cov], na.rm=T),\n                              sd_cov = rowSds(as.matrix(data[cols_cov]), na.rm=T),\n                              mean_n_meth = rowMeans(data[cols_meth_n], na.rm=T),\n                              sd_n_meth = rowSds(as.matrix(data[cols_meth_n]), na.rm=T),\n                              na =  rowSums(is.na(data[cols_cov])),\n                              n =  rowSums(!is.na(data[cols_cov])))\n\n# calculate percentage methylation\nsum_meth_prop &lt;- data.frame(site = c(paste(data$chr, data$start, sep=\"_\")))\nfor (i in 1:length(cols_cov)){\n  sum_meth_prop &lt;- sum_meth_prop %&gt;% mutate(methProp = data[cols_meth_n[i]]/data[cols_cov[i]])\n  names(sum_meth_prop)[i+1] &lt;- ltet_meth_unite@sample.ids[i] \n}                              \n\n# add summary percentage methylation\nsummary &lt;- summary %&gt;% mutate(mean_perc_meth = rowMeans(sum_meth_prop[,-1], na.rm=T),\n                              sd_perc_meth = rowSds(as.matrix(sum_meth_prop[,-1]), na.rm=T), .before = mean_cov)\n\n\n# site to rownames\nsummary &lt;- summary %&gt;% remove_rownames %&gt;% column_to_rownames(var = \"site\")\n\n\nThe whole dataframe is very long, but we can check out the first 10 rows to see what the data look like:\n\n\n\n\n\nX\nmean_perc_meth\nsd_perc_meth\nmean_cov\nsd_cov\nmean_n_meth\nsd_n_meth\nna\nn\n\n\n\n\nScEsiA3_10002__HRSCAF_10935_92\n1.0000000\nNA\n11.00000\nNA\n11.0000000\nNA\n115\n1\n\n\nScEsiA3_10006__HRSCAF_10939_97\n0.8362985\n0.1392619\n17.14286\n9.3235493\n14.4761905\n8.9644802\n95\n21\n\n\nScEsiA3_1000__HRSCAF_1603_69\n1.0000000\n0.0000000\n10.33333\n0.5773503\n10.3333333\n0.5773503\n113\n3\n\n\nScEsiA3_1000__HRSCAF_1603_73\n0.0435897\n0.1383665\n12.76923\n2.1661735\n0.5384615\n1.6641006\n103\n13\n\n\nScEsiA3_1000__HRSCAF_1603_90\n0.0665976\n0.1105658\n15.76667\n4.6511647\n1.1000000\n2.0060254\n86\n30\n\n\nScEsiA3_1000__HRSCAF_1603_99\n0.9523810\n0.0824786\n11.33333\n2.3094011\n10.6666667\n1.1547005\n113\n3\n\n\nScEsiA3_1000__HRSCAF_1603_107\n0.0358021\n0.0438772\n43.53763\n31.4229766\n1.5806452\n1.9411033\n23\n93\n\n\nScEsiA3_1000__HRSCAF_1603_109\n0.0463004\n0.0457295\n43.51613\n31.4188440\n2.1075269\n2.3334168\n23\n93\n\n\nScEsiA3_1000__HRSCAF_1603_191\n0.0175915\n0.0336013\n43.52688\n31.4177987\n0.7096774\n1.1570262\n23\n93\n\n\nScEsiA3_1000__HRSCAF_1603_213\n0.0160323\n0.0356791\n43.50538\n31.4077752\n0.5698925\n1.0150803\n23\n93\n\n\n\n\n\n\n\nBelow you can find the histograms of the parameters calculated (mean methylation etc.)\n\n\nSummary statistics methylation"
  },
  {
    "objectID": "qmd/3_explore.html#coverage-vs-methylation",
    "href": "qmd/3_explore.html#coverage-vs-methylation",
    "title": "4  Data exploration",
    "section": "4.2 Coverage vs methylation",
    "text": "4.2 Coverage vs methylation\nNext, we can plot the relationship between mean coverage and mean DNA methylation per site. However, as there are many CpG sites we randomly subset 100,000 CpG sites to visualize, and also visualize the density of the points as it is difficult to see overlapping areas.\n\n#### Plot relationshp coverage and dna methylation #####\n\n# geom pointdensity to get an idea of which points are where since many are overlapping\n# on a subset of random CpGs\nrandom_n &lt;- 100000\nggplot(data=summary[sample(nrow(summary),random_n),], aes(x=mean_cov, y=mean_perc_meth)) + labs(x = \"Mean coverage\", y = \"Mean methylation percentage\") +\n  scale_x_continuous(trans = scales::log_trans(),\n                     breaks = scales::log_breaks()) +\n  geom_pointdensity()  +\n  scale_color_viridis_c() -&gt; plot_cov_meth \n\n\n\nRelationship coverage and mean methylation\n\n\n\nHere we see that there are many CpG sites with low average coverage and very low DNA methylation or very high DNA methylation. There is no obvious relationshp between the two, but there is some clustering going on (as expected)."
  },
  {
    "objectID": "qmd/3_explore.html#pca",
    "href": "qmd/3_explore.html#pca",
    "title": "4  Data exploration",
    "section": "4.3 PCA",
    "text": "4.3 PCA\nNext, we can conduct a PCA to visualize potential methodological biases towards methylation. We only use complete data to conduct the PCA, meaning we only include CpG sites that are covered in each sample.\n\n\nCode\n#### PCA ####\n# create dataset for PCA with only complete data\ndata_pca &lt;- data.frame(matrix(unlist(sum_meth_prop), nrow=nrow(sum_meth_prop)),stringsAsFactors=FALSE)\ndata_pca &lt;- data_pca[complete.cases(data_pca),] \nnrow(data_pca) \ndata_pca &lt;- data_pca[,-1]\ndata_pca &lt;- lapply(data_pca, as.numeric)\n\n# conduct pca and save plots\nPCA &lt;- prcomp(t(as.data.frame(data_pca)), center=F, scale=F) # t() transposes the matrix meth_PCA to get one coordinate for each id\n\n# get eigenvalues and percentage explained\neigs &lt;- PCA$sdev^2\nvar &lt;- eigs/sum(eigs)\nexplained&lt;-100*eigs/sum(eigs) #PC1 explains 97% of data\n\n# PCA coloured by library, site\n\n# first collect data required to plot the PCs\n\n# data on lek site, sampling \nload(\"data/phenotypes/fulldata_complete_epi_withdates.RData\")\nmeta_ltet &lt;- all_pheno_epi %&gt;% dplyr::select(c(epi_nr, id, site, prepost, year)) %&gt;% filter(!is.na(prepost))\n\n# data on QC\nload(file=\"/home/nioo/rebeccash/PhD_grouse/methylation_grouse/data/genomics/qc_epi.RData\")\n\nqc_ltet &lt;- qc %&gt;% dplyr::select(c(sample_id, Sample, lib, n_in_lib, conc_std, batch, extraction_batch))\nqc_ltet &lt;- subset(qc_ltet, Sample %in% meta_ltet$epi_nr)\n\n# exclude repeats\nqc_ltet &lt;- subset(qc_ltet, sample_id != \"lib99_1\")\nqc_ltet &lt;- subset(qc_ltet, sample_id != \"lib20_119\")\nqc_ltet &lt;- subset(qc_ltet, sample_id != \"lib20_191\")\nqc_ltet &lt;- subset(qc_ltet, sample_id != \"lib7_250\")\n\n# combine data with PC loadings\nmerge_pca &lt;- data.frame(sample_id = ltet_meth_unite@sample.ids)\nmerge_pca &lt;- left_join(merge_pca, qc_ltet, by = \"sample_id\")\nmerge_pca &lt;- left_join(merge_pca, meta_ltet, by = c(\"Sample\" = \"epi_nr\"))\nmerge_pca$pc1 &lt;- PCA$x[,1]\nmerge_pca$pc2 &lt;- PCA$x[,2]\n\n# and with mean methylation level\nsummary_per_sample &lt;- data.frame(sample_id = ltet_meth_unite@sample.ids)\nsummary_per_sample &lt;- summary_per_sample %&gt;% mutate(mean_perc_meth = colMeans(sum_meth_prop[,-1], na.rm=T))\n\nmerge_pca &lt;- left_join(merge_pca, summary_per_sample, by = \"sample_id\")\n\n# plot PCs\nggplot(merge_pca, aes(x = pc1, y = pc2)) + geom_point(size=3, aes(col = site)) + \n    labs(x = \"PC 1\", y = \"PC 2\", col = \"Lek site\") +\n    scale_color_viridis_d() -&gt; pca_site\n\nggplot(merge_pca, aes(x = pc1, y = pc2)) + geom_point(size=3, aes(col = prepost)) + \n    labs(x = \"PC 1\", y = \"PC 2\", col = \"Time period\") +\n    scale_color_viridis_d() -&gt; pca_prepost\n\nggplot(merge_pca, aes(x = pc1, y = pc2)) + geom_point(size=3, aes(col = as.factor(year))) + \n    labs(x = \"PC 1\", y = \"PC 2\", col = \"Year\") +\n    scale_color_viridis_d() -&gt; pca_year\n    \nggplot(merge_pca, aes(x = pc1, y = pc2)) + geom_point(size=3, aes(col = lib)) + \n    labs(x = \"PC 1\", y = \"PC 2\", col = \"Library\") +\n    scale_color_viridis_d() -&gt; pca_lib\n\nggplot(merge_pca, aes(x = pc1, y = pc2)) + geom_point(size=3, aes(col = as.factor(n_in_lib))) + \n    labs(x = \"PC 1\", y = \"PC 2\", subtitle = \"Sample within library\") +\n    theme(legend.position=\"none\")+\n    scale_color_viridis_d() -&gt; pca_lib_n\n\nmerge_pca$conc_std[which(merge_pca$conc_std &gt; 400)] &lt;- NA #outlier and must be wrong\n\nggplot(merge_pca, aes(x = pc1, y = pc2)) + geom_point(size=3, aes(col = conc_std)) + \n    labs(x = \"PC 1\", y = \"PC 2\", col = \"Concentration\") +\n    scale_color_viridis_c() -&gt; pca_conc\n\nggplot(merge_pca, aes(x = pc1, y = pc2)) + geom_point(size=3, aes(col = as.factor(batch))) + \n    labs(x = \"PC 1\", y = \"PC 2\", col = \"Batch\") +\n    scale_color_viridis_d() -&gt; pca_batch\n\nggplot(merge_pca, aes(x = pc1, y = pc2)) + geom_point(size=3, aes(col = as.factor(extraction_batch))) + \n    labs(x = \"PC 1\", y = \"PC 2\", col = \"Batch\") +\n    scale_color_viridis_d() -&gt; pca_batch_ext    \n\ncowplot::plot_grid(pca_site, pca_prepost, pca_year, pca_lib, pca_lib_n, pca_conc, pca_batch, pca_batch_ext,\n                  labs=\"auto\", align=\"hv\", axis=\"lb\", ncol=2, label_fontface = \"plain\", label_size = 22) -&gt; pca_plots\n\n\n\n\nPCA plots"
  },
  {
    "objectID": "qmd/3_explore.html#linear-mixed-effect-model",
    "href": "qmd/3_explore.html#linear-mixed-effect-model",
    "title": "4  Data exploration",
    "section": "4.4 Linear mixed effect model",
    "text": "4.4 Linear mixed effect model\nLastly, we want to make sure that average methylation percentage is not affected by library by conducting a LMM\n\n#### LM ####\nlmer_lib &lt;- lmerTest::lmer(mean_perc_meth ~ lib + (1|id), data = merge_pca)\nlmer_null  &lt;- lmerTest::lmer(mean_perc_meth ~ 1 + (1|id), data = merge_pca)\nanova(lmer_lib, lmer_null)\n\nrefitting model(s) with ML (instead of REML)\n\n\nData: merge_pca\nModels:\nlmer_null: mean_perc_meth ~ 1 + (1 | id)\nlmer_lib: mean_perc_meth ~ lib + (1 | id)\n          npar     AIC     BIC logLik deviance  Chisq Df Pr(&gt;Chisq)\nlmer_null    3 -399.71 -391.45 202.85  -405.71                     \nlmer_lib    12 -392.84 -359.80 208.42  -416.84 11.133  9     0.2667\n\n\nIt seems there are no library effects on average CpG methylation."
  },
  {
    "objectID": "qmd/4_filter.html#prepare-data",
    "href": "qmd/4_filter.html#prepare-data",
    "title": "5  Filtering",
    "section": "5.1 Prepare data",
    "text": "5.1 Prepare data\n\nltet_meth &lt;- methRead(files, pipeline = \"bismarkCytosineReport\",\n                      sample.id = ids, assembly = \"ltet\", \n                      treatment = c(rep(1, each =length(ids))), context = \"CpG\",\n                      sep = \" \")\n\nWhere files = the list of 116 file locations and ids = the list of the 116 ID’s of those files."
  },
  {
    "objectID": "qmd/4_filter.html#pre-filter-data",
    "href": "qmd/4_filter.html#pre-filter-data",
    "title": "5  Filtering",
    "section": "5.2 Pre-filter data",
    "text": "5.2 Pre-filter data\nNext, we perform a set of filtering steps. First, we filter by coverage, the maximum coverage to the 99.9 percentile\n\nltet_meth &lt;- filterByCoverage(ltet_meth,lo.count=10,lo.perc=NULL,\n                                    hi.count=NULL,hi.perc=99.9)   \n\nNext, we unite the strands. We do not filter yet for sites that are covered in at least X individuals as we will perform this filtering steps later in the script.\n\nltet_meth_unite &lt;- methylKit::unite(ltet_meth, destrand = TRUE, \n                                    min.per.group = 1L, mc.cores = 8)\n\nAt this stage, we have a data set consisting of 1,559,800 partially filtered CpG sites."
  },
  {
    "objectID": "qmd/4_filter.html#convert-data",
    "href": "qmd/4_filter.html#convert-data",
    "title": "5  Filtering",
    "section": "5.3 Convert data",
    "text": "5.3 Convert data\nThe next step is a custom R script that converts the output of the “unite” call to a long dataframe, where each line is a CpG site per individual and in the columns we have CpG site, nC, nT, cov, %meth. Moreover, in this script we remove CpG sites that are nonvariant, meaning that they are either 100% methylated in all samples or 0% methylated.\nWe also filter for CpG sites that are variable in at least X number of samples, where X is a threshold that can be defined within the formula. Right now I have used a threshold of 0.3, meaning that CpG sites that are 0% methylated or 100% methylated in more than 70% of the samples will be excluded. Although we exclude a large number of CpG sites in this filtering step, I think this is more correct and will allow the models to make more accurate estimates and will only include CpG sites with more variation in methylation %.\n\nsource(\"scripts/function_convert_methfile.R\")\n\nprepost_long &lt;- convert_meth(methfile = ltet_meth_unite, novar = \"remove\", threshold = 0.3) \n\n#Out of 1559800 CpG sites, kept 815460 which is 47.72% removed"
  },
  {
    "objectID": "qmd/4_filter.html#sec-postfilter",
    "href": "qmd/4_filter.html#sec-postfilter",
    "title": "5  Filtering",
    "section": "5.4 Post-filtering",
    "text": "5.4 Post-filtering\nBecause we have samples from two time points of individuals, and we want to compare the change across this time period, I applied a post-filtering steps to include only CpG sites that are included in at least 50% of the samples in both time points. Since we have 118 samples, which are 59 time comparisons (59 pre-lekking samples linked to 59 post-lekking samples), this means we have an N of at least 29 samples where at least 30% of these samples are not completely methylated or unmethylated (see step above), which I think is a good minimum to draw reliable conclusions.\n\n#count number of individuals per CpG per time point\nn_per_prepost &lt;- prepost_long %&gt;% \n  group_by(chr_pos, prepost) %&gt;% \n  summarise(count=n())\n\nn_per_prepost_wide &lt;-  spread(n_per_prepost, key=prepost,value=count)\n\ncolnames(n_per_prepost_wide)[2] &lt;- \"n_post\"\ncolnames(n_per_prepost_wide)[3] &lt;- \"n_pre\"\n\n#keep only if CpG site is covered in at least 50% of samples at both time points\nthres = 0.5\nn_per_prepost_wide &lt;- n_per_prepost_wide %&gt;% mutate(keep = as.factor(case_when(n_pre  &gt; thres*(118*0.5) & n_post &gt; thres*(118*0.5) ~ \"keep\")))\n\nsummary(n_per_prepost_wide$keep) # 354,649 CpG sites to keep\n\nprepost_long_clean &lt;- left_join(prepost_long, n_per_prepost_wide, by = c(\"chr_pos\"))\n\nprepost_long_clean &lt;- subset(prepost_long_clean, keep == \"keep\")\n\nThus, our fully filtered data set consists of 354,649 CpG sites that have been filtered to ensure: minimum coverage (to ensure more precision of methylation %), maximum coverage (to exclude potential PCR duplicates), variation in methylation % (to allow more accurate modelling) and enough samples in both time points (to draw reliable conclusions about temporal changes)."
  },
  {
    "objectID": "qmd/5_changing_meth.html#sec-change",
    "href": "qmd/5_changing_meth.html#sec-change",
    "title": "6  Changing CpG sites",
    "section": "6.1 Prepare the data",
    "text": "6.1 Prepare the data\n\n### load packages \npacman::p_load(tidyverse, data.table, tibble, performance, \n               parallel, lmerTest, tidystats)\n\n### load epi data\nload(file = \"data/processed/methylkit_prepost_long_onlyvar_thres0.3_min_0.5_group.RData\") \n\n### load phenotype data \nload(\"data/phenotypes/fulldata_complete_epi_withdates.RData\")\nprepost &lt;- subset(all_pheno_epi, !is.na(prepost)) #phenotype dataset also consists of other individuals not part of this study\n\n### merge with metadata\n\nprepost_long &lt;- left_join(prepost_long_clean, prepost[,c(\"id\", \"prepost\", \"Core\", \"year\", \"born\", \"site\", \"fulldate\")], \n                          by = c(\"id\", \"year\", \"fulldate\"))\n\n### add age data: core males have known full life histories, non-cores were not captured as yearlings\n\nprepost_long &lt;- prepost_long %&gt;% mutate(age_year = as.factor(case_when(Core == \"Core\" ~ year - born,\n                                                        Core == \"No core\" ~ NA)),\n                                        age = as.factor(case_when(Core == \"Core\" & (year - born &gt; 1) ~ \"Adult\",\n                                                        Core == \"Core\" & (year - born == 1) ~ \"Yearling\",\n                                                        Core == \"No core\" ~ \"Adult\")))\n\n### intuitively, we would want to have \"pre-lekking\" as the reference level and \"post-lekking\" being the level compared to \"pre\", so let's swap these\nprepost_long$prepost &lt;- factor(prepost_long$prepost, levels = c(\"pre\", \"post\"))\n\n### convert data to a list, one per CpG site\ndata &lt;- prepost_long %&gt;% group_split(chr_pos)"
  },
  {
    "objectID": "qmd/5_changing_meth.html#function-to-run-the-model",
    "href": "qmd/5_changing_meth.html#function-to-run-the-model",
    "title": "6  Changing CpG sites",
    "section": "6.2 Function to run the model",
    "text": "6.2 Function to run the model\nBelow you will find the full model used to 1) run the model in parallel per CpG site and 2) collect the output in a dataframe. Most importantly, this is the formula run for the model:\nlme4::glmer(cbind(numC, numT) ~ prepost + (1|id), family = \"binomial\")\n\n\nCode\n### define function to collect overdispersion statistics\noverdisp.lmer_fun &lt;- function(model) {\n  vpars &lt;- function(m) {\n    nrow(m)*(nrow(m)+1)/2\n  }\n  model.df &lt;- sum(sapply(VarCorr(model),vpars))+length(fixef(model))\n  rdf &lt;- nrow(model.frame(model))-model.df\n  rp &lt;- residuals(model,type=\"pearson\")\n  Pearson.chisq &lt;- sum(rp^2)\n  prat &lt;- Pearson.chisq/rdf\n  pval &lt;- pchisq(Pearson.chisq, df=rdf, lower.tail=FALSE)\n  data.frame(chisq=Pearson.chisq,ratio=prat,rdf=rdf,p=pval)\n}\n\n### build function to run the model\nfunction_model_glmer &lt;- function(df){tryCatch({\n  chr_pos &lt;- as.character(df[1,1])\n  df &lt;- as.data.frame(df)\n  df$prepost &lt;- as.factor(df$prepost)\n  df$id &lt;- as.factor(df$id)\n  \n  # model\n  model &lt;- lme4::glmer(cbind(numC, numT) ~ prepost + (1|id), family = \"binomial\", df)\n  \n  #fixed effects\n  prepost_estimate &lt;- summary(model)$coefficients[2,1]\n  prepost_se &lt;- summary(model)$coefficients[2,2]\n  prepost_zval &lt;- summary(model)$coefficients[2,3]\n  prepost_pval &lt;-  summary(model)$coefficients[2,4]\n  \n  #random effects \n  id_sd &lt;- attributes(VarCorr(model)$id)$stddev\n  id_variance &lt;- data.frame(VarCorr(model), comp=\"Variance\")[1,4]\n  \n  rsqc &lt;- performance::r2(model)$R2_conditional #fixed plus random effects relative to overall variance\n  rsqm &lt;- performance::r2(model)$R2_marginal #fixed effects relative to overall variance\n  \n  dispersion.chisq &lt;- overdisp.lmer_fun(model)[1,1]\n  dispersion.ratio &lt;- overdisp.lmer_fun(model)[1,2]\n  dispersion.rdf &lt;- overdisp.lmer_fun(model)[1,3]\n  dispersion.pval &lt;- overdisp.lmer_fun(model)[1,4]\n  \n  isSingular &lt;- isSingular(model)\n\n  if(is.null(summary(model)$optinfo$conv$lme4$messages )){\n    convergence &lt;- NA\n  }\n\n  if(!is.null(summary(model)$optinfo$conv$lme4$messages )){\n    convergence &lt;- summary(model)$optinfo$conv$lme4$messages\n  }\n  \n  icc_id &lt;- icc(model, by_group = TRUE, tolerance = 0)[1,2]\n  \n  return(data.frame(chr_pos=chr_pos, \n                    prepost_estimate = prepost_estimate,\n                    prepost_se = prepost_se,\n                    prepost_zval = prepost_zval,\n                    prepost_pval = prepost_pval,\n                    id_sd = id_sd,\n                    id_variance = id_variance,\n                    rsqc = rsqc,\n                    rsqm = rsqm,\n                    dispersion.chisq = dispersion.chisq,\n                    dispersion.ratio = dispersion.ratio,\n                    dispersion.rdf = dispersion.rdf,\n                    dispersion.pval = dispersion.pval,\n                    isSingular = isSingular,\n                    convergence = convergence,\n                    icc_id = icc_id\n                    ))\n}, error = function(e){cat(\"ERROR :\", conditionMessage(e), \"\\n\");print(chr_pos)})\n}"
  },
  {
    "objectID": "qmd/5_changing_meth.html#sec-changingcpg",
    "href": "qmd/5_changing_meth.html#sec-changingcpg",
    "title": "6  Changing CpG sites",
    "section": "6.3 Run the model",
    "text": "6.3 Run the model\nHere, we run the model in parallel, and next exclude CpG sites where there was overdispersion or convergence errors. After this filter step, we apply an FDR multiple-testing correction.\n\n### run the model in parallel per CpG site (list item)\nout_glmer &lt;- parallel::mclapply(data, function_model_glmer, mc.cores=4)\nout_glmer &lt;- do.call(rbind.data.frame, out_glmer)"
  },
  {
    "objectID": "qmd/5_changing_meth.html#exclude-models-that-did-not-convergence",
    "href": "qmd/5_changing_meth.html#exclude-models-that-did-not-convergence",
    "title": "6  Changing CpG sites",
    "section": "6.4 Exclude models that did not convergence",
    "text": "6.4 Exclude models that did not convergence\n\n#### Exclude models that did not converge ####\nout_glmer_raw_conv &lt;- subset(out_glmer_raw, convergence == \"boundary (singular) fit: see help('isSingular')\" | is.na(convergence))\nnrow(out_glmer_raw_conv) / nrow(out_glmer_raw) * 100 # retain 97.5%, 345937 out of 354765\n\nWhen excluding models with convergence warnings/errors, we retain 97% of models, 345,983 out of 354,765 CpG site models."
  },
  {
    "objectID": "qmd/5_changing_meth.html#explore-and-filter-for-overdispersion",
    "href": "qmd/5_changing_meth.html#explore-and-filter-for-overdispersion",
    "title": "6  Changing CpG sites",
    "section": "6.5 Explore and filter for overdispersion",
    "text": "6.5 Explore and filter for overdispersion\nWe can plot a histogram of the dispersion ratio and make a QQ plot to identify whether there is under/overdispersion and how to best filter for it.\n \nNext, we filter out the sites with an overdispersion ratio higher than the 95 percentile.\n\n## filter for 95 percentile\nout_glmer&lt;- subset(out_glmer_raw, dispersion.ratio &lt; as.vector(quantile(out_glmer_raw$dispersion.ratio, 0.95)))\n\nWe are then left with a total of 328,640 CpG site models."
  },
  {
    "objectID": "qmd/5_changing_meth.html#fdr-correction",
    "href": "qmd/5_changing_meth.html#fdr-correction",
    "title": "6  Changing CpG sites",
    "section": "6.6 FDR-correction",
    "text": "6.6 FDR-correction\nAfter excluding CpG site models with overdispersion, we apply a multiple-testing correction using the false discovery rate (FDR).\n\nout_glmer$prepost_qval &lt;- p.adjust(out_glmer$prepost_pval, method = \"fdr\", n = nrow(out_glmer))"
  },
  {
    "objectID": "qmd/5_changing_meth.html#filter-for-average-methylation-differences",
    "href": "qmd/5_changing_meth.html#filter-for-average-methylation-differences",
    "title": "6  Changing CpG sites",
    "section": "6.7 Filter for average methylation % differences",
    "text": "6.7 Filter for average methylation % differences\nA “changing CpG site” is then defined as a CpG site with a significant effect of time period (FDR-corrected q-value &lt; 0.05) and at a mean difference in methylation % (across individuals) of at least -10% or 10%.\nWe first have to calculate delta methylation (post-lekking methylation % minus pre-lekking methylation %) in order to get this average.\n\n\nCode\n### Calculate delta methylation by matching up pre-post ####\n\ndelta_meth &lt;- left_join(subset(prepost_long, prepost == \"pre\"),\n                            subset(prepost_long, prepost == \"post\")[,c(\"chr_pos\", \"lib_id\", \"epi_nr\", \"lib\", \"methperc\", \"cov\", \"id\", \"year\", \"fulldate\")],\n                            by = c(\"chr_pos\", \"id\", \"year\"), suffix = c(\"_pre\", \"_post\"))\n\ndelta_meth &lt;- delta_meth %&gt;% dplyr::select(-c(numC, numT, n_sample, prepost))\ndelta_meth &lt;- delta_meth %&gt;% relocate(c(id, year, born:age), .before=lib_id_pre)\n\ndelta_meth &lt;- delta_meth %&gt;% mutate(delta_meth = methperc_post - methperc_pre, .after =born)\ndelta_meth &lt;- delta_meth %&gt;% mutate(diff_date = fulldate_post - fulldate_pre)\ndelta_meth$diff_date &lt;- as.numeric(delta_meth$diff_date)\n\n# this file contains per CpG site the delta methylation levels per individual\n\n### Calculate average delta_meth per CpG site across individuals\n\nmean_delta_meth &lt;- delta_meth %&gt;% group_by(chr_pos) %&gt;% summarise_at(vars(delta_meth), funs(mean(., na.rm=TRUE)))\nnames(mean_delta_meth)[2] &lt;- \"mean_delta_meth\"\n\n\n\n### Combine mean delta methylation with the model output\nout_glmer &lt;- left_join(out_glmer, mean_delta_meth, by = \"chr_pos\")\n\n### Filter min absolute mean methylation of 10%\n\nsub_glmer_prepost &lt;- subset(out_glmer, prepost_qval &lt; 0.05 & abs(mean_delta_meth) &gt;= 0.1)\n\n### Save original data (per CpG site per individual) for models but only subset significant CpG sites\nchanging_cpg &lt;- subset(prepost_long, chr_pos %in% sub_glmer_prepost$chr_pos)\nsave(changing_cpg, file=\"results/modeloutput/changing/changing_sites_glmer.RData\")\n\n### Save the model output\nsave(out_glmer, file=\"results/modeloutput/changing/modeloutput_glmer.RData\")\n\nA total of 1,026 CpG sites significantly change across the lekking period."
  },
  {
    "objectID": "qmd/5_changing_meth.html#plotting",
    "href": "qmd/5_changing_meth.html#plotting",
    "title": "6  Changing CpG sites",
    "section": "6.8 Plotting",
    "text": "6.8 Plotting\n\n6.8.1 Volcano and Manhattan plots\nNext, we make a volcano plot to visualise the results.\n\n\nCode\nout_glmer &lt;- out_glmer %&gt;% mutate(sig = as.factor(case_when(abs(mean_delta_meth) &gt;= 0.1 & prepost_qval &lt; 0.05 ~ \"sig\", TRUE ~ \"nonsig\")))\n\nggplot(out_glmer, aes(x = mean_delta_meth, y = -log10(as.numeric(prepost_qval)))) + \n    geom_point(size=4, alpha=0.5, aes(col = as.factor(sig))) +\n    labs(x = expression(\"Mean \"*Delta*\" methylation %\"), y = \"-log10(q-value)\") +\n    scale_color_manual(values=c(\"grey60\", clrs[4])) +\n    geom_hline(yintercept = -log10(0.05), col = \"darkred\", linetype = \"dotted\", linewidth = 1) +\n    geom_vline(xintercept = -0.1, col = \"darkred\", linetype = \"dotted\", linewidth = 1) +\n    geom_vline(xintercept = 0.1, col = \"darkred\", linetype = \"dotted\", linewidth = 1) +\n    theme(legend.position=\"none\") -&gt; volcano_change\n\n\n\n\n\nVolcano plot changing CpG sites\n\n\nInterestingly, there seems to more CpG sites that increase in methylation over time compared to CpG sites that decrease in methylation over time (807 CpG sites increase, 219 decrease in methylation %).\nWe can also look at the distribution of CpG sites across the genome in a Manhattan plot.\n\n\nCode\nload(\"data/scaffold_names_dovetail.RData\")\n\n# Split the chr_pos column into two columns based on the first \"_\"\nsplit_chr_pos &lt;- strsplit(out_glmer$chr_pos, \"_\", fixed = TRUE)\n\n# Extract the numbers following HRSCAF=XXX_number\nout_glmer$chr &lt;- paste0(sapply(split_chr_pos, \"[\", 1), \"_\",\n                             sapply(split_chr_pos, \"[\", 2), \";\", \n                             sapply(split_chr_pos, \"[\", 4), \"=\",\n                             sapply(split_chr_pos, \"[\", 5))\n\nout_glmer$pos &lt;- as.numeric(sapply(split_chr_pos, \"[\", 6))\n\n# join\nout_glmer &lt;- left_join(out_glmer, genome[,c(\"contig\", \"scaf_nr\")], by = c(\"chr\" = \"contig\"))\n\n# plot \n# lmer\ntest &lt;- sample_n(out_glmer, 100)\nout_glmer &lt;- out_glmer %&gt;% mutate(col = case_when(scaf_nr %% 2 == 0 ~ \"even\",\n                                        TRUE ~ \"odd\"))\n\nshade &lt;- out_glmer %&gt;%\n  subset(scaf_nr &lt;= 30) %&gt;%\n  group_by(scaf_nr) %&gt;%\n  summarise(min = min(pos), max = max(pos)) %&gt;%\n  mutate(min = case_when(scaf_nr == 2 | scaf_nr == 4 | scaf_nr == 6 | scaf_nr == 8 | scaf_nr == 10 |\n                          scaf_nr == 12 | scaf_nr == 14 | scaf_nr == 16 | scaf_nr == 18 | scaf_nr == 20 |\n                          scaf_nr == 22 | scaf_nr == 24 | scaf_nr == 26 | scaf_nr == 28 | scaf_nr == 30 ~ 0,\n                         TRUE ~ min)) %&gt;%\n  mutate(max = case_when(scaf_nr == 2 | scaf_nr == 4 | scaf_nr == 6 | scaf_nr == 8 | scaf_nr == 10 |\n                          scaf_nr == 12 | scaf_nr == 14 | scaf_nr == 16 | scaf_nr == 18 | scaf_nr == 20 |\n                          scaf_nr == 22 | scaf_nr == 24 | scaf_nr == 26 | scaf_nr == 28 | scaf_nr == 30  ~ 0,\n                         TRUE ~ max))\n                                        \nclrs &lt;- viridisLite::viridis(6)\nout_glmer %&gt;% subset(scaf_nr &lt;= 30) %&gt;% \n  ggplot(aes(x = pos, y = -log10(as.numeric(prepost_pval)))) + \n    geom_point(size=5, alpha=0.5, aes(col = as.factor(col), fill = as.factor(col))) +\n    facet_grid(~scaf_nr,scales = 'free_x', space = 'free_x', switch = 'x') +\n    labs(x = \"Scaffold number\", y = expression(-log[10]*\"(p-value)\")) +\n    #geom_rect(data=shade, aes(xmin=min, xmax=max, ymin=0, ymax=-log10(as.numeric(test$prepost_pval))), \n    #        alpha=0.5, fill = \"#eceff4\") + # \"#f7f7f7\" \"#eceff4\"\n    #xlim(-1, 1)+\n    scale_color_manual(values=c(clrs[2], clrs[4])) +\n    scale_fill_manual(values=alpha(c(clrs[2], clrs[4]), 0.5)) +\n    geom_hline(yintercept = -log10(0.05/nrow(out_glmer)), col = \"darkred\", linetype = \"dotted\", linewidth = 1) +\n    theme(axis.text.x = element_blank(),\n    panel.spacing = unit(0, \"lines\"),\n    plot.margin = margin(r = 0.5, l = 0.1, b = 0.1, t = 0.1, unit = \"cm\"),\n    axis.line.x = element_blank(),\n    legend.position=\"none\",\n    axis.title.x = element_text(margin=margin(t=10)),\n    axis.title.y = element_text(margin=margin(r=5)),\n    axis.ticks.x = element_blank(),\n    axis.line.y = element_blank()) -&gt; manhattan_change\n\n\n\n\n\nManhattan plot\n\n\n\n\n6.8.2 Raw data\nTo assess whether the models performed well, I also plotted the raw data of the five most significantly changing CpG sites.\n\n# raw plot for the 1st significant CpG site, repeat for the other 4 and combine with cowplot\n#| code-fold: true\nout_glmer &lt;- out_glmer %&gt;% arrange(prepost_qval)\n\nsubset(changing_cpg, chr_pos == out_glmer$chr_pos[1]) %&gt;%\n  arrange(id, year) %&gt;%\n  ggplot(., aes(x = prepost, y = methperc))+\n  geom_boxplot(linewidth=1, outlier.shape=NA) + \n  geom_path(aes(group = id_year), alpha = 0.8, col = \"grey60\", position = position_jitter(width = 0.1, seed = 3922)) +\n  geom_point(aes(alpha = 0.8, size=cov), col = clrs[4], position = position_jitter(width = 0.1, seed = 3922)) + \n  labs(x = \"Time period\", y = \"Methylation percentage\", subtitle = out_glmer$chr_pos[1]) +\n  theme(legend.position=\"none\") +\n  ylim(0,1)\n\n\n\n\nRaw data top 5 significantly changing CpG sites"
  },
  {
    "objectID": "qmd/5_changing_meth.html#annotation",
    "href": "qmd/5_changing_meth.html#annotation",
    "title": "6  Changing CpG sites",
    "section": "6.9 Annotation",
    "text": "6.9 Annotation\n\n6.9.1 Based on black grouse annotation\nNext, we annotate in which regions these changing CpG sites are located in based on the black grouse annotation.\n\n\nCode\n#### Annotation of changing CpG sites: gene regions #####\n\n### Packages ####\npacman::p_load(genomation, GenomicFeatures, rtracklayer, \n               GenomicRanges)\n\n\n### Combine all sites vs changing sites\ncpg_all &lt;- out_glmer %&gt;% dplyr::select(c(chr_pos, prepost_qval))\nnames(cpg_all)[2] &lt;- \"parameter_qval\"\ncpg_all$parameter &lt;- \"all\"\n\ncpg_changing_select &lt;- changing_cpg %&gt;% dplyr::select(c(chr_pos, prepost_qval))\nnames(cpg_changing_select)[2] &lt;- \"parameter_qval\"\ncpg_changing_select$parameter &lt;- \"time_period\"\n\nall_models_sig &lt;- rbind(cpg_all, cpg_changing_select)\n\n### Rename chr_pos and divide ###\nall_models_sig$chr_pos &lt;- gsub(\"__\", \";\", all_models_sig$chr_pos)\nall_models_sig$chr_pos &lt;- gsub(\"HRSCAF_\", \"HRSCAF=\", all_models_sig$chr_pos, )\n\n# Extract the numbers following HRSCAF=XXX_number\n# Split the chr_pos column into two columns based on the first \"_\"\nsplit_chr_pos &lt;- strsplit(all_models_sig$chr_pos, \"_\", fixed = TRUE)\n\nall_models_sig$chr &lt;- paste0(sapply(split_chr_pos, \"[\", 1), \"_\",\n                             sapply(split_chr_pos, \"[\", 2))\n\nall_models_sig$pos &lt;- sapply(split_chr_pos, \"[\", 3)\n\nall_models_sig &lt;- all_models_sig %&gt;% \n  relocate(chr, .after = chr_pos) %&gt;%\n  relocate(pos, .after = chr_pos)\n\n#revert scafnames\nall_models_sig$chr_pos &lt;- gsub(\";\",\"__\", all_models_sig$chr_pos)\nall_models_sig$chr_pos &lt;- gsub(\"HRSCAF=\", \"HRSCAF_\", all_models_sig$chr_pos)\n\nall_models_sig$chr &lt;- gsub(\";\",\"__\", all_models_sig$chr)\nall_models_sig$chr &lt;- gsub(\"HRSCAF=\", \"HRSCAF_\", all_models_sig$chr)\n\n### Load annotation data\nannotation_dir &lt;- \"~/PhD_grouse/grouse-annotation/output\"\n\npromoter=unique(gffToGRanges(paste0(annotation_dir, \"/promoters.gff3\")))\ngenes=unique(gffToGRanges(paste0(annotation_dir, \"/genes.gff3\")))\nTSS=unique(gffToGRanges(paste0(annotation_dir, \"/TSS.gff3\")))\nexons_gene=unique(gffToGRanges(paste0(annotation_dir, \"/exons_gene.gff3\")))\nintrons=unique(gffToGRanges(paste0(annotation_dir, \"/introns_transcripts.gff3\")))\ndownstream=unique(gffToGRanges(paste0(annotation_dir, \"/downstream.gff3\")))\nupstream=unique(gffToGRanges(paste0(annotation_dir, \"/upstream.gff3\")))\nthreeUTR =unique(gffToGRanges(paste0(annotation_dir, \"/threeUTRs.gff3\")))\nfiveUTR=unique(gffToGRanges(paste0(annotation_dir, \"/fiveUTRs.gff3\")))\n\n#### Annotate ####\nall_models_sig$end &lt;- all_models_sig$pos\nall_models_sig$start &lt;- all_models_sig$pos\nsig_gr &lt;- as(all_models_sig, \"GRanges\")\n\nsig_promoter &lt;- subsetByOverlaps(sig_gr, promoter) %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"promoter\", .after=\"parameter\") %&gt;% \n  dplyr::select(-c(seqnames:strand)) \n\nsig_gene &lt;- as.data.frame(subsetByOverlaps(sig_gr, genes)) %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"gene\", .after=\"parameter\") %&gt;% \n  dplyr::select(-c(seqnames:strand)) \n\nsig_tss &lt;- as.data.frame(subsetByOverlaps(sig_gr, TSS)) %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"TSS\", .after=\"parameter\") %&gt;%\n  dplyr::select(-c(seqnames:strand)) \n\nsig_exon &lt;- as.data.frame(subsetByOverlaps(sig_gr, exons_gene)) %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"exon\", .after=\"parameter\") %&gt;% \n  dplyr::select(-c(seqnames:strand)) \n\nsig_intron &lt;- as.data.frame(subsetByOverlaps(sig_gr, introns))  %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"intron\", .after=\"parameter\") %&gt;% \n  dplyr::select(-c(seqnames:strand)) \n\nsig_down &lt;- as.data.frame(subsetByOverlaps(sig_gr, downstream)) %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"downstream\", .after=\"parameter\") %&gt;% \n  dplyr::select(-c(seqnames:strand)) \n\nsig_up &lt;- as.data.frame(subsetByOverlaps(sig_gr, upstream))  %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"upstream\", .after=\"parameter\") %&gt;% \n  dplyr::select(-c(seqnames:strand)) \n\nsig_threeUTR &lt;- as.data.frame(subsetByOverlaps(sig_gr, threeUTR))  %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"threeUTR\", .after=\"parameter\") %&gt;% \n  dplyr::select(-c(seqnames:strand)) \n\nsig_fiveUTR &lt;- as.data.frame(subsetByOverlaps(sig_gr, fiveUTR))  %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"fiveUTR\", .after=\"parameter\") %&gt;% \n  dplyr::select(-c(seqnames:strand)) \n\nall_models_sig_annotated &lt;- rbind(sig_promoter, sig_gene,\n                                  sig_tss, sig_exon, sig_intron, sig_down,\n                                  sig_up, sig_threeUTR,  sig_fiveUTR)\n\n\n#### Summarise number of sites per region ####\nsum_annotated &lt;- as.data.frame(table(as.factor(all_models_sig_annotated$region), all_models_sig_annotated$parameter))\nnames(sum_annotated) &lt;- c(\"region\", \"model\", \"n\")\n\nsum_annotated$model &lt;- gsub(\"all\", \"All\", sum_annotated$model)\nsum_annotated$model &lt;- gsub(\"time_period\", \"Time period\", sum_annotated$model)\n\nsum_annotated$region &lt;- gsub(\"downstream\", \"Downstream\", sum_annotated$region)\nsum_annotated$region &lt;- gsub(\"upstream\", \"Upstream\", sum_annotated$region)\nsum_annotated$region &lt;- gsub(\"exon\", \"Exon\", sum_annotated$region)\nsum_annotated$region &lt;- gsub(\"fiveUTR\", \"5' UTR\", sum_annotated$region)\nsum_annotated$region &lt;- gsub(\"gene\", \"Gene body\", sum_annotated$region)\nsum_annotated$region &lt;- gsub(\"intron\", \"Intron\", sum_annotated$region)\nsum_annotated$region &lt;- gsub(\"promoter\", \"Promoter\", sum_annotated$region)\nsum_annotated$region &lt;- gsub(\"threeUTR\", \"3' UTR\", sum_annotated$region)\n\nsum_annotated$region &lt;- factor(sum_annotated$region, levels = c(\"3' UTR\", \"5' UTR\", \"Downstream\", \"Upstream\", \"Gene body\", \"Exon\", \"Intron\", \"Promoter\", \"TSS\"))\n\n# add total sig CpGs\nsum_annotated &lt;- sum_annotated %&gt;% mutate(n_total = case_when(\n  model == \"All\" ~ 354649,\n  model == \"Time period\" ~ nrow(cpg_change)))\n\nsum_annotated &lt;- sum_annotated %&gt;% mutate(perc = n / n_total * 100)\n\n\n\n\n\n\n\n\nregion\nmodel\nn\nn_total\nperc\n\n\n\n\nDownstream\nAll\n46035\n328640\n14.007729\n\n\nExon\nAll\n35384\n328640\n10.766796\n\n\nIntron\nAll\n32876\n328640\n10.003651\n\n\nPromoter\nAll\n61077\n328640\n18.584774\n\n\nTSS\nAll\n22620\n328640\n6.882911\n\n\nUpstream\nAll\n39079\n328640\n11.891127\n\n\nDownstream\nTime period\n142\n1026\n13.840156\n\n\nExon\nTime period\n103\n1026\n10.038986\n\n\nIntron\nTime period\n154\n1026\n15.009747\n\n\nPromoter\nTime period\n138\n1026\n13.450292\n\n\nTSS\nTime period\n33\n1026\n3.216374\n\n\nUpstream\nTime period\n146\n1026\n14.230019\n\n\n\n\n\n\n\n\n\n\nNumber of changing CpG sites per region\n\n\n\n\n6.9.2 GOrilla\nWe next run the list of gene IDs of the significant sites as the target list as well as the list of gene IDs from all CpG sites that we ran the model on as a background list. I used default settings and the analysis was done based on a human model (Homo sapiens). The result can be seen below.\n\nlibrary(readxl)\ntable_go_function_changing &lt;- read_excel(\"../results/modeloutput/changing/GOFUNCTION_changing_similar.xlsx\")\n\ntable_go_function_changing %&gt;% select(-Genes) %&gt;% filter(grepl(\"^GO\", table_go_function_changing$`GO Term`)) %&gt;% kbl() %&gt;%  kable_classic_2() %&gt;%  scroll_box(width = \"99%\", height = \"200px\")\n\n\n\n\n\nGO Term\nDescription\nP-value\nFDR q-value\nEnrichment\nN\nB\nn\nb\n\n\n\n\nGO:0000987\nproximal promoter sequence-specific DNA binding\n5.48e-05\n0.1980\n1.88\n7404\n438\n368\n41\n\n\nGO:0000981\nDNA-binding transcription factor activity, RNA polymerase II-specific\n5.54e-05\n0.1000\n1.85\n7404\n468\n368\n43\n\n\nGO:0003700\nDNA-binding transcription factor activity\n5.82e-05\n0.0703\n1.83\n7404\n484\n368\n44\n\n\nGO:0001012\nRNA polymerase II regulatory region DNA binding\n1.04e-04\n0.0939\n1.78\n7404\n496\n368\n44\n\n\nGO:0000977\nRNA polymerase II regulatory region sequence-specific DNA binding\n1.04e-04\n0.0751\n1.78\n7404\n496\n368\n44\n\n\nGO:1990837\nsequence-specific double-stranded DNA binding\n1.58e-04\n0.0952\n1.69\n7404\n583\n368\n49\n\n\nGO:0000978\nRNA polymerase II proximal promoter sequence-specific DNA binding\n1.82e-04\n0.0943\n1.82\n7404\n432\n368\n39\n\n\nGO:0000976\ntranscription regulatory region sequence-specific DNA binding\n1.95e-04\n0.0884\n1.71\n7404\n541\n368\n46\n\n\nGO:0001067\nregulatory region nucleic acid binding\n2.13e-04\n0.0855\n1.70\n7404\n543\n368\n46\n\n\nGO:0044212\ntranscription regulatory region DNA binding\n2.13e-04\n0.0770\n1.70\n7404\n543\n368\n46\n\n\nGO:0043565\nsequence-specific DNA binding\n2.79e-04\n0.0919\n1.63\n7404\n629\n368\n51\n\n\nGO:0003690\ndouble-stranded DNA binding\n3.39e-04\n0.1020\n1.63\n7404\n618\n368\n50\n\n\nGO:0140110\ntranscription regulator activity\n4.01e-04\n0.1120\n1.55\n7404\n753\n368\n58\n\n\n\n\n\n\ntable_go_process_changing &lt;- read_excel(\"../results/modeloutput/changing/GOPROCESS_changing_similar.xlsx\")\n\ntable_go_process_changing %&gt;% select(-Genes) %&gt;% filter(grepl(\"^GO\", table_go_process_changing$`GO Term`)) %&gt;% kbl() %&gt;%  kable_classic_2() %&gt;%  scroll_box(width = \"99%\", height = \"200px\")\n\n\n\n\n\nGO Term\nDescription\nP-value\nFDR q-value\nEnrichment\nN\nB\nn\nb\n\n\n\n\nGO:1903506\nregulation of nucleic acid-templated transcription\n1.00e-05\n0.1310\n1.47\n7404\n1439\n368\n105\n\n\nGO:0006355\nregulation of transcription, DNA-templated\n1.00e-05\n0.0655\n1.47\n7404\n1439\n368\n105\n\n\nGO:2001141\nregulation of RNA biosynthetic process\n1.10e-05\n0.0481\n1.47\n7404\n1442\n368\n105\n\n\nGO:0051252\nregulation of RNA metabolic process\n4.84e-05\n0.1590\n1.40\n7404\n1580\n368\n110\n\n\nGO:2000026\nregulation of multicellular organismal development\n7.55e-05\n0.1980\n1.55\n7404\n937\n368\n72\n\n\nGO:0006357\nregulation of transcription by RNA polymerase II\n8.39e-05\n0.1840\n1.49\n7404\n1092\n368\n81\n\n\nGO:0001708\ncell fate specification\n1.43e-04\n0.2670\n4.42\n7404\n41\n368\n9\n\n\nGO:0050793\nregulation of developmental process\n1.68e-04\n0.2750\n1.45\n7404\n1166\n368\n84\n\n\nGO:1903508\npositive regulation of nucleic acid-templated transcription\n2.38e-04\n0.3470\n1.57\n7404\n771\n368\n60\n\n\nGO:0045893\npositive regulation of transcription, DNA-templated\n2.38e-04\n0.3120\n1.57\n7404\n771\n368\n60\n\n\nGO:1902680\npositive regulation of RNA biosynthetic process\n2.46e-04\n0.2940\n1.56\n7404\n772\n368\n60\n\n\nGO:0007399\nnervous system development\n2.48e-04\n0.2710\n2.45\n7404\n156\n368\n19\n\n\nGO:0051094\npositive regulation of developmental process\n4.42e-04\n0.4460\n1.61\n7404\n625\n368\n50\n\n\nGO:0022603\nregulation of anatomical structure morphogenesis\n4.53e-04\n0.4250\n1.68\n7404\n514\n368\n43\n\n\nGO:0019219\nregulation of nucleobase-containing compound metabolic process\n4.67e-04\n0.4090\n1.32\n7404\n1741\n368\n114\n\n\nGO:0045664\nregulation of neuron differentiation\n5.60e-04\n0.4600\n1.86\n7404\n335\n368\n31\n\n\nGO:0009953\ndorsal/ventral pattern formation\n6.60e-04\n0.5090\n4.54\n7404\n31\n368\n7\n\n\nGO:0045944\npositive regulation of transcription by RNA polymerase II\n6.80e-04\n0.4960\n1.62\n7404\n572\n368\n46\n\n\nGO:0030154\ncell differentiation\n7.72e-04\n0.5330\n1.47\n7404\n891\n368\n65\n\n\nGO:0051241\nnegative regulation of multicellular organismal process\n8.23e-04\n0.5400\n1.65\n7404\n513\n368\n42\n\n\nGO:0016477\ncell migration\n9.06e-04\n0.5660\n1.77\n7404\n375\n368\n33\n\n\n\n\n\n\n\nInterestingly, there’s a lot of GO terms that are related to gene regulation - fitting the story perfectly! Moreover, the component that was highly significant is the “chylomicron”.\nWikipedia: “Chylomicrons transport lipids absorbed from the intestine to adipose, cardiac, and skeletal muscle tissue, where their triglyceride components are hydrolyzed by the activity of the lipoprotein lipase, allowing the released free fatty acids to be absorbed by the tissues. When a large portion of the triglyceride core has been hydrolyzed, chylomicron remnants are formed and are taken up by the liver, thereby also transferring dietary fat to the liver.”"
  },
  {
    "objectID": "qmd/6_effort_meth.html#pre-methylation-vs-delta-methylation",
    "href": "qmd/6_effort_meth.html#pre-methylation-vs-delta-methylation",
    "title": "7  Effort-associated CpG sites",
    "section": "7.1 Pre-methylation vs delta methylation",
    "text": "7.1 Pre-methylation vs delta methylation\nPrior to the analysis, we investigated the relationship between delta methylation and pre-lekking methylation levels. We expect that pre-lekking methylation levels can affect delta methylation %. If pre-lekking methylation is 0%, there is potential for +100% change, but if pre-lekking methylation is 100%, there is potential for -100% change. On the other hand, if pre-lekking methylation is 50%, there is only potential for -50% and +50% change. Thus, we expect a U-shaped relationship between pre-lekking and absolute delta methylation. I plot the empirical data for this, based on only the CpG sites that significantly change across the lekking period. The red line in the left plot is the (linear) regression while correcting for id as a random effect (so a lmer output).\n\n\nPre-lekking vs delta lekking methylation %\n\n\n\nThere does seem to be some association between the two, yet we might mask the effect of delta methylation on the phenotype if we include pre-lekking methylation in the model too. Therefore, we run two models in parallel: one that does include pre-lekking methylation % and one that does not, and then compare the model output / inference based on these two models. Note: for the manuscript we might want to choose for one in the main text and present the other in the supplements (although the exact CpG sites change, the conclusion that little is going on remains the same)"
  },
  {
    "objectID": "qmd/6_effort_meth.html#sec-effort",
    "href": "qmd/6_effort_meth.html#sec-effort",
    "title": "7  Effort-associated CpG sites",
    "section": "7.2 Prepare the data",
    "text": "7.2 Prepare the data\n\n\nCode\n### load packages\npacman::p_load(tidyverse, data.table, tibble, gaston,\n               parallel, performance, lmerTest, tidystats, ggpointdensity)\n               \nsource(\"scripts/plotting_theme.R\")\n\n### load data epi\n\nload(file=\"results/modeloutput/changing/changing_sites_glmer.RData\")\n\n### load phenotypic data\n\nload(file = \"data/phenotypes/fulldata_complete_epi_withdates.RData\")\n\n### methylation difference\n\nload(file = \"results/modeloutput/all_sites_deltameth.RData\")\n\ndelta_meth &lt;- subset(delta_meth, chr_pos %in% changing_cpg$chr_pos)\n\n### combine delta methylation data with site and behaviour info\n\ndelta_meth &lt;- left_join(delta_meth, unique(all_pheno_epi[,c(\"id\", \"year\", \"site\", \"Core\")], by = c(\"id\", \"year\")))\n\n### z-transform the traits before the model that subsets IDs and years where there is\n### data for that CpG site\n\neffort &lt;- all_pheno_epi %&gt;% dplyr::select(c(\"id\", \"year\", \"attend\", \"fight\", \"dist\", \"MS\")) %&gt;% filter(!is.na(attend)) %&gt;% unique()\n\neffort &lt;- subset(effort, id %in% delta_meth$id)\n\neffort$attend_scl &lt;- scale(effort$attend)\neffort$fight_scl &lt;- scale(effort$fight)\neffort$dist_scl &lt;- scale(effort$dist)\n\n### combine reproductive effort data with methylation data\n\ndelta_meth &lt;- left_join(delta_meth, effort[,c(\"id\", \"year\", \"attend\", \"fight\", \"dist\", \"attend_scl\", \"fight_scl\", \"dist_scl\")], by = c(\"id\", \"year\"))\n\n\nNote that we z-transform the phenotypic data based on all samples, rather than on a model-by-model basis. This is because not all individuals will have epigenetic data for each CpG site, meaning that the z-transformed version of the phenotypic traits would change depending on the sample size, which we want to avoid."
  },
  {
    "objectID": "qmd/6_effort_meth.html#filter-for-n-20",
    "href": "qmd/6_effort_meth.html#filter-for-n-20",
    "title": "7  Effort-associated CpG sites",
    "section": "7.3 Filter for n > 20",
    "text": "7.3 Filter for n &gt; 20\nAlthough we have filtered for CpG sites that have enough samples in both the pre- and post-lekking time periods, this does not mean that it was the same pair of samples that have data in both time periods. This means that we cannot outrule that we have a low sample size for delta methylation (where both pre- and post-lekking methylations for a given individual for a given CpG site had to be complete) differences that can be associated with phenotypic traits. Therefore, before we run the models, we filter for CpG sites that have at least 20 measures of delta methylation (and the phenotype). Since not all data is complete for all three behavioural traits, we do this on a trait-by-trait basis\n\n### only select cpg sites with enough data\ndelta_meth_n_dist &lt;- delta_meth %&gt;% group_by(chr_pos) %&gt;% filter(!is.na(delta_meth)& !is.na(dist)) %&gt;% tally()\ndelta_meth_n_dist &lt;- subset(delta_meth_n_dist, n &gt; 20)\n \ndelta_meth_sub_dist &lt;- subset(delta_meth, chr_pos %in% delta_meth_n_dist$chr_pos)\nlength(unique(delta_meth_sub_dist$chr_pos)) # 760 sites\n\ndelta_meth_dist_ls &lt;- delta_meth_sub_dist %&gt;% group_split(chr_pos)\n\n# repeat for attendance and fighting rate\n\nAt this stage, we have the 1,026 CpG sites."
  },
  {
    "objectID": "qmd/6_effort_meth.html#sec-model-trait",
    "href": "qmd/6_effort_meth.html#sec-model-trait",
    "title": "7  Effort-associated CpG sites",
    "section": "7.4 Function to run the model",
    "text": "7.4 Function to run the model\nYou can find the full function below, but importantly this is the LMM formula I run for each CpG site for each trait:\nlmgerTest::lmer(delta_meth ~ scale(trait) + methperc_pre + (1|site/id))\nWithin the function, we can define if we want to include pre-lekking methylation % or not by setting the ‘pre’ arument to “control” or “no_control” respectively.\n\n\nCode\n# function to run the model\nfunction_model_delta &lt;- function(df, parameter, pre){tryCatch({\n  chr_pos &lt;- as.character(df[1,1])\n  df &lt;- as.data.frame(df)\n  df$methperc_pre_scl &lt;- scale(df$methperc_pre)\n\n  if (pre == \"control\"){\n  formula &lt;- formula(paste0(\"delta_meth ~ \", parameter, \"_scl + methperc_pre + (1|site/id) \"))}\n\n  if (pre == \"no_control\"){\n  formula &lt;- formula(paste0(\"delta_meth ~ \", parameter, \"_scl + (1|site/id) \"))}\n  \n  model &lt;- lmerTest::lmer(formula, data=df)\n  summary &lt;- summary(model)\n  \n  overdisp.lmer_fun &lt;- function(model) {\n    vpars &lt;- function(m) {\n      nrow(m)*(nrow(m)+1)/2\n    }\n    model.df &lt;- sum(sapply(VarCorr(model),vpars))+length(fixef(model))\n    rdf &lt;- nrow(model.frame(model))-model.df\n    rp &lt;- residuals(model,type=\"pearson\")\n    Pearson.chisq &lt;- sum(rp^2)\n    prat &lt;- Pearson.chisq/rdf\n    pval &lt;- pchisq(Pearson.chisq, df=rdf, lower.tail=FALSE)\n    data.frame(chisq=Pearson.chisq,ratio=prat,rdf=rdf,p=pval)\n  }\n  \n  intercept = summary$coefficients[\"(Intercept)\", \"Estimate\"]\n\n  #fixed effect\n  parameter_estimate &lt;- summary$coefficients[2,1]\n  parameter_se &lt;- summary$coefficients[2,2]\n  parameter_df &lt;- summary$coefficients[2,3]\n  parameter_tval &lt;- summary$coefficients[2,4]\n  parameter_pval &lt;- summary$coefficients[2,5]\n\n  if (pre == \"control\"){\n  #premeth effect\n    pre_estimate &lt;- summary$coefficients[\"methperc_pre\", \"Estimate\"]\n    pre_se &lt;- summary$coefficients[\"methperc_pre\", \"Std. Error\"]\n    pre_df &lt;- summary$coefficients[\"methperc_pre\", \"df\"]\n    pre_tval &lt;- summary$coefficients[\"methperc_pre\", \"t value\"]\n    pre_pval &lt;- summary$coefficients[\"methperc_pre\", \"Pr(&gt;|t|)\"]\n    }\n\n  if (pre == \"no_control\"){\n    pre_estimate &lt;- NA\n    pre_se &lt;- NA\n    pre_df &lt;- NA\n    pre_tval &lt;- NA\n    pre_pval &lt;- NA\n    }\n  \n  rsqc &lt;- performance::r2(model)$R2_conditional #fixed plus random parameterects relative to overall variance\n  rsqm &lt;- performance::r2(model)$R2_marginal #fixed parameterects relative to overall variance\n  \n  dispersion.chisq &lt;- overdisp.lmer_fun(model)[1,1]\n  dispersion.ratio &lt;- overdisp.lmer_fun(model)[1,2]\n  dispersion.rdf &lt;- overdisp.lmer_fun(model)[1,3]\n  dispersion.pval &lt;- overdisp.lmer_fun(model)[1,4]\n  \n  isSingular &lt;- isSingular(model)\n\n  if(is.null(summary(model)$optinfo$conv$lme4$messages )){\n    convergence &lt;- NA\n  }\n\n  if(!is.null(summary(model)$optinfo$conv$lme4$messages )){\n    convergence &lt;- summary(model)$optinfo$conv$lme4$messages\n  }\n\n  icc_id_site &lt;-icc(model, by_group = TRUE, tolerance = 0)[1,2]\n  icc_site &lt;-icc(model, by_group = TRUE, tolerance = 0)[2,2]\n  \n  return(data.frame(chr_pos=as.factor(chr_pos),\n                    parameter = as.factor(parameter),\n                    intercept = as.numeric(intercept),\n                    icc_id_site = as.numeric(icc_id_site),\n                    icc_site = as.numeric(icc_site),\n                    parameter_estimate = as.numeric(parameter_estimate),\n                    parameter_se = as.numeric(parameter_se),\n                    parameter_df = as.numeric(parameter_df),\n                    parameter_tval = as.numeric(parameter_tval),\n                    parameter_pval = as.numeric(parameter_pval),\n                    pre_estimate = as.numeric(pre_estimate),\n                    pre_se = as.numeric(pre_se),\n                    pre_df = as.numeric(pre_df),\n                    pre_tval = as.numeric(pre_tval),\n                    pre_pval = as.numeric(pre_pval),\n                    rsqc = as.numeric(rsqc),\n                    rsqm = as.numeric(rsqm),\n                    dispersion.chisq = as.numeric(dispersion.chisq),\n                    dispersion.ratio = as.numeric(dispersion.ratio),\n                    dispersion.rdf = as.numeric(dispersion.rdf),\n                    dispersion.pval = as.numeric(dispersion.pval),\n                    isSingular = as.logical(isSingular),\n                    convergence = convergence\n                    \n  ))\n}, error = function(e){cat(\"ERROR :\", conditionMessage(e), \"\\n\");print(paste0(chr_pos, \" \", conditionMessage(e)))})\n}"
  },
  {
    "objectID": "qmd/6_effort_meth.html#run-the-model-per-trait",
    "href": "qmd/6_effort_meth.html#run-the-model-per-trait",
    "title": "7  Effort-associated CpG sites",
    "section": "7.5 Run the model per trait",
    "text": "7.5 Run the model per trait\n\nsource(\"scripts/function_models.R\") \n# the function function_model_delta_pheno runs the model\n# the function function_process_model contains a collector function that puts all data in a dataframe, excludes models with convergence errors,\n# plots overdispersion, optionally filters for overdispersion (95 percentile), applies an FDR-correction,\n# makes a volcano plot, and saves all these data\n\nIn this function, we do the following (in this order):\n*Convert the list into a dataframe data &lt;- do.call(rbind.data.frame, list)\n*Exclude models with convergence errors data &lt;- subset(data, !grepl(\"converge\", convergence))\n*Create histograms of the overdispersion ratio and p-value ggplot(data, aes(x = dispersion.ratio)) + geom_histogram()\nggplot(data, aes(x = parameter_pval))+ geom_histogram()\n*Optionally exclude models with an overdispersion ratio higher than the 95 percentile (not done for any as there was no overdispersion)\n*FDR correction data$parameter_qval &lt;- p.adjust(data$parameter_pval, method = \"fdr\", n = nrow(data))\n\nCreate a volcano plot where the model beta estimate is on the x-axis ggplot(data, aes(x = parameter_estimate, y = -log10(parameter_qval))) + geom_point(aes(col = sig))\n\n\n7.5.1 Attendance\n808 CpG sites had enough phenotypic and epigenetic data to run the attendance model (after filtering for n &gt; 20).\n\n7.5.1.1 With pre-lekking\n\n\nCode\nm_attend_pre &lt;- parallel::mclapply(delta_meth_attend_ls, function_model_delta_pheno, parameter=\"attend\", pre=\"control\", mc.cores=4)\nm_attend_pre_out &lt;- function_process_model(m_attend_pre, dir_plots = \"plots/model_out/effort\", dir_data = \"results/modeloutput/effort\",\n                                            name_file = \"attend_with_pre\", pretty_name = \"Attendance\", filter_disp=FALSE) # n sig = 3\n\n\n    \nCpG site “ScEsiA3_17655__HRSCAF_20552_371333” is located in an upstream region (gene ID ANN24887, similar to GPR87).\n\n\n\n\n\n\nNote\n\n\n\n\n\nGPR87: This gene encodes a G protein-coupled receptor and is located in a cluster of G protein-couple receptor genes on chromosome 3. The encoded protein has been shown to be overexpressed in lung squamous cell carcinoma (PMID:18057535) and regulated by p53 (PMID:19602589). [provided by RefSeq, Nov 2011]\n\n\n\nCpG site “ScEsiA3_18278__HRSCAF_21663_133779007” is located in the exon of ANN06029 (similar to Adck2) and upstream from ANN06028 (closer) and ANN06030 (both unknown functions). This is the same CpG site that is associated with changes in body mass (when including pre-lekking meth %)!\n\n\n\n\n\n\nNote\n\n\n\n\n\nAdck2: This gene AarF Domain Containing Kinase 2 is predicted to enable ATP binding activity and protein serine/threonine kinase activity. Predicted to be involved in protein phosphorylation. Predicted to be integral component of membrane. [provided by Alliance of Genome Resources, Apr 2022]\n\n\n\nCpG site “ScEsiA3_18752__HRSCAF_22883_2574288” is located in upstream from gene ID ANN31167 (similar to PPP2R2A) and downstream from gene ID ANN31166 (unknown function, closer).\n\n\n\n\n\n\nNote\n\n\n\n\n\nPPP2R2A: The product of this gene belongs to the phosphatase 2 regulatory subunit B family. Protein phosphatase 2 is one of the four major Ser/Thr phosphatases, and it is implicated in the negative control of cell growth and division. It consists of a common heteromeric core enzyme, which is composed of a catalytic subunit and a constant regulatory subunit, that associates with a variety of regulatory subunits. The B regulatory subunit might modulate substrate selectivity and catalytic activity. This gene encodes an alpha isoform of the regulatory subunit B55 subfamily. Alternatively spliced transcript variants have been described. [provided by RefSeq, Apr 2010]\n\n\n\n\n\n7.5.1.2 Without pre-lekking\n\n\nCode\nm_attend_no_pre &lt;- parallel::mclapply(delta_meth_ls, function_model_delta_pheno, parameter=\"attend\", pre=\"no_control\", mc.cores=4)\nm_attend_no_pre_out &lt;- function_process_model(m_attend_no_pre, dir_plots = \"plots/model_out/effort\", dir_data = \"results/modeloutput/effort\",\n                                            name_file = \"attend_no_pre\", pretty_name = \"Attendance\", filter_disp=FALSE) # n sig = 0\n\n\n\n\nHistogram dispersion and p-value: attendance no pre-methylation\n\n\n\n\n\nVolcano plot: attendance no pre-methylation\n\n\n\n\n\n\n7.5.2 Fighting\n466 CpG sites had enough phenotypic and epigenetic data to run the fighting model (after filtering for n &gt; 20).\n\n7.5.2.1 Without pre-lekking\n\n\nCode\nm_fight_pre &lt;- parallel::mclapply(delta_meth_fight_ls, function_model_delta_pheno, parameter=\"fight\", pre=\"control\", mc.cores=4)\nm_fight_pre_out &lt;- function_process_model(m_fight_pre, dir_plots = \"plots/model_out/effort\", dir_data = \"results/modeloutput/effort\",\n                                            name_file = \"fight_with_pre\", pretty_name = \"Centrality\", filter_disp=FALSE) # n sig = 3\n\n\n\n\nHistogram dispersion and p-value: fighting rate with pre-methylation\n\n\n\n\n\nVolcano plot: fighting rate with pre-methylation\n\n\n\n\n\nRaw data: fighting rate with pre-methylation CpG 1\n\n\n\n\n\nRaw data: fighting rate with pre-methylation CpG 2\n\n\n\n\n\nRaw data: fighting rate with pre-methylation CpG 3\n\n\n\nCpG site “ScEsiA3_15486__HRSCAF_17393_6262304” is located in the exon of gene ID ANN19413 (similar to RHOF) and upstream from gene ID ANN19414 (similar to Rad9a).\n\n\n\n\n\n\nNote\n\n\n\n\n\nRHOF: Ras Homolog Family Member F, Filopodia Associated. Predicted to enable GTP binding activity; GTPase activity; and protein kinase binding activity. Involved in actin filament organization. Located in extracellular exosome. [provided by Alliance of Genome Resources, Apr 2022]\nRad9a: This gene product is highly similar to Schizosaccharomyces pombe rad9, a cell cycle checkpoint protein required for cell cycle arrest and DNA damage repair. This protein possesses 3’ to 5’ exonuclease activity, which may contribute to its role in sensing and repairing DNA damage. It forms a checkpoint protein complex with RAD1 and HUS1. This complex is recruited by checkpoint protein RAD17 to the sites of DNA damage, which is thought to be important for triggering the checkpoint-signaling cascade. Alternatively spliced transcript variants encoding different isoforms have been found for this gene. [provided by RefSeq, Aug 2011]\n\n\n\nCpG site “ScEsiA3_18290__HRSCAF_21698_5473558” is located in an upstream region (gene ID ANN29135, similar to SLC38A10).\n\n\n\n\n\n\nNote\n\n\n\n\n\nSLC38A10: Predicted to enable amino acid transmembrane transporter activity. Predicted to be involved in amino acid transmembrane transport. Predicted to act upstream of or within bone development. Located in Golgi apparatus. [provided by Alliance of Genome Resources, Apr 2022]\n\n\n\nCpG site “ScEsiA3_21978__HRSCAF_26928_5532732” is located in an intronic region of gene ID ANN24560 (similar to Jup) and upstream region of gene IDs ANN24559 (similar to TRAK1) and ANN24561 similar to Fkbp10.\n\n\n\n\n\n\nNote\n\n\n\n\n\nJUP: This gene encodes a major cytoplasmic protein which is the only known constituent common to submembranous plaques of both desmosomes and intermediate junctions. This protein forms distinct complexes with cadherins and desmosomal cadherins and is a member of the catenin family since it contains a distinct repeating amino acid motif called the armadillo repeat. Mutation in this gene has been associated with Naxos disease. Alternative splicing occurs in this gene; however, not all transcripts have been fully described. [provided by RefSeq, Jul 2008]\nTRAK1: Predicted to enable GABA receptor binding activity and myosin binding activity. Involved in endosome to lysosome transport. Located in early endosome and mitochondrion. Implicated in developmental and epileptic encephalopathy 68. [provided by Alliance of Genome Resources, Apr 2022]\nFkbp10: The protein encoded by this gene belongs to the FKBP-type peptidyl-prolyl cis/trans isomerase (PPIase) family. This protein localizes to the endoplasmic reticulum and acts as a molecular chaperone. Alternatively spliced variants encoding different isoforms have been reported, but their biological validity has not been determined.[provided by RefSeq, Nov 2009]\n\n\n\n\n\n7.5.2.2 Without pre-lekking\n\n\nCode\nm_fight_no_pre &lt;- parallel::mclapply(delta_meth_ls, function_model_delta_pheno, parameter=\"fight\", pre=\"no_control\", mc.cores=4)\nm_fight_no_pre_out &lt;- function_process_model(m_fight_no_pre, dir_plots = \"plots/model_out/effort\", dir_data = \"results/modeloutput/effort\",\n                                            name_file = \"fight_no_pre\", pretty_name = \"Fighting\", filter_disp=FALSE) # 0 sig\n\n\n\n\nHistogram dispersion and p-value: fighting rate no pre-methylation\n\n\n\n\n\nVolcano plot: fighting rate no pre-methylation\n\n\n\n\n\n\n7.5.3 Centrality\n760 CpG sites had enough phenotypic and epigenetic data to run the centrality model (after filtering for n &gt; 20).\n\n7.5.3.1 With pre-lekking\n\n\nCode\nm_dist_pre &lt;- parallel::mclapply(delta_meth_ls, function_model_delta_pheno, parameter=\"dist\", pre=\"control\", mc.cores=4)\nm_dist_pre_out &lt;- function_process_model(m_dist_pre, dir_plots = \"plots/model_out/effort\", dir_data = \"results/modeloutput/effort\",\n                                            name_file = \"dist_with_pre\", pretty_name = \"Centrality\", filter_disp=FALSE) # n sig = 1 \n\n\n\n\nHistogram dispersion and p-value: centrality with pre-methylation\n\n\n\n\n\nVolcano plot: centrality with pre-methylation\n\n\n\n\n\nRaw data: centrality with pre-methylation CpG 1\n\n\n\nCpG site “ScEsiA3_21979__HRSCAF_26929_1282292” is located in an upstream region (gene ID ANN27654 similar to NFIC). Note that this is the same site that is significantly associated with delta IgG!!\n\n\n\n\n\n\nNote\n\n\n\n\n\nNFIC: The protein encoded by this gene belongs to the CTF/NF-I family. These are dimeric DNA-binding proteins, and function as cellular transcription factors and as replication factors for adenovirus DNA replication. Alternatively spliced transcript variants encoding different isoforms have been described for this gene. [provided by RefSeq, Oct 2011]\n\n\n\n\n\n\n7.5.4 Without pre-lekking\n\n\nCode\nm_dist_no_pre &lt;- parallel::mclapply(delta_meth_ls, function_model_delta_pheno, parameter=\"dist\", pre=\"no_control\", mc.cores=4)\nm_dist_no_pre_out &lt;- function_process_model(m_dist_no_pre, dir_plots = \"plots/model_out/effort\", dir_data = \"results/modeloutput/effort\",\n                                            name_file = \"dist_no_pre\", pretty_name = \"Centrality\", filter_disp=FALSE) # n sig = 1\n\n\nThis CpG site is the same one that was significant as the model run with pre-methylation.\n\n\nHistogram dispersion and p-value: centrality no pre-methylation\n\n\n\n\n\nVolcano plot: centrality no pre-methylation\n\n\n\n\n\nRaw data: centrality no pre-methylation CpG 1\n\n\n\nThis is the same CpG site that was significant in the model with pre-lekking methylation %"
  },
  {
    "objectID": "qmd/6_effort_meth.html#concluding-remarks",
    "href": "qmd/6_effort_meth.html#concluding-remarks",
    "title": "7  Effort-associated CpG sites",
    "section": "7.6 Concluding remarks",
    "text": "7.6 Concluding remarks\nSo it seems like very litte CpG methylation changes are associated with reproductive effort. When we do not control for pre-lekking methylation %, we don’t find anything significant for attendance and fighting rate, and we find the same single CpG significant for centrality that is significant in the model where we do control for pre-lekking methylation. We find 3, 3, and 1 significant CpG site for lek attendance, fighting rate and centrality respectively in the models where we do control for pre-lekking methylation."
  },
  {
    "objectID": "qmd/7_physio_meth.html#sec-physio",
    "href": "qmd/7_physio_meth.html#sec-physio",
    "title": "8  Physio-associated CpG sites",
    "section": "8.1 Prepare the data",
    "text": "8.1 Prepare the data\n\n\nCode\n### load packages\npacman::p_load(tidyverse, data.table, tibble, \n               parallel, performance, lmerTest, tidystats)\n\n### load data\n\nload(file=\"results/modeloutput/changing/changing_sites_glmer.RData\")\n\n### load phenotypic data\n\nload(\"data/phenotypes/fulldata_complete_epi_withdates.RData\")\n\nload(\"data/phenotypes/pheno_dif_prepost.RData\")  ## differences in physiology\n\n### combine delta methylation data with site and behaviour info\n\ndelta_meth &lt;- left_join(delta_meth, unique(all_pheno_epi[,c(\"id\", \"year\", \"site\", \"Core\")], by = c(\"id\", \"year\")))\n\n### z-transform the traits before the model\nprepost_dif$mass_dif_scl &lt;- scale(prepost_dif$mass_dif)\nprepost_dif$microf_dif_scl &lt;- scale(prepost_dif$microf_dif)\nprepost_dif$trypa_dif_scl &lt;- scale(prepost_dif$trypa_dif)\nprepost_dif$ig_dif_scl &lt;- scale(prepost_dif$ig_dif)\nprepost_dif$hct_dif_scl &lt;- scale(prepost_dif$hct_dif)\n\n### combine data with pre-post delta physio numbers\ndelta_meth &lt;- left_join(delta_meth, unique(prepost_dif[,c(\"id\", \"year\", \"mass_dif\", \"microf_dif\", \"trypa_dif\", \"ig_dif\", \"hct_dif\",\n                        \"mass_dif_scl\", \"microf_dif_scl\", \"trypa_dif_scl\", \"ig_dif_scl\", \"hct_dif_scl\")], by = c(\"id\", \"year\")))"
  },
  {
    "objectID": "qmd/7_physio_meth.html#function-to-run-the-model",
    "href": "qmd/7_physio_meth.html#function-to-run-the-model",
    "title": "8  Physio-associated CpG sites",
    "section": "8.2 Function to run the model",
    "text": "8.2 Function to run the model\nBelow you’ll find the function ran per trait per CpG site, where the LMM ran follows this structure:\nlmerTest::lmer(delta_meth ~ scale(delta_trait) + methperc_pre + (1|site/id))\nThis model is identical to the one presented in Section 7.4, except that the trait in question is also a calculation of the difference in the trait (delta; e.g. delta mass) rather than just one measure (e.g. attendance)."
  },
  {
    "objectID": "qmd/7_physio_meth.html#run-the-model-per-trait",
    "href": "qmd/7_physio_meth.html#run-the-model-per-trait",
    "title": "8  Physio-associated CpG sites",
    "section": "8.3 Run the model per trait",
    "text": "8.3 Run the model per trait\nHere too, we only include CpG sites if they have at least 20 data points, which is therefore done for physiological trait separately. I’ll give the code for one trait only (delta mass) but the exact same is done for the rest.\n\n\nCode\n### run the model per trait\nsource(\"scripts/function_models.R\") \n\n### only select cpg sites with enough data\ndelta_meth_n_mass &lt;- delta_meth %&gt;% group_by(chr_pos) %&gt;% filter(!is.na(delta_meth)& !is.na(mass_dif)) %&gt;% tally()\ndelta_meth_n_mass &lt;- subset(delta_meth_n_mass, n &gt; 20)\n \ndelta_meth_sub_mass &lt;- subset(delta_meth, chr_pos %in% delta_meth_n_mass$chr_pos)\nlength(unique(delta_meth_sub_mass$chr_pos)) #808 sites\n\ndelta_meth_sub_mass_ls &lt;- delta_meth_sub_mass %&gt;% group_split(chr_pos)\n\n### mass\n\n### no pre ####\nm_mass_no_pre &lt;- parallel::mclapply(delta_meth_sub_mass_ls, function_model_delta_pheno, parameter=\"mass_dif\", pre=\"no_control\", mc.cores=4)\nm_mass_no_pre_out &lt;- function_process_model(m_mass_no_pre, dir_plots = \"plots/model_out/physio/mass\", dir_data = \"results/modeloutput/physio\",name_file = \"mass_dif_no_pre\", pretty_name = \"Delta mass\", filter_disp=FALSE) \n\n### with pre ####\nm_mass_with_pre &lt;- parallel::mclapply(delta_meth_sub_mass_ls, function_model_delta_pheno, parameter=\"mass_dif\", pre=\"control\", mc.cores=4)\nm_mass_with_pre_out &lt;- function_process_model(m_mass_with_pre, dir_plots = \"plots/model_out/physio/mass\", dir_data = \"results/modeloutput/physio\",name_file = \"mass_dif_with_pre\", pretty_name = \"Delta mass\", filter_disp=FALSE) \n\n\n\n8.3.1 Delta mass\n808 CpG sites had enough phenotypic and epigenetic data to run the body mass model (after filtering for n &gt; 20).\n\n8.3.1.1 With pre-lekking\n\n\nHistogram dispersion and p-value: delta mass with pre-methylation\n\n\n\n\n\nVolcano plot: delta mass with pre-methylation\n\n\n\n\n\nRaw data: delta mass with pre-methylation CpG 1\n\n\n\n\n\nRaw data: delta mass with pre-methylation CpG 2\n\n\n\nCpG site “ScEsiA3_17616__HRSCAF_20466_3956821” is located downstream from gene IDs ANN28634 (similar to BPI) and ANN28635 (similar to ID1, closer).\n\n\n\n\n\n\nNote\n\n\n\n\n\nBPI: BPI (Bactericidal Permeability Increasing Protein) is a Protein Coding gene. Diseases associated with BPI include Meningococcemia and Reactive Arthritis. Among its related pathways are Innate Immune System and Toll Like Receptor 3 (TLR3) Cascade. Gene Ontology (GO) annotations related to this gene include lipid binding and lipopolysaccharide binding. An important paralog of this gene is LBP.\nID1: The protein encoded by this gene is a helix-loop-helix (HLH) protein that can form heterodimers with members of the basic HLH family of transcription factors. The encoded protein has no DNA binding activity and therefore can inhibit the DNA binding and transcriptional activation ability of basic HLH proteins with which it interacts. This protein may play a role in cell growth, senescence, and differentiation. Two transcript variants encoding different isoforms have been found for this gene. [provided by RefSeq, Jul 2008]\n\n\n\nCpG site “ScEsiA3_18278__HRSCAF_21663_133779007” is located in the exon of ANN06029 (similar to Adck2) and upstream from ANN06028 and ANN06030 (both unknown functions). This CpG site is the same that is significantly associated with attendance rate where we include pre-lekking methylation % in the model (!).\n\n\n8.3.1.2 Without pre-lekking\n\n\nHistogram dispersion and p-value: delta mass without pre-methylation\n\n\n\n\n\nVolcano plot: delta mass without pre-methylation\n\n\n\n\n\nRaw data: delta mass without pre-methylation CpG 1\n\n\n\n\n\nRaw data: delta mass without pre-methylation CpG 2\n\n\n\n\n\nRaw data: delta mass without pre-methylation CpG 3\n\n\n\n\n\nRaw data: delta mass without pre-methylation CpG 4\n\n\n\n\n\nRaw data: delta mass without pre-methylation CpG 5\n\n\n\nOne of the significant 5 CpG sites overlaps with the model that does include pre-methylation %.\nCpG site “ScEsiA3_15486__HRSCAF_17393_53786697” is located in an intron (gene ID ANN20472 similar to Six4).\n\n\n\n\n\n\nNote\n\n\n\n\n\nSix4: This gene encodes a member of the homeobox family, subfamily SIX. The drosophila homolog is a nuclear homeoprotein required for eye development. Studies in mouse show that this gene product functions as a transcription factor, and may have a role in the differentiation or maturation of neuronal cells. [provided by RefSeq, May 2010]\n\n\n\nCpG site “ScEsiA3_17616__HRSCAF_20466_3956821” is located in a downstream region (gene ID ANN28634, similar to BPI, and ANN28635 similar to ID1). (see above)\nCpG site “ScEsiA3_18752__HRSCAF_22883_4031831” is located in an intron (gene ID ANN31264 similar to TET3).\n\n\n\n\n\n\nNote\n\n\n\n\n\nTET3: Enables methyl-CpG binding activity and zinc ion binding activity. Involved in histone H3-K4 trimethylation; positive regulation of transcription by RNA polymerase II; and protein O-linked glycosylation. Predicted to be located in cytoplasm and male pronucleus. Predicted to be active in nucleus. Biomarker of esophagus squamous cell carcinoma. [provided by Alliance of Genome Resources, Apr 2022]\n\n\n\nCpG site “ScEsiA3_21976__HRSCAF_26926_4403331” is located upstream from ANN30833 (similar to IFI27) and downstream from gene ID ANN30832 (similar to Kiaa0319l, closer).\n\n\n\n\n\n\nNote\n\n\n\n\n\nIFI27: Enables RNA polymerase II-specific DNA-binding transcription factor binding activity; identical protein binding activity; and lamin binding activity. Involved in several processes, including cellular protein metabolic process; defense response to other organism; and extrinsic apoptotic signaling pathway. Acts upstream of or within negative regulation of transcription by RNA polymerase II and regulation of protein export from nucleus. Located in mitochondrial membrane and nuclear inner membrane. [provided by Alliance of Genome Resources, Apr 2022]\nKiaa0319l: Predicted to act upstream of or within several processes, including flagellated sperm motility; proacrosomal vesicle fusion; and receptor-mediated endocytosis of virus by host cell. Located in Golgi apparatus; cytoplasmic vesicle; and nucleolus. [provided by Alliance of Genome Resources, Apr 2022]\n\n\n\n\n\n\n8.3.2 Microfilaria spp.\n149 CpG sites had enough phenotypic and epigenetic data to run the Microfilaria model (after filtering for n &gt; 20).\n\n8.3.2.1 With pre-lekking\n\n\nHistogram dispersion and p-value: delta Microfilaria spp. with pre-methylation\n\n\n\n\n\nVolcano plot: delta Microfilaria spp. with pre-methylation\n\n\n\n\n\nRaw data: delta Microfilaria spp. with pre-methylation CpG 1\n\n\n\n\n\nRaw data: delta Microfilaria spp. with pre-methylation CpG 2\n\n\n\n\n\nRaw data: delta Microfilaria spp. with pre-methylation CpG 3\n\n\n\nCpG site “ScEsiA3_16766__HRSCAF_19082_28300178” was unannotated and CpG site “ScEsiA3_16771__HRSCAF_19097_2512626” is located in an exon of gene ID ANN30965 (similar to JAM3).\n\n\n\n\n\n\nNote\n\n\n\n\n\nJAM3: Tight junctions represent one mode of cell-to-cell adhesion in epithelial or endothelial cell sheets, forming continuous seals around cells and serving as a physical barrier to prevent solutes and water from passing freely through the paracellular space. The protein encoded by this immunoglobulin superfamily gene member is localized in the tight junctions between high endothelial cells. Unlike other proteins in this family, the this protein is unable to adhere to leukocyte cell lines and only forms weak homotypic interactions. The encoded protein is a member of the junctional adhesion molecule protein family and acts as a receptor for another member of this family. A mutation in an intron of this gene is associated with hemorrhagic destruction of the brain, subependymal calcification, and congenital cataracts. Alternative splicing results in multiple transcript variants.[provided by RefSeq, Apr 2011]\n\n\n\nCpG site “ScEsiA3_21978__HRSCAF_26928_6268951” is located in a TSS (gene id ANN24632 similar to PPP1R1B) and upstream region (gene ID ANN24631 similar to STARD3).\n\n\n\n\n\n\nNote\n\n\n\n\n\nPPP1R1B: This gene encodes a bifunctional signal transduction molecule. Dopaminergic and glutamatergic receptor stimulation regulates its phosphorylation and function as a kinase or phosphatase inhibitor. As a target for dopamine, this gene may serve as a therapeutic target for neurologic and psychiatric disorders. Multiple transcript variants encoding different isoforms have been found for this gene. [provided by RefSeq, Oct 2011]\nSTARD3: This gene encodes a member of a subfamily of lipid trafficking proteins that are characterized by a C-terminal steroidogenic acute regulatory domain and an N-terminal metastatic lymph node 64 domain. The encoded protein localizes to the membranes of late endosomes and may be involved in exporting cholesterol. Alternative splicing results in multiple transcript variants.[provided by RefSeq, Oct 2009]\n\n\n\n\n\n8.3.2.2 Without pre-lekking\n\n\nHistogram dispersion and p-value: delta Microfilaria spp. without pre-methylation\n\n\n\n\n\nVolcano plot: delta Microfilaria spp. without pre-methylation\n\n\n\n\n\nRaw data: delta Microfilaria spp. without pre-methylation CpG 1\n\n\n\nThis is not the same site that was significant in the model with pre-lekking methylation.\nThis CpG site was unannotated.\n\n\n\n8.3.3 Trypanosoma spp.\n164 CpG sites had enough phenotypic and epigenetic data to run the Trypanosoma model (after filtering for n &gt; 20).\n\n8.3.3.1 With pre-lekking\n\n\nHistogram dispersion and p-value: delta Trypanosoma spp. with pre-methylation\n\n\n\n\n\nVolcano plot: delta trypailaria spp. with pre-methylation\n\n\n\n\n\n8.3.3.2 Without pre-lekking\n\n\nHistogram dispersion and p-value: delta trypailaria spp. without pre-methylation\n\n\n\n\n\nVolcano plot: delta trypailaria spp. without pre-methylation\n\n\n\n\n\n\n8.3.4 IgG\n775 CpG sites had enough phenotypic and epigenetic data to run the IgG model (after filtering for n &gt; 20).\n\n8.3.4.1 With pre-lekking\n\n\nHistogram dispersion and p-value: delta IgG with pre-methylation\n\n\n\n\n\nVolcano plot: delta IgG with pre-methylation\n\n\n\n\n\nRaw data: delta IgG with pre-methylation CpG 1\n\n\n\n\n\nRaw data: delta IgG with pre-methylation CpG 2\n\n\n\nBoth CpG site “ScEsiA3_21979__HRSCAF_26929_1282292” (gene ID ANN27654 similar to NFIC) and “ScEsiA3_21979__HRSCAF_26929_1282301” (gene ID ANN27654 similar to NFIC) are located in upstream regions. The first one is the same site that was associated with centrality!\n\n\n8.3.4.2 Without pre-lekking\n\n\nHistogram dispersion and p-value: delta IgG without pre-methylation\n\n\n\n\n\nVolcano plot: delta IgG without pre-methylation\n\n\n\n\n\nRaw data: delta IgG without pre-methylation CpG 1\n\n\n\n\n\nRaw data: delta IgG without pre-methylation CpG 2\n\n\n\nThese were the exact same CpG sites that are significant compared to the model that did include pre-methylation levels.\n\n\n\n8.3.5 HCT\n146 CpG sites had enough phenotypic and epigenetic data to run the HCT model (after filtering for n &gt; 20).\n\n8.3.5.1 With pre-lekking\n\n\nHistogram dispersion and p-value: delta HCT with pre-methylation\n\n\n\n\n\nVolcano plot: delta HCT with pre-methylation\n\n\n\n\n\nRaw data: delta HCT with pre-methylation CpG 1\n\n\n\nCpG site “ScEsiA3_15486__HRSCAF_17393_15878140” is located in a promoter region (gene ID ANN19643 similar to GAL: Galanin peptides (C. japonica)).\n\n\n\n\n\n\nNote\n\n\n\n\n\nGAL: This gene encodes a neuroendocrine peptide that is widely expressed in the central and peripheral nervous systems and also the gastrointestinal tract, pancreas, adrenal gland and urogenital tract. The encoded protein is a precursor that is proteolytically processed to generate two mature peptides: galanin and galanin message-associated peptide (GMAP). Galanin has diverse physiological functions including nociception, feeding and energy homeostasis, osmotic regulation and water balance. GMAP has been demonstrated to possess antifungal activity and hypothesized to be part of the innate immune system. [provided by RefSeq, Jul 2015]\n\n\n\n\n\n8.3.5.2 Without pre-lekking\n\n\nHistogram dispersion and p-value: delta HCT without pre-methylation\n\n\n\n\n\nVolcano plot: delta HCT without pre-methylation"
  },
  {
    "objectID": "qmd/8_fitness_meth.html#prepare-the-data",
    "href": "qmd/8_fitness_meth.html#prepare-the-data",
    "title": "9  Fitness effects",
    "section": "9.1 Prepare the data",
    "text": "9.1 Prepare the data\n\n### load packages\npacman::p_load(tidyverse, data.table, tibble, performance, matrixStats, \n               parallel, performance, lmerTest, tidystats, insight, glmmTMB)\n\n### load data\n\nload(file = \"results/modeloutput/subset_sites_sig_deltameth.RData\")\n\n### load phenotypic data\n\nload(\"data/phenotypes/fulldata_complete_epi_withdates.RData\")\n\n#combine with site and fitness data\npheno_pre &lt;- subset(all_pheno_epi, prepost==\"pre\")\n\ndelta_meth &lt;- left_join(delta_meth, unique(pheno_pre[,c(\"id\", \"year\", \"MS\", \"surv\")]), by = c(\"id\", \"year\"))\n                                           \ndelta_meth_ls &lt;- delta_meth %&gt;% group_split(chr_pos)"
  },
  {
    "objectID": "qmd/8_fitness_meth.html#function-to-run-the-model",
    "href": "qmd/8_fitness_meth.html#function-to-run-the-model",
    "title": "9  Fitness effects",
    "section": "9.2 Function to run the model",
    "text": "9.2 Function to run the model\nBelow you’ll find the full function to run the model per CpG site, where two models are run:\nOne for annual mating success (AMS): glmmTMB(MS ~ delta_meth + (1|site/id), family = \"poisson\")\nAnd one for survival: glmmTMB(surv ~ delta_meth + (1|site/id), family = \"binomial\")\n\n\nCode\n# function to run the model\nfunction_model_fitness &lt;- function(df){tryCatch({\n  chr_pos &lt;- as.character(df[1,1])\n  df &lt;- as.data.frame(df)\n  df$site &lt;- as.factor(df$site)\n  df$id &lt;- as.factor(df$id)\n  \n  ### AMS\n  formula_ams &lt;- formula(paste0(\"MS ~ delta_meth + (1|site/id) \"))\n  model_ams &lt;- glmmTMB(formula_ams, data=df, family = \"poisson\")\n  summary_ams &lt;- summary(model_ams)\n  \n  intercept_ams &lt;- summary_ams$coefficients$cond[\"(Intercept)\", \"Estimate\"]\n\n  #fixed effect\n  parameter_estimate &lt;- summary_ams$coefficients$cond[\"delta_meth\", \"Estimate\"]\n  parameter_se &lt;- summary_ams$coefficients$cond[\"delta_meth\",\"Std. Error\"]\n  parameter_zval &lt;- summary_ams$coefficients$cond[\"delta_meth\",\"z value\"]\n  parameter_pval &lt;- summary_ams$coefficients$cond[\"delta_meth\", \"Pr(&gt;|z|)\"]\n  \n  message_ams &lt;- model_ams$fit$message\n  dispersion_ams &lt;- overdisp_fun(model_ams)\n \n  ams &lt;- data.frame(chr_pos=as.factor(chr_pos),\n                    intercept_ams = intercept_ams,\n                    ams_delta_meth_estimate = as.numeric(parameter_estimate),\n                    ams_delta_meth_se = as.numeric(parameter_se),\n                    ams_delta_meth_zval = as.numeric(parameter_zval),\n                    ams_delta_meth_pval = as.numeric(parameter_pval),\n                    ams_message = message_ams,\n                    ams_disp_chi = dispersion_ams[1][[1]],\n                    ams_disp_ratio = dispersion_ams[2][[1]],\n                    ams_disp_rdf = dispersion_ams[3][[1]],\n                    ams_disp_p = dispersion_ams[4][[1]]\n  ) \n  \n  ### surv\n  formula_surv &lt;- formula(paste0(\"surv ~ delta_meth + (1|site/id) \"))\n  model_surv &lt;- glmmTMB(formula_surv, data=df, family = \"binomial\")\n  summary_surv &lt;- summary(model_surv)\n  \n  intercept_surv &lt;- summary_surv$coefficients$cond[\"(Intercept)\", \"Estimate\"]\n\n  #fixed effect\n  parameter_estimate &lt;- summary_surv$coefficients$cond[\"delta_meth\", \"Estimate\"]\n  parameter_se &lt;- summary_surv$coefficients$cond[\"delta_meth\",\"Std. Error\"]\n  parameter_zval &lt;- summary_surv$coefficients$cond[\"delta_meth\",\"z value\"]\n  parameter_pval &lt;- summary_surv$coefficients$cond[\"delta_meth\", \"Pr(&gt;|z|)\"]\n  \n  message &lt;- model_surv$fit$message\n  \n  dispersion_surv &lt;- overdisp_fun(model_surv)\n  \n  surv &lt;- data.frame(intercept_surv = intercept_surv,\n                  surv_delta_meth_estimate = as.numeric(parameter_estimate),\n                    surv_delta_meth_se = as.numeric(parameter_se),\n                    surv_delta_meth_zval = as.numeric(parameter_zval),\n                    surv_delta_meth_pval = as.numeric(parameter_pval),\n                    surv_message = message,\n                  surv_disp_chi = dispersion_surv[1][[1]],\n                  surv_disp_ratio = dispersion_surv[2][[1]],\n                  surv_disp_rdf = dispersion_surv[3][[1]],\n                  surv_disp_p = dispersion_surv[4][[1]]\n  ) \n  out &lt;- cbind(ams, surv)\n  return(out)\n  \n}, error = function(e){cat(\"ERROR :\", conditionMessage(e), \"\\n\");print(chr_pos)})\n}"
  },
  {
    "objectID": "qmd/8_fitness_meth.html#run-the-model",
    "href": "qmd/8_fitness_meth.html#run-the-model",
    "title": "9  Fitness effects",
    "section": "9.3 Run the model",
    "text": "9.3 Run the model\n\n# run model\ndelta_out_fitness &lt;- parallel::mclapply(delta_meth_ls, function_model_fitness,mc.cores=4)\ndelta_out_fitness &lt;- do.call(rbind.data.frame, delta_out_fitness)\n\nsave(delta_out_fitness, file=\"results/modeloutput/fitness/out_fitness_nopre_raw.RData\")"
  },
  {
    "objectID": "qmd/8_fitness_meth.html#exclude-models-that-did-not-convergence",
    "href": "qmd/8_fitness_meth.html#exclude-models-that-did-not-convergence",
    "title": "9  Fitness effects",
    "section": "9.4 Exclude models that did not convergence",
    "text": "9.4 Exclude models that did not convergence\n\n#### Subset models and exclude models that did not converge ####\n\ndelta_out_ams &lt;- subset(delta_out_fitness, ams_message == \"relative convergence (4)\")\ndelta_out_surv &lt;- subset(delta_out_fitness, surv_message == \"relative convergence (4)\")\n\n#### AMS ####\nnrow(delta_out_ams) / nrow(delta_out_fitness) * 100 # retain 96.4%, 749\n\n#### Survival ####\nnrow(delta_out_surv) / nrow(delta_out_fitness) * 100 # retain 99.7%, 775\n\nWhen excluding models with convergence warnings/errors, we retain 96.4% and 99.7% of CpG site models for AMS and survival respectively."
  },
  {
    "objectID": "qmd/8_fitness_meth.html#explore-and-filter-for-overdispersion",
    "href": "qmd/8_fitness_meth.html#explore-and-filter-for-overdispersion",
    "title": "9  Fitness effects",
    "section": "9.5 Explore and filter for overdispersion",
    "text": "9.5 Explore and filter for overdispersion\nWe can plot a histogram of the dispersion ratio and make a QQ plot to identify whether there is overdispersion and how to best filter for it.\n \n \nAs overdispersion only seems to be a potential issue for the AMS model, we filter out the sites with an overdispersion ratio higher than the 95 percentile for AMS only.\n\n## filter for 95 percentile AMS\ndelta_out_ams_clean &lt;- subset(delta_out_ams, ams_disp_ratio &lt; as.vector(quantile(delta_out_ams$ams_disp_ratio, 0.95)))\nnrow(delta_out_ams_clean) # 711\n\nWe are then left with a total of 711 CpG site models."
  },
  {
    "objectID": "qmd/8_fitness_meth.html#fdr-correction",
    "href": "qmd/8_fitness_meth.html#fdr-correction",
    "title": "9  Fitness effects",
    "section": "9.6 FDR-correction",
    "text": "9.6 FDR-correction\nAfter excluding CpG site models with overdispersion, we apply a multiple-testing correction using the false discovery rate (FDR).\n\n## FDR correction\n\ndelta_out_ams_clean$ams_delta_meth_qval &lt;- p.adjust(delta_out_ams_clean$ams_delta_meth_pval, method = \"fdr\", n = nrow(delta_out_ams_clean))\ndelta_out_surv$surv_delta_meth_qval &lt;- p.adjust(delta_out_surv$surv_delta_meth_pval, method = \"fdr\", n = nrow(delta_out_surv))\n\n#### How many significant? ####\nnrow(subset(delta_out_ams_clean, ams_delta_meth_qval &lt; 0.05)) #362\nnrow(subset(delta_out_surv, surv_delta_meth_qval &lt; 0.05)) #0\n\nThere are 362 significant CpG sites for AMS but none for survival. Below you can see the volcano plot and the raw data plots of the five most significant CpG sites.\n \n\n\nRaw data AMS CpG site 1\n\n\n\n\n\nRaw data AMS CpG site 2\n\n\n\n\n\nRaw data AMS CpG site 3\n\n\n\n\n\nRaw data AMS CpG site 4\n\n\n\n\n\nRaw data AMS CpG site 5"
  },
  {
    "objectID": "qmd/8_fitness_meth.html#annotation",
    "href": "qmd/8_fitness_meth.html#annotation",
    "title": "9  Fitness effects",
    "section": "9.7 Annotation",
    "text": "9.7 Annotation\n\n9.7.1 Based on black grouse annotation\nNext, we annotate in which regions these changing CpG sites are located in based on the black grouse annotation.\n\n#### Annotate AMS CpG sites ####\n\n### Packages ####\npacman::p_load(genomation, GenomicFeatures, rtracklayer, \n               GenomicRanges)\n\n\n### Combine all sites vs changing sites\ncpg_all &lt;- delta_out_ams %&gt;% dplyr::select(c(chr_pos, ams_delta_meth_qval))\nnames(cpg_all)[2] &lt;- \"parameter_qval\"\ncpg_all$parameter &lt;- \"all\"\n\ncpg_ams_select &lt;- cpg_sig_ams %&gt;% dplyr::select(c(chr_pos, ams_delta_meth_qval))\nnames(cpg_ams_select)[2] &lt;- \"parameter_qval\"\ncpg_ams_select$parameter &lt;- \"ams\"\n\nall_models_sig &lt;- rbind(cpg_all, cpg_ams_select)\n\n### Rename chr_pos and divide ###\nall_models_sig$chr_pos &lt;- gsub(\"__\", \";\", all_models_sig$chr_pos)\nall_models_sig$chr_pos &lt;- gsub(\"HRSCAF_\", \"HRSCAF=\", all_models_sig$chr_pos, )\n\n# Extract the numbers following HRSCAF=XXX_number\n# Split the chr_pos column into two columns based on the first \"_\"\nsplit_chr_pos &lt;- strsplit(all_models_sig$chr_pos, \"_\", fixed = TRUE)\n\nall_models_sig$chr &lt;- paste0(sapply(split_chr_pos, \"[\", 1), \"_\",\n                             sapply(split_chr_pos, \"[\", 2))\n\nall_models_sig$pos &lt;- sapply(split_chr_pos, \"[\", 3)\n\nall_models_sig &lt;- all_models_sig %&gt;% \n  relocate(chr, .after = chr_pos) %&gt;%\n  relocate(pos, .after = chr_pos)\n\n#revert scafnames\nall_models_sig$chr_pos &lt;- gsub(\";\",\"__\", all_models_sig$chr_pos)\nall_models_sig$chr_pos &lt;- gsub(\"HRSCAF=\", \"HRSCAF_\", all_models_sig$chr_pos)\n\nall_models_sig$chr &lt;- gsub(\";\",\"__\", all_models_sig$chr)\nall_models_sig$chr &lt;- gsub(\"HRSCAF=\", \"HRSCAF_\", all_models_sig$chr)\n\n### Load annotation data\nannotation_dir &lt;- \"~/PhD_grouse/grouse-annotation/output\"\n\npromoter=unique(gffToGRanges(paste0(annotation_dir, \"/promoters.gff3\")))\ngenes=unique(gffToGRanges(paste0(annotation_dir, \"/genes.gff3\")))\nTSS=unique(gffToGRanges(paste0(annotation_dir, \"/TSS.gff3\")))\nexons_gene=unique(gffToGRanges(paste0(annotation_dir, \"/exons_gene.gff3\")))\nintrons=unique(gffToGRanges(paste0(annotation_dir, \"/introns_transcripts.gff3\")))\ndownstream=unique(gffToGRanges(paste0(annotation_dir, \"/downstream.gff3\")))\nupstream=unique(gffToGRanges(paste0(annotation_dir, \"/upstream.gff3\")))\nthreeUTR =unique(gffToGRanges(paste0(annotation_dir, \"/threeUTRs.gff3\")))\nfiveUTR=unique(gffToGRanges(paste0(annotation_dir, \"/fiveUTRs.gff3\")))\n\n#### Annotate ####\nall_models_sig$end &lt;- all_models_sig$pos\nall_models_sig$start &lt;- all_models_sig$pos\nsig_gr &lt;- as(all_models_sig, \"GRanges\")\n\nsig_promoter &lt;- subsetByOverlaps(sig_gr, promoter) %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"promoter\", .after=\"parameter\") %&gt;% \n  dplyr::select(-c(seqnames:strand)) \n\nsig_gene &lt;- as.data.frame(subsetByOverlaps(sig_gr, genes)) %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"gene\", .after=\"parameter\") %&gt;% \n  dplyr::select(-c(seqnames:strand)) \n\nsig_tss &lt;- as.data.frame(subsetByOverlaps(sig_gr, TSS)) %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"TSS\", .after=\"parameter\") %&gt;%\n  dplyr::select(-c(seqnames:strand)) \n\nsig_exon &lt;- as.data.frame(subsetByOverlaps(sig_gr, exons_gene)) %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"exon\", .after=\"parameter\") %&gt;% \n  dplyr::select(-c(seqnames:strand)) \n\nsig_intron &lt;- as.data.frame(subsetByOverlaps(sig_gr, introns))  %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"intron\", .after=\"parameter\") %&gt;% \n  dplyr::select(-c(seqnames:strand)) \n\nsig_down &lt;- as.data.frame(subsetByOverlaps(sig_gr, downstream)) %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"downstream\", .after=\"parameter\") %&gt;% \n  dplyr::select(-c(seqnames:strand)) \n\nsig_up &lt;- as.data.frame(subsetByOverlaps(sig_gr, upstream))  %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"upstream\", .after=\"parameter\") %&gt;% \n  dplyr::select(-c(seqnames:strand)) \n\nsig_threeUTR &lt;- as.data.frame(subsetByOverlaps(sig_gr, threeUTR))  %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"threeUTR\", .after=\"parameter\") %&gt;% \n  dplyr::select(-c(seqnames:strand)) \n\nsig_fiveUTR &lt;- as.data.frame(subsetByOverlaps(sig_gr, fiveUTR))  %&gt;% as.data.frame() %&gt;%\n  add_column(\"region\" = \"fiveUTR\", .after=\"parameter\") %&gt;% \n  dplyr::select(-c(seqnames:strand)) \n\nall_models_sig_annotated &lt;- rbind(sig_promoter, sig_gene,\n                                  sig_tss, sig_exon, sig_intron, sig_down,\n                                  sig_up, sig_threeUTR,  sig_fiveUTR)\n\nsummary(as.factor(all_models_sig_annotated$region))\n\nsave(all_models_sig_annotated, file=\"results/modeloutput/fitness/annotated_sig_cpg_ams.RData\")\n\n#### Summarise number of sites per region ####\nsum_annotated &lt;- as.data.frame(table(as.factor(all_models_sig_annotated$region), all_models_sig_annotated$parameter))\nnames(sum_annotated) &lt;- c(\"region\", \"model\", \"n\")\n\nsum_annotated$model &lt;- gsub(\"all\", \"All\", sum_annotated$model)\nsum_annotated$model &lt;- gsub(\"ams\", \"Annual mating success\", sum_annotated$model)\n\nsum_annotated$region &lt;- gsub(\"downstream\", \"Downstream\", sum_annotated$region)\nsum_annotated$region &lt;- gsub(\"upstream\", \"Upstream\", sum_annotated$region)\nsum_annotated$region &lt;- gsub(\"exon\", \"Exon\", sum_annotated$region)\nsum_annotated$region &lt;- gsub(\"fiveUTR\", \"5' UTR\", sum_annotated$region)\nsum_annotated$region &lt;- gsub(\"gene\", \"Gene body\", sum_annotated$region)\nsum_annotated$region &lt;- gsub(\"intron\", \"Intron\", sum_annotated$region)\nsum_annotated$region &lt;- gsub(\"promoter\", \"Promoter\", sum_annotated$region)\nsum_annotated$region &lt;- gsub(\"threeUTR\", \"3' UTR\", sum_annotated$region)\n\nsum_annotated$region &lt;- factor(sum_annotated$region, levels = c(\"3' UTR\", \"5' UTR\", \"Downstream\", \"Upstream\", \"Gene body\", \"Exon\", \"Intron\", \"Promoter\", \"TSS\"))\n\n# add total sig CpGs\nsum_annotated &lt;- sum_annotated %&gt;% mutate(n_total = case_when(\n  model == \"All\" ~ nrow(delta_out_ams),\n  model == \"Annual mating success\" ~ nrow(cpg_sig_ams)))\n\nsum_annotated &lt;- sum_annotated %&gt;% mutate(perc = n / n_total * 100)\n\n\n\nNumber of significant CpG sites for AMS per gene region\n\n\n\n\n\n9.7.2 GOrilla\nWe next run the list of gene IDs of the significant sites as the target list, using just this sorted target list and not a background list. I used default settings and the analysis was done based on a human model (Homo sapiens). The result can be seen below.\n\nlibrary(readxl); library(dplyr); library(kableExtra)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\nAttaching package: 'kableExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\ntable_go_process_changing &lt;- read_excel(\"../results/modeloutput/fitness/GOPROCESS_ams.xlsx\")\n\ntable_go_process_changing %&gt;% select(-Genes) %&gt;% filter(grepl(\"^GO\", table_go_process_changing$`GO Term`)) %&gt;% kbl() %&gt;%  kable_classic_2() %&gt;%  scroll_box(width = \"99%\", height = \"200px\")\n\n\n\n\n\nGO Term\nDescription\nP-value\nFDR q-value\nEnrichment\nN\nB\nn\nb\n\n\n\n\nGO:0030047\nactin modification\n0.000453\n1\n46.86\n7404\n2\n158\n2\n\n\nGO:1903506\nregulation of nucleic acid-templated transcription\n0.000585\n1\n1.56\n7404\n1439\n158\n48\n\n\nGO:0006355\nregulation of transcription, DNA-templated\n0.000585\n1\n1.56\n7404\n1439\n158\n48\n\n\nGO:2001141\nregulation of RNA biosynthetic process\n0.000615\n1\n1.56\n7404\n1442\n158\n48\n\n\nGO:0051252\nregulation of RNA metabolic process\n0.000808\n1\n1.51\n7404\n1580\n158\n51\n\n\n\n\n\n\n\nThere doesn’t seem to be that many significant GO terms, but do seem to be related to fatty acid regulation."
  },
  {
    "objectID": "qmd/9_mutual_sites.html#raw-data",
    "href": "qmd/9_mutual_sites.html#raw-data",
    "title": "10  Mutual CpG sites",
    "section": "10.1 Raw data",
    "text": "10.1 Raw data\n\n10.1.1 Reproductive effort vs AMS\n\n\nRaw data mutual significant CpG site attendance and AMS\n\n\n\n\n\n10.1.2 Physiological changes vs AMS\n    \n\n\n10.1.3 Reproductive effort vs physiological changes\n\n\nRaw data mutual significant CpG site attendance and body mass\n\n\n\n\n\n10.1.4 Highlight\nThere is one CpG site significant for three things: lek centrality, changes in IgG and annual mating success"
  }
]